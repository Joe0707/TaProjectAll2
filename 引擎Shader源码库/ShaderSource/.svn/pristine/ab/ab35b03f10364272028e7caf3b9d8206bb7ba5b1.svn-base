pipeline
<
	technique = "Merge"
>
{

	["混合颜色因子"]
	 uniform float blend_k
    <
    	artist = "1"
    	init = "0.8"
    >;    
   
	["Bloom集中度"]
	uniform float bloomlayer
	<
		artist = "1"
		min = "0.0"
		max = "1.0"
		uistep = "0.1"
		init = "0.8"
	>;

	attribute float4 a_position: POSITION;
	attribute float4 a_t0: TEXTURE0;

	varying mediump float2 v_t0;

	uniform mediump float4 u_rt: RT_SIZE;
	//uniform lowp float u_tone_factor:TONE_FACTOR;
	//uniform lowp float u_adapt_factor:ADAPT_FACTOR;
	// varying highp float3 v_t1;

	["是否开启后处理描边"]
	uniform lowp float enable_hero_outline
	<
		init = "0.0"
		min = "0.0"
		max = "1.0"
		artist = "1"
	>;      
    
    
	uniform sampler Tex0
	<
		export = "0"
		mag = "POINT"
		min = "POINT"
		mip = "POINT"
		addressu = "clamp"
		addressv = "clamp"
	>;

	uniform sampler Tex1
	<
		export = "0"
		mag = "LINEAR"
		min = "LINEAR"
		mip = "POINT"
		addressu = "clamp"
		addressv = "clamp"
	>;

	uniform sampler Tex2
	<
		export = "0"
		mag = "LINEAR"
		min = "LINEAR"
		mip = "POINT"
		addressu = "clamp"
		addressv = "clamp"
	>;
    
	uniform sampler Tex3
	<
		export = "0"
		mag = "linear"
		min = "linear"
		mip = "linear"
		addressu = "clamp"
		addressv = "clamp"
	>;    
    

	["曝光"]
	uniform float ArtistAdaptFactor
	<
		artist = "1"
		min = "0.0"
		max = "4.0"
		uistep = "0.01"
		init = "0.8"
	>;

	function hdr_tonemap_aces
			in (highp float3 color, mediump float adapted_lum)
			out(highp float3 color_out)
	{
		float A = 2.51f;
		float B = 0.03f;
		float C = 2.43f;
		float D = 0.59f;
		float E = 0.14f;

		highp float3 adapt_color = color * adapted_lum;
		out(color_out, (adapt_color * (A * adapt_color + float3(B))) / (adapt_color * (C * adapt_color + float3(D)) + float3(E)));
	};


	vertex vs_main
	{
		vertex(a_position);
		out(v_t0, a_t0.xy);
        
               
        
        
	}

	pixel ps_main
	{
		float4 tex_color = sample(Tex0, v_t0);
		float4 bloom0 = sample(Tex1, v_t0 );
		float4 bloom1 = sample(Tex2, v_t0 );
		float4 bloom = lerp(bloom0, bloom1, float4(bloomlayer));
		//float4 bloom3 = lerp(tex_color, bloom, float4(bloomlayer));



		
		// macro(EDITOR) out(float adpat_factor)
		// {
		// 	branch("1")
		// 	{
		// 		out(adpat_factor, ArtistAdaptFactor);
		// 	}
		// 	branch("0")
		// 	{
		// 		out(adpat_factor, u_adapt_factor);
		// 	}
		// };
        
        float3 color_rgb = tex_color.rgb;
		float3 color_in = bloom.rgb + color_rgb * color_rgb;// adpat_factor;
		// macro(USE_HIEND_TONEMAP) out(float3 color_out)
		// {
		// 	branch("0")
		// 	{
				// function hdr_tonemap_aces(color_in, 1.0f) out(float3 color_out);
		// 	}
		// 	branch("1")
		// 	{
		// 		function hdr_hiend_tonemap(color_in, 1.0f) out(float3 color_out_);
		// 		out(color_out, color_out_);
		// 	}
		// };

		pixel(float4(float3(sqrt(color_in.rgb)), tex_color.a));
		// pixel(float4(sqrt(color_out.rgb), tex_color.a));
	}
}
