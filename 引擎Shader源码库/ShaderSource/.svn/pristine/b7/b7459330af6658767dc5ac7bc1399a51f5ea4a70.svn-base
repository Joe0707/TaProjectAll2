["common no light"]

pipeline
<
	version = "1.0.0" 
	author = "konglingjie" 
	category = "common" 
	company = "netease"
  	merge = "1"
  	techinque = "TShader"
>
{
	// 宏
	["雾效"]
	eitheror SCENE_FOG;
	macro(SCENE_FOG)
	<
		customizable = "1"
		default = "1"
	>;
	
	["diffuse贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;
	
	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	["composemask贴图"]
	uniform sampler _ComposeMask
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;
	["fxmask贴图"]
	uniform sampler _FXMask
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;
	["pattern贴图"]
	uniform sampler _PatternTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "0.0"
	>;
	["_ChangeAmount"]
	uniform mediump float _ChangeAmount
	<
		uistep = "0.001"
		artist = "1"    
		max = "2.0"
		min = "-0.5"
		init = "0.0"
	>;
	["_ChangeOffset"]
	uniform mediump float _ChangeOffset
	<
		uistep = "0.001"
		artist = "1"    
		max = "0.5"
		min = "-0.5"
		init = "0.0"
	>;
	["_ChangeSmooth"]
	uniform mediump float _ChangeSmooth
	<
		uistep = "0.001"
		artist = "1"    
		max = "0.3"
		min = "0.001"
		init = "0.015"
	>;
	["_ChangeSmooth2"]
	uniform mediump float _ChangeSmooth2
	<
		uistep = "0.001"
		artist = "1"    
		max = "0.3"
		min = "0.001"
		init = "0.02"
	>;
	["_Width"]
	uniform mediump float _Width
	<
		artist = "1"    
		init = "0.5"
	>;
	["_EdgeDistance"]
	uniform mediump float _EdgeDistance
	<
		artist = "1"    
		init = "0.5"
	>;
	["_EdgeHardness"]
	uniform mediump float _EdgeHardness
	<
		artist = "1"    
		init = "0.0"
		uistep = "0.001"  
		max = "0.99"
		min = "0.0"
	>;
	["_EdgeIntensity"]
	uniform mediump float _EdgeIntensity
	<
		artist = "1"    
		init = "2.0"
	>;
	["_PatternTilling"]
	uniform highp float2 _PatternTilling
	<
		artist = "1"    
		init = "(3.0,1.2)"
	>;
	["_DepthPatternTilling"]
	uniform highp float _DepthPatternTilling
	<
		artist = "1"    
		init = "5000.0"
	>;
	// ["_DepthPatternTilling2"]
	// uniform highp float _DepthPatternTilling2
	// <
	// 	artist = "1"    
	// 	init = "1.0"
	// >;
	["_Width1"]
	uniform mediump float _Width1
	<
		artist = "1"    
		init = "2.0"
	>;
	["_EdgeDistance1"]
	uniform mediump float _EdgeDistance1
	<
		artist = "1"    
		init = "-0.5"
	>;
	["_EdgeHardness1"]
	uniform mediump float _EdgeHardness1
	<
		artist = "1"    
		init = "0.8"
		uistep = "0.001"  
		max = "0.99"
		min = "0.0"
	>;
	["_EdgeIntensity1"]
	uniform mediump float _EdgeIntensity1
	<
		artist = "1"    
		init = "2.0"
	>;
	["_EmissColor"]
	uniform mediump float4 _EmissColor
	<
		init = "(0.1372549,0.3686275,0.6901961,0.0)"
		artist = "1"
		color = "1"
	>;
	["_LineIntensity"]
	uniform mediump float _LineIntensity
	<
		artist = "1"    
		init = "2.0"
	>;
	["_RimAdd"]
	uniform mediump float _RimAdd
	<
		artist = "1"    
		init = "0.5"
		uistep = "0.001"  
		max = "1.0"
		min = "0.0"
	>;
	["_HeightFactor"]
	uniform mediump float _HeightFactor
	<
		artist = "1"    
		init = "0.1"
		uistep = "0.001"  
		max = "0.5"
		min = "0.0"
	>;
	["_TileHeightFactor"]
	uniform mediump float _TileHeightFactor
	<
		artist = "1"    
		init = "0.25"
		uistep = "0.001"  
		max = "0.5"
		min = "-0.5"
	>;
	["_RimHeightFactor"]
	uniform mediump float _RimHeightFactor
	<
		artist = "1"    
		init = "0.05"
		uistep = "0.001"  
		max = "0.5"
		min = "0.0"
	>;
	["_SineSpeed"]
	uniform mediump float _SineSpeed
	<
		artist = "1"    
		init = "150.0"
	>;
	["_BlinkFreq"]
	uniform mediump float _BlinkFreq
	<
		artist = "1"    
		init = "0.75"
		uistep = "0.001"  
		max = "1.0"
		min = "0.0"
	>;
	["_Width2"]
	uniform mediump float _Width2
	<
		artist = "1"    
		init = "0.03"
	>;
	["_EdgeDistance2"]
	uniform mediump float _EdgeDistance2
	<
		artist = "1"    
		init = "0.0"
	>;
	["_EdgeHardness2"]
	uniform mediump float _EdgeHardness2
	<
		artist = "1"    
		init = "0.5"
		uistep = "0.001"  
		max = "1.0"
		min = "0.0"
	>;
	["_BlinkScale"]
	uniform mediump float _BlinkScale
	<
		artist = "1"    
		init = "2.0"
	>;
	["_TileOffsetFactor"]
	uniform mediump float _TileOffsetFactor
	<
		artist = "1"    
		init = "0.1"
		uistep = "0.001"  
		max = "0.5"
		min = "-0.5"
	>;
	["_OffsetIntensity"]
	uniform mediump float _OffsetIntensity
	<
		artist = "1"    
		init = "0.5"
	>;
	["_DebugBlink"]
	uniform mediump float _DebugBlink
	<
		artist = "1"    
		init = "0.0"
	>;
		["_MaskUOffset"]
	uniform mediump float _MaskUOffset
	<
		artist = "1"    
		init = "0.0"
	>;

	["_MaskVOffset"]
	uniform mediump float _MaskVOffset
	<
		artist = "1"    
		init = "0.0"
	>;
	["_MaskUScale"]
	uniform mediump float _MaskUScale
	<
		artist = "1"    
		init = "1.0"
	>;
	["_MaskVScale"]
	uniform mediump float _MaskVScale
	<
		artist = "1"    
		init = "1.0"
	>;
// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 diffuse : DIFFUSE;
	attribute float4 a_position : POSITION;
	
// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform lowp float alphaRef : ALPHA_REF;
	uniform lowp float4 u_fog_color : FOG_COLOR;
	uniform mediump float4 u_fog_info : FOG_INFO;
	uniform lowp float HeightFogDensity: HEIGHT_FOG_DENSITY; 
	uniform highp float frame_time : FRAME_TIME;

	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;	
	// varying变量
	varying mediump float4 UV0;
	varying lowp float fog_distance;
	varying lowp float fog_height_factor;

	["计算线性雾"]
	function get_fog_mix in (
	highp float fog_begin, // 雾的起始位置, view空间
	highp float fog_end, // 雾的结束位置, view空间
	highp float wvp_z // 顶点在投影空间的深度
	) out (mediump float fog_linear_factor) // 计算雾效因子
	{
		out(fog_linear_factor, saturate(smoothstep(fog_begin, fog_end, wvp_z)));
	};

	["计算高度雾"]
	function get_fog_height1 in(
	highp float fog_height_begin, // 雾的起始位置，世界空间
	highp float fog_height_end, // 雾的结束位置，世界空间
	highp float view_y // 顶点在世界空间的高度
	) out (mediump float fog_height_factor) // 计算雾效因子
	{
		highp float fromEnd = fog_height_end - view_y;
		mediump float delta = fog_height_end - fog_height_begin;
		mediump float height_factor = saturate( fromEnd / delta );
		
		out(fog_height_factor, height_factor);
		// out(fog_factor, 1.0f - height_factor);
		// out(fog_factor, max(linear_fog_factor, 1.0f - height_factor));
	};
	
	vertex
	{
		highp float4 pos = transform(a_position, wvp);
	    vertex(pos);

    	// diffuse
		mediump float4 uv0 = float4(texcoord0.xy, 1.0f, 0.0f);
		out(UV0, uv0);


		// // 在vertex中计算高度雾
		// macro(SCENE_FOG) {
		// 	branch ("1") {
		// 		mediump float4 pos_world = transform(a_position, world);
		// 		mediump float height = pos_world.y;

		// 		function get_fog_height1(u_fog_info.z, u_fog_info.w, height) out(mediump float fog_height_factor1);

		// 		mediump float distance = pos.z;
		// 		out(fog_distance , distance);
		// 		out(fog_height_factor, 1.0f - fog_height_factor1);
		// 	}
		// 	branch ("0") {
		// 	}
		// };
	}

	pixel
	{
		// lowp float4 diffuse_map_color = sample(Tex0, UV0.xy);

	 //    macro(DIFFUSE_ALPHA_SEPARATE) out (lowp float alpha)
	 //    {
		// 	branch("1") {
		// 		lowp float4 separateColor = sample(sepAlphaTex, UV0.xy);
		// 		out(alpha, separateColor.w);
		// 	}
		// 	branch("0") {
		// 		out(alpha, diffuse_map_color.a);
		// 	}
	 //    };

		lowp float4 composemask_value = sample( _ComposeMask, UV0.xy );
		lowp float DepthMask = composemask_value.r;
		lowp float HeightMask = composemask_value.g;
		lowp float AlphaMask = composemask_value.b;
		lowp float4 fxmask_value = sample(_FXMask, UV0.xy * float2(_MaskUScale,_MaskVScale) + float2(_MaskUOffset,_MaskVOffset));
		lowp float RimMask = fxmask_value.r;
		mediump float LineMask = fxmask_value.b * _LineIntensity;
		lowp float compose_mask = DepthMask + HeightMask * _HeightFactor + RimMask * _RimHeightFactor;
		highp float2 depthbias = float2(DepthMask * _DepthPatternTilling);
		highp float2 pattern_uv = UV0.xy * _PatternTilling + depthbias;
		lowp float4 pattern_tex_value = sample(_PatternTex,pattern_uv);

		float OffsetFactor = smoothstep(1.0f,_EdgeHardness2,abs((compose_mask + pattern_tex_value.g * _TileOffsetFactor - _ChangeAmount) -  _EdgeDistance2) / _Width2);
		
		float changefactor = (_ChangeAmount * 0.2f) + _ChangeSmooth;
		mediump float edge_factor_ = abs(_EdgeDistance - ((compose_mask + pattern_tex_value.r * _TileHeightFactor - _ChangeAmount) / changefactor)) / (_Width + _ChangeAmount * 0.5f);
		float edge_factor = smoothstep(1.0f,_EdgeHardness,edge_factor_) * _EdgeIntensity;

		highp float mulTime = frame_time * _SineSpeed;
		highp float BlinkFactor = ((step(sin(mulTime), _BlinkFreq) - 0.5f) * _BlinkScale) * edge_factor * (1.0f - saturate(_ChangeAmount));
		mediump float edge_factor1 = smoothstep(1.0f, _EdgeHardness1 , abs(_EdgeDistance1 - (compose_mask - _ChangeAmount) / changefactor) / _Width1) * _EdgeIntensity1;

		mediump float temp_output_178_0 = (RimMask + _RimAdd) * edge_factor1 * LineMask;
		mediump float2 tex0_uv = UV0.xy + (OffsetFactor * _OffsetIntensity * 0.01f) * float2(1.0f,0.0f);
		lowp float4 diffuse_color = sample(Tex0,tex0_uv);
		mediump float4 combined_color = diffuse_color + (_EmissColor * (edge_factor + BlinkFactor + temp_output_178_0));
		
		mediump float3 output_color = lerp(combined_color.xyz, float3(OffsetFactor),float3(_DebugBlink));

		float clampResult173 = saturate(saturate(edge_factor) + temp_output_178_0);
		lowp float alpha_factor = DepthMask + HeightMask * _HeightFactor - (_ChangeAmount + _ChangeOffset);
		lowp float clampResult159 = saturate(alpha_factor / _ChangeSmooth2);
		lowp float combined_alpha = saturate(clampResult173 + 1.0f - clampResult159) * AlphaMask;
		lowp float output_aplha = lerp( combined_alpha , OffsetFactor , _DebugBlink);

	    macro(ALPHA_TEST_ENABLE)
		{
		  	branch("1") {
				alphatest("<")(output_aplha - alphaRef, 0.0f);
		  	}
			branch("0") {
		 	}
		};

		//  macro(SCENE_FOG) out(mediump float3 final_result) {
		// 	branch ("1") {

		// 		// 在pixel中计算线性雾（地表顶点较少防止过渡畸变）
		// 		function get_fog_mix(u_fog_info.x, u_fog_info.y, fog_distance) out(mediump float fog_linear_factor);
		// 		// mediump float fog_linear_factor = fog_linear_factor11 ;
		// 		mediump float fog_factor = u_fog_color.a * max(fog_height_factor, fog_linear_factor);
		// 		out(final_result, lerp(diffuse_map_color.rgb, u_fog_color.rgb, float3(fog_factor)));

		// 		// out(final_result, float3(fog_factor));
		// 	}
		// 	branch("0")
		// 	{
		// 		out(final_result, diffuse_map_color.rgb);
		// 	}
		// };

		// pixel(float4(float3(pattern_tex_value.xyz),1.0f));
		pixel(float4(output_color, output_aplha * AlphaMtl));
	}
}
