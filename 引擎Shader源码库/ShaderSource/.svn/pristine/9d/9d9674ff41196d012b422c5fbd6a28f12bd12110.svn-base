["energy flow for character"]

pipeline
<
	version = "1.0.0" 
	author = "xuzhuoliang/konglingjie/liuyu" 
	category = "common" 
	company = "netease"
  	merge = "1"
	stencilenable = "1"
	stencilmask = "0"
	stencilwritemask = "255"
	stencilref = "0"
	stencilfunc= "1"
	stencilfail = "Replace"
	zfail = "Replace"
	stencilpass = "Replace"
>
{
// 宏
	["是否轮廓光"]
	eitheror FRESNEL_ENABLE;
	macro(FRESNEL_ENABLE)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否自发光"]
	eitheror EMISSIVE_ENABLE;
	macro(EMISSIVE_ENABLE)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否自发光贴图"]
	eitheror EMISSIVE_MASK;
	macro(EMISSIVE_MASK)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否流光遮罩"]
	eitheror FLOW_MASK;
	macro(FLOW_MASK)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否流光贴图"]
	eitheror FLOW_ENABLE;
	macro(FLOW_ENABLE)
	<  
		default = "0"
		customizable = "1"
	>;
  
	["是否溶解"]
	eitheror DISSOLVE_EFFECT;
	macro(DISSOLVE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否灵魂状态"]
	eitheror GHOST_EFFECT;
	macro(GHOST_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否冰冻"]
	eitheror FROZENE_EFFECT;
	macro(FROZENE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	
	["是否燃烧"]
	eitheror FIRE_EFFECT;
	macro(FIRE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否金身"]
	eitheror GOLD_EFFECT;
	macro(GOLD_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	
	["是否叠加为ADD模式"]
	eitheror ADD_MODE;
	macro(ADD_MODE)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否石化"]
	eitheror PETRIFY_EFFECT;
	macro(PETRIFY_EFFECT)
	<
		default = "0"
		customizable = "1"
	>;

	["是否使用2U"]
	eitheror SECONDUV_ENABLE;
	macro(SECONDUV_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["是否使用MatCap"]
	eitheror MATCAP_ENABLE;
	macro(MATCAP_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

// 贴图
	
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;
	
	["材质贴图"]
	uniform sampler MatcapTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;

	["特殊效果贴图"]
	uniform sampler BuffTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		// path = "fx\\texture\\effect\\fire_buff.png"// 燃烧贴图
		// path = "fx\\texture\\noise\\noise_yd_26.tga"// 金身贴图
		// path = "fx\\texture\\noise\\noise_yd_26.tga" //灵体贴图
		// path = "fx\\texture\\effect\\dissolve.png" //溶解贴图
		// path = "fx\\texture\\effect\\petrify_buff.png" //石化贴图
	>;

	["流动贴图(顶点色R通道)"]
	uniform sampler FlowTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;

	["流动遮罩"]
	uniform sampler FlowMaskTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;

	["自发光遮罩"]
	uniform sampler EmissiveTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;

	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 texcoord1 : TEXTURE1;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_color : DIFFUSE;

	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;
	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;	
	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 wv: WORLD_VIEW;
	// uniform highp float4x4 view : VIEW;
	uniform highp float4x4 world : WORLD;
	uniform mediump float4 camera_pos : CAMERA_POSITION;
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;
	uniform highp float frame_time : FRAME_TIME;

	["matcap亮度"]
	uniform float matcap_brightness
	<
		artist = "1"
		init = "0.0"
	>;
	
	["叠加色"]
	uniform mediump float3 change_color
	<
		color = "1"
		init = "1.0,1.0,1.0"
	>;

	["是否采用2U（1为2U）"]
	uniform lowp float UV12_step
	<
		artist = "1"
		init = "0"
		uistep = "1"
		min = "0"
		max = "1"
	>;

	["流动贴图平铺"]
	uniform lowp float2 flowtex_tilling
	<
		artist = "1"
		init = "(1,1)"
	>;

	["流动贴图速度"]
	uniform lowp float2 flowtex_speed
	<
		artist = "1"
		init = "(0,0)"
	>;

	["流动贴图扭曲"]
	uniform lowp float flowtex_distort
	<
		artist = "1"
		init = "0"
	>;

	["流动贴图色调"]
	uniform lowp float4 flowtex_tone
	<
		artist = "1"
		color = "1"
		init = "(1,1,1,1)"
	>;

	["流动贴图强度"]
	uniform lowp float flowtex_inten
	<
		artist = "1"
		init = "1"
	>;

	["Diffuse强度"]
	uniform lowp float diffuse_inten
	<
		artist = "1"
		init = "1"
		uistep = "1"
		min = "0"
		max = "1"
	>;

	["轮廓光颜色强度"]
	uniform mediump float rim_multi
	<
		uigroup = "轮廓光"
		init = "1.0"
		uistep = "0.001"
		artist = "1"
		max = "5.0"
		min = "1.0"
	>;

	["轮廓颜色"]
	uniform mediump float4 rim_outside
	<
		uigroup = "轮廓光"
		init = "(0.4, 0.0, 0.0,1)"
		color = "1"
		artist = "1"
	>;

	["内部颜色"]
	uniform mediump float4 rim_inner
	<
		uigroup = "轮廓光"
		init = "(0.5,0.5,0.5,1)"
		artist = "1"
		color ="1"
	>;	

	["rim 开始"]
	uniform mediump float u_rim_start
	<
		uigroup = "轮廓光"
		uistep = "0.001"
		init = "0.15"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["rim 结束"]
	uniform mediump float u_rim_end
	<
		uigroup = "轮廓光"
		uistep = "0.001"
		init = "1.50"
		max = "1.5"
		min = "0.0"
		artist = "1"
	>;

	["自发光颜色(顶点色G通道)"]
	uniform mediump float4 emissive_color
	<
		uigroup = "自发光"
		init = "(0,0,0,0)"
		artist = "1"
		color ="1"
	>;	

	["半透"]
	uniform lowp float _SpecAlpha
	<
		artist = "1"
		init = "1"
		uistep = "0.001"
		max = "1.0"
		min = "0.0"
	>;
	["溶解程度"]
	uniform lowp float DissAmount
	<
		artist = "1"
		init = "0.0"
		uistep = "0.001"
		max = "1.0"
		min = "0.0"
	>;
	["溶解边界颜色"]
	uniform lowp float4 u_dissolve_color
	<
		color = "1"
		artist = "1"
		init = "(1.0, 0.1, 0.1, 1.0)"
		uigroup = "溶解"
	>;
	["uvtiling"]
	uniform lowp float uvtiling
	<
		uistep = "0.001"
		init = "1"
		max = "5.0"
		min = "1.0"
		artist = "1"
	>;

	["范围开始"]
	uniform mediump float nov_sm1
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.31"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["范围结束"]
	uniform mediump float nov_sm2
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "1.0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["中央厚度"]
	uniform mediump float sm_min
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.4"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["金身-中央厚度"]
	uniform mediump float sm_min_gold
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.42"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["灵魂边缘强度"]
	uniform mediump float ghost_rim_sm_multi
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.8"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;


	["光效强度"]
	uniform mediump float sm_multi
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "2.35"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["UV动画速度"]
	uniform mediump float sm_vuspeed
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.53"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;	

	["U缩放"]
	uniform float sm_uvtiling_u
	<
		artist = "1"
		uigroup = "BUFF"
		init = "0.1"
		uistep = "0.0001"
		max = "2.0"
		min ="0.0"
	>;
	["U偏移"]
	uniform float sm_uvoffset_u
	<
		artist = "1"
		uigroup = "BUFF"
		init = "1.0"
		uistep = "0.0001"
		max = "1.0"
		min ="-1.0"
	>;
	["V缩放"]
	uniform float sm_uvtiling_v
	<
		artist = "1"
		uigroup = "BUFF"
		init = "0.1"
		uistep = "0.0001"
		max = "2.0"
		min ="0.0"
	>;

	["金身颜色"]
	uniform mediump float4 gold_color_add
	<
		color = "1"
		uigroup = "BUFF"
		init = "1.0, 0.756, 0.121, 1.0"
		artist = "1"
	>;
	["灵魂颜色"]
	uniform mediump float4 ghost_color_add
	<
		color = "1"
		uigroup = "BUFF"
		init = "0.847, 0.847, 1.0, 1.0"
		artist = "1"
	>;

	["灵魂贴图强度"]
	uniform mediump float ghost_sm_multi
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "1.0"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["颜色"]
	uniform mediump float4 sm_color_ad
	<
		color = "1"
		uigroup = "BUFF"
		init = "1.0, 1.0, 1.0, 1.0"
		artist = "1"
	>;

	["纹理平铺数"]
	uniform float per_uvtilling
	<
		artist = "1"
		uigroup = "BUFF"
		init = "3.0"
	>;

	// ["石化阴影深度"]
	// uniform float per_lerp
	// <
	// 	artist = "1"
	// 	uigroup = "BUFF"
	// 	uistep = "1"
	// 	max = "1"
	// 	min = "0"
	// 	init = "1.0"
	// >;

	// ["石化边缘宽度"]
	// uniform float height_sm2
	// <
	// 	artist = "1"
	// 	uigroup = "BUFF"
	// 	uistep = "1"
	// 	max = "1"
	// 	min = "0"
	// 	init = "0.1"
	// >;

	["石化程度"]
	uniform float ChangeAmount
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "1"
		min = "0"
		init = "0.1"
	>;


	["抖动速度"]
	uniform float shake_speed
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "5"
		min = "0"
		init = "0.1"
	>;

	["抖动强度"]
	uniform float shake_intensity
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "5"
		min = "0"
		init = "0.1"
	>;

	["抖动高度"]
	uniform float shake_height
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "20"
		min = "0"
		init = "0.4"
	>;

	["matcap亮部颜色"]
	uniform lowp float4 matcap_light_color
	<
		color = "1"
		init = "(1,1,1,1)"
		artist = "1"
		uigroup = "MatCap"
	>;

	["matcap轮廓颜色"]
	uniform lowp float4 matcap_rim_color
	<
		color = "1"
		init = "(0,0,0,1)"
		artist = "1"
		uigroup = "MatCap"
	>;

	["matcap亮部强度"]
	uniform mediump float matcap_light_intensity
	<

		init = "1.0"
		artist = "1"
		uigroup = "MatCap"
		min = "0.0"
		max = "9.0"
		uistep = "0.01"
	>;

	["matcap暗部颜色"]
	uniform lowp float4 matcap_dark_color
	<
		color = "1"
		init = "(0.5,0.5,0.5,1)"
		artist = "1"
		uigroup = "MatCap"
	>;

	["matcap暗部强度"]
	uniform lowp float matcap_dark_intensity
	<
		init = "1.0"
		artist = "1"
		uigroup = "MatCap"
		min = "0.0"
		max = "1.0"
		uistep = "0.01"
	>;

	["matcap高光颜色"]
	uniform lowp float4 matcap_highlight_color
	<
		color = "1"
		init = "(1.0,1.0,1.0,1.0)"
		artist = "1"
		uigroup = "MatCap"
	>;

	["matcap高光强度"]
	uniform mediump float matcap_highlight_intensity
	<
		init = "0.0"
		artist = "1"
		uistep = "0.01"
		uigroup = "MatCap"
		min = "0.0"
		max = "9.0"
	>;

	["matcap透明度调节"]
	uniform lowp float matcap_alpha_adjust
	<
		init = "1.0"
		artist = "1"
		uigroup = "MatCap"
		uistep = "0.01"
		min = "0.0"
		max = "3.0"
	>;
	["lerp111"]
	uniform float lerp111
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "1"
		min = "0"
		init = "1"
	>;

	// varying变量
	varying mediump float2 UV0;
	varying mediump float2 UV1;
	varying mediump float2 v_flowtex_uv;
	varying mediump float effectlerp;// 替代ghostlerp icelerp firelerp goldlerp petrify_shadow ;
	// varying mediump float icelerp;
	// varying mediump float firelerp;
	// varying mediump float goldlerp;
	// varying mediump float2 petrify_uv;
	// varying mediump float petrify_shadow;
	varying mediump float height_sm;
	varying mediump float v_vertical_fac;
	varying mediump float v_gold_gradient;
	// varying mediump float2 v_gold_uv;
	// varying mediump float2 v_ghost_uv;
	//varying lowp float v_height_fac;
	varying mediump float2 effectuv;// 替代petrify_uv v_gold_uv v_ghost_uv;
	varying mediump float2 v_matcap_uv;
	varying mediump float4 PosWorld;
	varying lowp float3 v_NormalWorld;
	varying lowp float4 v_vertex_color;
	//varying lowp float v_height_fac;

	vertex
	{	
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				out(vec, pos1);
				out(nor, nor1);
				
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};
		highp float4 position = vec;	
		highp float4 normal = nor;

		highp float4 pos = transform(position, wvp);
		highp float4 pos_world = transform(position, world);
		out(UV0, texcoord0.xy);
		//out(v_height_fac, clamp(position.y/10.0f, 0.0f, 1.0f));

		mediump float3 normal_view = normalize(transform(normal.rgb,float3x3(wv)));
		mediump float2 matcap_uv = (normal_view.xy) * float2(0.5f, -0.5f) + float2(0.5f);
		out(v_matcap_uv, matcap_uv);

		// 灵体状态（可以跑但是未确认效果，先别用）
		macro(GHOST_EFFECT) {
			branch ("1") {
				mediump float ghostlerp_ = smoothstep(nov_sm1,nov_sm2,1.0f + normal_view.b);
				out(effectlerp,saturate(ghostlerp_ + sm_min));

				// 控制頂點運動
				// 顶点位置越高扰动越弱，根据世界空间坐标做扰动偏移
				mediump float horizon_fac = pos_world.x + pos_world.z; // 水平因子
				//lowp float shake_height = 20.0f; // 标准高度
				mediump float vertical_fac = clamp((position.y - shake_height) * 0.1f, 0.0f, 1.0f); // 垂直因子 // 明天把高度抖动也写下
				out(v_vertical_fac, vertical_fac);
				highp float ghost_uv_y = position.y + frame_time * sm_vuspeed;
				lowp float2 ghost_view = float2(normal_view.x * sm_uvtiling_u + sm_uvoffset_u, ghost_uv_y * sm_uvtiling_v);
				out(effectuv, ghost_view);
			}
			branch ("0") {
			}
		};

		vertex(pos);

		macro(FROZENE_EFFECT) { 
			branch ("1") {
				mediump float icelerp_ = smoothstep(nov_sm1,nov_sm2,1.0f + normal_view.b);
				out(effectlerp,saturate(icelerp_ + sm_min));
			}
			branch ("0") {
			}
		};

		macro(FIRE_EFFECT) { 
			branch ("1") {
				out(UV1,normal_view.rg * float2(0.5f, -0.5f) + float2(-0.5f, -0.5f));
				mediump float firelerp_ = smoothstep(nov_sm1,nov_sm2,1.0f + normal_view.b);
				out(effectlerp,saturate(firelerp_ + sm_min));
				
			}
			branch ("0") {
			}
		};

		macro(GOLD_EFFECT) { 
			branch ("1") {
				//out(UV1, normal_view.rg * float2(0.5f, -0.5f) + float2(-0.5f, -0.5f));
				mediump float firelerp_ = smoothstep(nov_sm1,nov_sm2,1.0f + normal_view.b);
				out(effectlerp,saturate(firelerp_ + sm_min_gold));

				//highp float4 pos_view = normalize(transform(position, wv));
				highp float gold_uv_y = position.y + frame_time * sm_vuspeed;
				lowp float2 gold_view = float2(normal_view.x * sm_uvtiling_u + sm_uvoffset_u, gold_uv_y * sm_uvtiling_v);
				out(effectuv, gold_view);

				mediump float gradient_fac = clamp((position.y - shake_height) * 0.1f, 0.0f, 1.0f); // 垂直因子
				out(v_gold_gradient, gradient_fac);
				
			}
			branch ("0") {
			}
		};		

		macro(PETRIFY_EFFECT) {
			branch ("1") {
				highp float3 normal_world = normalize(transform(normal.rgb,float3x3(world)));
				out(effectlerp,max(0.0f,normal_world.y));
				out(effectuv,texcoord0.xy * per_uvtilling);
				// 模型高度一般为30
				out(height_sm,step(30.0f*ChangeAmount,a_position.y));
			}
			branch ("0") {
			}
		};

		// ——————————以上是特殊效果————————————

		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		float3x3 worldMat = float3x3(world);		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
		out(v_NormalWorld, world_normal);
	
		out(v_vertex_color, a_color);

		macro(FLOW_ENABLE){
			branch ("1") {
				macro(SECONDUV_ENABLE) out(highp float2 v_flowtex_uv1) {
					branch ("1") {
						out(v_flowtex_uv1, texcoord1.xy);
					}
					branch ("0") {
						out(v_flowtex_uv1, texcoord0.xy);
					}
				};
				out(v_flowtex_uv, v_flowtex_uv1);
			}
			branch ("0") {}
		};
}

	pixel
	{
		lowp float4 vertex_color = v_vertex_color;
		mediump float2 matcap_uv = v_matcap_uv;
		// 视线方向
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);
		lowp float3 vertex_normal = v_NormalWorld;

		// diffuse
		lowp float4 diffuse_map_color = sample(Tex0,UV0.xy);
		//lowp float height_fac = v_height_fac;

		// alpha存储matcap的mask, shader不支持半透明
		macro(DIFFUSE_ALPHA_SEPARATE) out (lowp float matcap_mask)
		{
		  branch("1") {
			lowp float4 separateColor = sample(sepAlphaTex, UV0.xy);
			out(matcap_mask, separateColor.w);
		  }
		  branch("0") {
			out(matcap_mask, diffuse_map_color.a);
		  }
		};

		// // 加入matcap
		// lowp float4 matcap_map_color = sample(MatcapTex, v_matcap_uv);
		// lowp float3 matcap_color = matcap_map_color.rgb * matcap_brightness * matcap_mask;
		// // lowp float3 matcap_color = matcap_map_color.r  * matcap_mask * matcap_tone.rgb + matcap_map_color.ggg;
		// lowp float4 matcap_combined = float4(diffuse_map_color.rgb + matcap_color.rgb, 1.0f);

		macro(LEVEL_MIDDLE) out(lowp float4 matcap_combined)
		{	
			branch("1")
			{
				macro(MATCAP_ENABLE) out(lowp float4 matcap_combined0) 
				{
					branch ("1") 
					{
						lowp float4 matcap_map_color = sample(MatcapTex, v_matcap_uv);
		                lowp float3 rim_color = matcap_map_color.r * matcap_rim_color.rgb;
		                lowp float3 dirlight_color = lerp(matcap_dark_color.rgb, matcap_light_color.rgb, float3(matcap_map_color.g))*2.0f;
		                lowp float3 spec_color = matcap_map_color.b * matcap_highlight_color.rgb * matcap_highlight_intensity;
		                lowp float3 diffuse_light = (diffuse_map_color.rgb * diffuse_map_color.rgb) * (dirlight_color + rim_color + spec_color) + rim_color * 0.5f;
		                out(matcap_combined0, float4(lerp(diffuse_map_color.rgb, sqrt(diffuse_light), float3(lerp111)), matcap_mask));
		                // out(alpha_adding, matcap_alpha_adjust * dot(spec_color, float3(0.3f, 0.59f, 0.11f)));
					}
					branch ("0")
					{
						out(matcap_combined0, float4(diffuse_map_color.rgb, matcap_mask));
		                // out(alpha_adding, 0.0f);
					} 
				};
				out(matcap_combined,matcap_combined0);
			}
			branch("0")
			{
				out(matcap_combined, float4(diffuse_map_color.rgb, matcap_mask));
			}
		};

		macro(FLOW_ENABLE) out(lowp float3 flow_combined) {
			branch ("0") {
				out(flow_combined, matcap_combined.rgb);
			}
			branch ("1") {
				// lowp float diffuseLuminance = dot(matcap_combined.rgb, float3(0.3f, 0.59f, 0.11f));

				mediump float2 flowtex_uv1 = v_flowtex_uv;
				mediump float2 view_distort = (v_matcap_uv - float2(0.5f))/ float2(0.5f, -0.5f);
				mediump float2 flowtex_uv = flowtex_uv1 * flowtex_tilling + frame_time * flowtex_speed + view_distort * flowtex_distort;
				lowp float4 flowtex_color = sample(FlowTex, flowtex_uv);
				macro(FLOW_MASK) out(lowp float flow_mask) {
					branch ("0") {
						out(flow_mask, vertex_color.r);
					}
					branch ("1") {
						lowp float4 flow_maskmap = sample(FlowMaskTex, UV0.xy);
						out(flow_mask, saturate(vertex_color.r * flow_maskmap.r));
					}
				};					
				out(flow_combined, matcap_combined.rgb * lerp(1.0f, diffuse_inten, flow_mask) + flowtex_color.rgb * flowtex_inten * flowtex_tone.rgb * flow_mask);
			}
		};
		
		macro(FRESNEL_ENABLE) out(lowp float3 fresnel_combined) {
			branch ("0") {
				out(fresnel_combined,flow_combined.rgb);
			}
			branch ("1") {
				lowp float NdotV = saturate(dot(view_dir, vertex_normal));
				lowp float rim_ = oneminus(NdotV);
				mediump float rim = smoothstep(u_rim_start, u_rim_end, rim_);
				lowp float3 fresnel_color = lerp(flow_combined.rgb * rim_inner.rgb * 2.0f, rim_outside.rgb * rim_multi, float3(rim));
				out(fresnel_combined,fresnel_color);
			}
		};

		macro(EMISSIVE_ENABLE) out(lowp float3 emissive_combined) {
			branch ("0") {
				out(emissive_combined,fresnel_combined);
			}
			branch ("1") {
				macro(EMISSIVE_MASK) out(lowp float emissive_mask) {
					branch ("0") {
						out(emissive_mask, vertex_color.g);
					}
					branch ("1") {
						lowp float4 emissive_map = sample(EmissiveTex, UV0.xy);
						out(emissive_mask, saturate(vertex_color.g * emissive_map.r));
					}
				};
				out(emissive_combined, emissive_mask * emissive_color.rgb + fresnel_combined);
			}
		};

		lowp float4 special_common = float4(emissive_combined, matcap_combined.a);

		// ——————————基于matcap计算特殊效果————————————

		// 灵魂状态
		macro(GHOST_EFFECT) out(lowp float4 combine_ghost) {
			branch ("0") {
				out(combine_ghost, matcap_combined);
			}
			branch ("1") {
				lowp float height_alpha = v_vertical_fac;
				lowp float3 ghost_flash = sample(BuffTex,effectuv.xy).rgb;
				lowp float3 ghost_color = ghost_color_add.rgb * ghost_rim_sm_multi;

				// lowp float3 ghost_color = lerp(1.15f * sm_color_ad.rgb, float3(oneminus(height_alpha)), float3(0.5f)); // hardcode
				//lowp float3 ghost_color = 1.15f * sm_color_ad.rgb; // hardcode
				lowp float3 combine_ghost_ = lerp(matcap_combined.rgb, ghost_color + ghost_sm_multi * ghost_flash,float3(effectlerp));
				out(combine_ghost, float4(combine_ghost_, height_alpha));
			}
		};

		// 冰冻状态（无采样贴图）
		macro(FROZENE_EFFECT) out(lowp float4 combine_frozen) {
			branch ("0") {
				out(combine_frozen,combine_ghost);
			}
			branch ("1") {
				lowp float3 ice_color = 1.15f * float3(0.21875f, 0.7882f, 1.0f); // hardcode
				lowp float3 combine_frozen_ = lerp(max(float3(0.2f), combine_ghost.rgb), ice_color,float3(effectlerp));
				out(combine_frozen, float4(combine_frozen_, combine_ghost.a));
			}
		};

		// 燃烧状态（采样了一张火焰贴图）
		macro(FIRE_EFFECT) out(lowp float4 combine_fire) {
			branch ("1") {
				lowp float3 fire_color = sample(BuffTex,UV1.xy).rgb * sm_multi;
				lowp float3 combine_fire_ = lerp(combine_frozen.rgb , fire_color, float3(effectlerp)); // 人会变暗
				out(combine_fire, float4(combine_fire_, combine_frozen.a));
			}
			branch ("0"){
				out(combine_fire, combine_frozen);
			}
		};

		// 金身
		macro(GOLD_EFFECT) out(lowp float4 combine_gold) {
			branch ("1") {
				//lowp float2 gold_flash = v_gold_uv;
				// lowp float3 gold_color = sample(GoldTex,UV1.xy).rgb * sm_multi;
				lowp float3 gold_flash = sample(BuffTex,effectuv.xy).rgb;
				lowp float3 gold_color = gold_color_add.rgb * sm_multi;
				lowp float goldlerp_1 = effectlerp;
				macro(ADD_MODE) out(lowp float3 combine_gold_) {
					branch ("1") {
						lowp float3 combine_gold_1 = lerp(combine_fire.rgb, gold_color+gold_flash, float3(goldlerp_1));
						out(combine_gold_, combine_gold_1);
					}
					branch("0"){
						lowp float3 combine_gold_1 = lerp(combine_fire.rgb, gold_color*gold_flash, float3(goldlerp_1));
						out(combine_gold_, combine_gold_1);
					}
				};
				lowp float3 result_gold = combine_gold_ + oneminus(gold_flash)*gold_color_add.rgb;
				lowp float height_alpha_gold = v_gold_gradient;
				out(combine_gold, float4(combine_gold_, height_alpha_gold * combine_fire.a));

			}
			branch("0"){
				out(combine_gold, combine_fire);
			}
		};

		// 石化状态（采样了一张黑白贴图）
		macro(PETRIFY_EFFECT) out(lowp float4 combine_petrfy) {
			branch ("1") {
				lowp float3 petrify_color = sample(BuffTex,effectuv).rgb * lerp(effectlerp,1.0f,0.6f);
				lowp float3 petrified_color = float3(0.299f * diffuse_map_color.x + 0.587f * diffuse_map_color.y + 0.114f * diffuse_map_color.z);
				lowp float3 combine_petrfy_= lerp(petrify_color,petrified_color,float3(0.3f));
				lowp float3 combine_petrfy_1 = lerp(combine_petrfy_,combine_gold.rgb,float3(height_sm));
				out(combine_petrfy, float4(combine_petrfy_1, combine_gold.a));
			}
			branch ("0") {
				out(combine_petrfy,combine_gold);	
			}
		};

		// 关于宏的数值计算
		macro(GHOST_EFFECT) out(lowp float GHOST_EFFECT_value) {
			branch ("1") {
				out(GHOST_EFFECT_value,1.0f);
			}
			branch ("0") {
				out(GHOST_EFFECT_value,0.0f);
			}
		};
		macro(FROZENE_EFFECT) out(lowp float FROZENE_EFFECT_value) {
			branch ("1") {
				out(FROZENE_EFFECT_value,1.0f);
			}
			branch ("0") {
				out(FROZENE_EFFECT_value,0.0f);
			}
		};
		macro(FIRE_EFFECT) out(lowp float FIRE_EFFECT_value) {
			branch ("1") {
				out(FIRE_EFFECT_value,1.0f);
			}
			branch ("0") {
				out(FIRE_EFFECT_value,0.0f);
			}
		};
		macro(GOLD_EFFECT) out(lowp float GOLD_EFFECT_value) {
			branch ("1") {
				out(GOLD_EFFECT_value,1.0f);
			}
			branch ("0") {
				out(GOLD_EFFECT_value,0.0f);
			}
		};
		macro(PETRIFY_EFFECT) out(lowp float PETRIFY_EFFECT_value) {
			branch ("1") {
				out(PETRIFY_EFFECT_value,1.0f);
			}
			branch ("0") {
				out(PETRIFY_EFFECT_value,0.0f);
			}
		};

		lowp float buff_value = saturate(GHOST_EFFECT_value + FROZENE_EFFECT_value + FIRE_EFFECT_value + GOLD_EFFECT_value + PETRIFY_EFFECT_value); 

		lowp float4 final_color = lerp(combine_petrfy, special_common,float4(step(buff_value,0.5f)));
		
		macro(DISSOLVE_EFFECT) out(lowp float4 combine_dissolve)
		{
			branch("1") {
				lowp float4 diss_samp = sample(BuffTex, UV0.xy);
				lowp float ClipAmount = diss_samp.x - ChangeAmount;
				alphatest("<")(ClipAmount, 0.0f);
				lowp float3 dest = u_dissolve_color.rgb * ClipAmount * 2.0f / 0.1f;
				lowp float num1 = step(0.1f, ClipAmount);
				lowp float3 combine_dissolve_ = num1 * change_color * final_color.xyz + (1.0f - num1) * dest;
				out(combine_dissolve, float4(combine_dissolve_, final_color.a));
			}
			branch("0") {
				out(combine_dissolve, float4(change_color * final_color.xyz, final_color.a));
			}
		};

		lowp float final_alpha = combine_dissolve.a * AlphaMtl * _SpecAlpha;
		pixel(float4(combine_dissolve.rgb , final_alpha));
	}
}
