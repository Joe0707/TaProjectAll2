["最基础的shader"]
pipeline
<
	version = "1.0.0"
	author = "ly"
	company = "Netease"
	techinque = "TShader"
	merge = "1"
>
{
    ["雾效"]
    eitheror FOG_EFFECT;
    macro(FOG_EFFECT)
    <
		customizable = "0"
		default = "1"
    >;

    ["是否接受迷雾"]
    eitheror FOW_ENABLE;
    macro(FOW_ENABLE)
    <
		customizable = "1"
		default = "0"
    >;

	["是否启用场景转置"]
	eitheror TRANS_ENABLE;
	macro(TRANS_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["是否双阵营"]
	eitheror TWOGROUP_ENABLE;
	macro(TWOGROUP_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启顶点动画"]
	eitheror ANIME_ENABLE;
	macro(ANIME_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启力场扰动"]
	eitheror FORCE_FIELD_ENABLE;
	macro(FORCE_FIELD_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启空间撕裂"]
	eitheror FX_ENABLE;
	macro(FX_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启区域变色"]
	eitheror CHANGE_COLOR_ENABLE;
	macro(CHANGE_COLOR_ENABLE)
	<
		customizable = "1"
		default = "1"
	>;


	["反向变色区域"]
	eitheror INVERT_CHANGE_POS;
	macro(INVERT_CHANGE_POS)
	<
		customizable = "1"
		default = "0"
	>;

	["绿色区域变色"]
	eitheror CHANGE_GREEN;
	macro(CHANGE_GREEN)
	<
		customizable = "1"
		default = "0"
	>;

	["红色区域变色"]
	eitheror CHANGE_RED;
	macro(CHANGE_RED)
	<
		customizable = "1"
		default = "1"
	>;

	["蓝色区域变色"]
	eitheror CHANGE_BLUE;
	macro(CHANGE_BLUE)
	<
		customizable = "1"
		default = "0"
	>;
	["风摆动动画"]
	eitheror WIND_ON;
	macro(WIND_ON)
	<
		customizable = "1"
		default = "0"
	>;
	["流光特效"]
	eitheror USE_FLOWEMISS_VFX;
	macro(USE_FLOWEMISS_VFX)
	<
		customizable = "1"
		default = "0"
	>;
	["高光"]
	eitheror HIGHTLIGHT_ON;
	macro(HIGHTLIGHT_ON)
	<
		default = "1"
	>;
	
	// attribute
	attribute float4 a_position: POSITION;
	attribute float4 a_texture0: TEXTURE0;// uv1
	attribute float4 a_texture1 : TEXTURE1;// uv2
	attribute float4 a_texture2 : TEXTURE2;// uv3

	attribute float4 texcoord4 : TEXTURE4;
	attribute float4 texcoord5 : TEXTURE5;
	attribute float4 texcoord6 : TEXTURE6;
	attribute float4 texcoord7 : TEXTURE7;
	attribute float4 a_tangent : TANGENT;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_color : DIFFUSE;

	uniform highp float4x4 wvp: WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform highp float4x4 viewProj : VIEW_PROJECTION;
	uniform highp float4x4 view : VIEW;

	uniform highp float4 cam_pos : CAMERA_POSITION;
	uniform highp float4 u_camera_info: CAMERA_INFO;

	uniform highp float4 change_area_p12
	<
		init = "(0.0, 0.0, 0.0, 0.0)"
	>;

	uniform highp float4 change_area_p34
	<
		init = "(0.0, 0.0, 0.0, 0.0)"
	>;
	
	uniform lowp float change_alpha
	<
		init = "0.2"
	>;	

	["影子颜色"]
	uniform mediump float4 u_shadow_color
	<
		artist = "1"
		color = "1"
		init = "(0.55, 0.98, 1.0)"
	>;

	uniform lowp float alphaRef : ALPHA_REF;

	uniform highp float4x4 lightmapTrans : TEXTURE_TRANS1;
	uniform mediump float4 LightMapScale : LIGHT_MAP_SCALE;


	["fog 雾效参数"]
	uniform lowp float4 u_fog_color : FOG_COLOR; // shader中用于调节lightmap的亮部
	uniform highp float4 u_fog_info : FOG_INFO; 

	uniform lowp float4 ambient_color : AMBIENT;
	// uniform lowp float4 ambient_color
	// <
	// 	init = "(0.345, 0.518, 0.678,1.0)"
	// >;

	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;

	// ——————————————————★★★ 顶点动画 ★★★—————————————————— 
	uniform highp float frame_time : FRAME_TIME;

	uniform lowp float4 wind_info : WIND_INFO;
	
	["漫反射贴图"]
	uniform sampler Tex0: DIFFUSE
	<
		artist = "1"
	>;

	["lightmap贴图"]
	uniform sampler TexLightmap : LIGHTMAP
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;

	["自发光贴图"]
	uniform sampler EmissTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;
	
	["雾气纹理"]
	uniform sampler FogDetailTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
		path = "shader\\core\\texture\\fog\\fog_detail.png"
	>;

	["力场图"]
	uniform sampler ForceFieldMap : FORCE_FIELD_MAP
	<
		artist = "0"
		mag = "linear"
		min = "linear"
		mip = "linear"
	>;

	["破碎隐藏图"]
	uniform sampler HideMaskMap : HIDE_MASK_MAP
	<
		artist = "0"
		mag = "linear"
		min = "linear"
		mip = "linear"
	>;

	["分开的alpha贴图"]
	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;
	["迷雾纹理"]
	uniform sampler view_texture: FOW
	<
		artist = "0"
		mag = "linear"
		min = "linear"
		mip = "linear"
	>;
	["法线纹理"]
	uniform sampler NormalMap
	<
		artist = "1"
		mag = "linear"
		min = "linear"
		mip = "linear"
		path = "scene\\model\\static\\5v5_marvel\\texture\\glassnormal.png"
	>;
	["反射图"]
	uniform sampler ReflectMap
	<
		artist = "1"
		mag = "linear"
		min = "linear"
		mip = "linear"
		path = "scene\\model\\static\\5v5_marvel\\texture\\space_image.png"
	>;
	uniform mediump float2 scene_size
    <
    	init = "(1280.0, 1280.0)"
    >;

	["迷雾颜色"]
	uniform mediump float4 fow_color
	<
		init = "(0.0, 0.168, 0.298, 0.619)" // 0.5176
		artist = "1"
		color = "1"
	>;	

	["迷雾渐变颜色"]
	uniform mediump float4 gradient_color
	<		
		// init = "(0.345, 0.518, 0.678,1.0)"
		// init = "(0.445, 0.678, 0.838,1.0)"
		init = "(0.395, 0.598, 0.748,1.0)"
		artist = "0"
		color = "1"
	>;	

	["雾气纹理平铺"]
	uniform mediump float2 fog_detail_tilling
	<
		artist = "1"
		init = "(0.006,0.006)"
	>;

	["雾气纹理平移"]
	uniform mediump float2 fog_detail_speed
	<
		artist = "1"
		init = "(0.2,0.0)"
	>;

    ["场景亮度"]
    uniform lowp float scene_illum : SCENE_ILLUM
    <
		init = "1.0"
		artist = "0"    
    >; 
    
    uniform float max_dist_factor
    <
		init = "20.0"
    >;

    uniform mediump float act_factor
    <
		init = "0.0015"
    >;

    uniform float wind_factor
    <
		init = "0.00005"
    >;

		
    ["变色中心x"]
    uniform lowp float sig_x
    <
		init = "0.0"
		artist = "1"
    >;
    ["变色中心z"]
    uniform lowp float sig_z
    <
		init = "0.0"
		artist = "1"
    >;

 	["R染色强度"]
    uniform lowp float adjust_multi1
    <
		init = "0.3"
		uistep = "0.001"
		artist = "1"    
		max = "3.0"
		min = "0.0"
    >; 	

 	["G染色强度"]
    uniform lowp float adjust_multi2
    <
		init = "3"
		uistep = "0.001"
		artist = "1"    
		max = "3.0"
		min = "0.0"
    >; 	

 	["B染色强度"]
    uniform lowp float adjust_multi3
    <
		init = "0.64"
		uistep = "0.001"
		artist = "1"    
		max = "3.0"
		min = "0.0"
    >; 	

    ["R染色偏移"]
    uniform lowp float adjust_area1 
    <
		init = "0.0"
		uistep = "0.001"
		artist = "1"    
		max = "0.6"
		min = "-0.6"
    >; 

    ["G染色偏移"]
    uniform lowp float adjust_area2
    <
		init = "0.19"
		uistep = "0.001"
		artist = "1"    
		max = "0.6"
		min = "-0.6"
    >; 

    ["B染色偏移"]
    uniform lowp float adjust_area3
    <
		init = "0.01"
		uistep = "0.001"
		artist = "1"    
		max = "0.6"
		min = "-0.6"
    >; 
	
	["R变色颜色"]
	uniform mediump float4 changed_color1
	<
		//init = "(1.0, 0.4274, 0.3882, 1.0)" 
		init = "(0.145098,0.156863,0.211765,1.000000)" 

		artist = "1"
		color = "1"
	>;	
	["G变色颜色"]
	uniform mediump float4 changed_color2
	<
		//init = "(1.0, 0.4274, 0.3882, 1.0)" 
		init = "(0.1059,0.2588,0.3647,1)" 

		artist = "1"
		color = "1"
	>;	
	["B变色颜色"]
	uniform mediump float4 changed_color3
	<
		//init = "(1.0, 0.4274, 0.3882, 1.0)" 
		init = "(0.286275,0.462745,0.282353,1.000000)" 

		artist = "1"
		color = "1"
	>;

	["雾效修正"]
	uniform mediump float fog_fix
	<
		init = "0.0" 
		artist = "1"
	>;

// 河道特效
	["扩散开始点"]
	uniform float4 CenterPoint
	<
		uigroup = "大龙扩散特效"
		artist = "0"
		init = "(-165.0, 0.0, 165.0, 1.0)"
	>;
	["扩散波半径(Debug)"]
	uniform float Radius
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "100"
		uistep = "0.001"  
		max = "150"
		min = "-150"
	>;
	["消失半径(Debug)"]
	uniform float DisappearRadius
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "100"
		uistep = "0.001"  
		max = "150"
		min = "-150"
	>;	
	["扩散纹理Tilling"]
	uniform float PatternTilling
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "9.0"
	>;
	["扩散边缘纹理"]
	uniform float PatternSpread
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "2.0"
		uistep = "0.001"  
		max = "5"
		min = "-5"
	>;
	["拖尾范围"]
	uniform float RadiusAtten
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "-3.5"
		uistep = "0.001"  
		max = "10"
		min = "-10"
	>;
	["拖尾Power"]
	uniform float RadiusPower
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "1.0"
		uistep = "0.001"  
		max = "20"
		min = "0.1"
	>;
	["拖尾亮度"]
	uniform float RadiusIntensity
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "1.0"
		uistep = "0.001"  
		max = "20"
		min = "0.0"
	>;
	["亮边偏移"]
	uniform float EdgeDistance
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "1.0"
		uistep = "0.001"  
		max = "1"
		min = "-1"
	>;
	["亮边宽度"]
	uniform float EdgeWidth
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "0.24"
		uistep = "0.001"  
		max = "3"
		min = "0"
	>;
	["亮边平滑度"]
	uniform float EdgeSmoothness
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "2.0"
	>;
	["亮边亮度"]
	uniform float EdgeIntensity
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "1.0"
	>;
	["亮边颜色"]
	uniform mediump float4 EdgeColor
	<
		uigroup = "大龙扩散特效"
		init = "(1.0, 1.0, 1.0,1.0)"
		artist = "1"
		color = "1"
	>;
	["顶点偏移强度"]
	uniform float VertexOffsetIntensity
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "5.0"
	>;
	["影响宽度"]
	uniform float HedaoWidth
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		uistep = "0.001"  
		max = "0.5"
		min = "-0.5"
		init = "-0.25"
	>;
	["影响渐隐"]
	uniform float HedaoSmooth
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "0.5"
		uistep = "0.001"  
		max = "2.0"
		min = "0.0"
	>;
	["法线图Tilling"]
	uniform mediump float NormalTilling
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "9.0"
	>;
	["反射图Tilling"]
	uniform mediump float ReflectTilling
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "3.5"
	>;

	["扩散Debug"]
	uniform mediump float Debug
	<
		artist = "1"
		uigroup = "大龙扩散特效"
		init = "0.0"
		uistep = "0.001"  
		max = "1.0"
		min = "0.0"
	>;
	// ["_Smoothness"]
	// uniform mediump float _Smoothness
	// <
	// 	artist = "1"
	// 	uigroup = "高光"
	// 	init = "60.0"
	// >;
	// ["SpecIntensity"]
	// uniform mediump float SpecIntensity
	// <
	// 	artist = "1"
	// 	uigroup = "高光"
	// 	init = "15.0"
	// >;
	// ["SpecThreshold"]
	// uniform mediump float SpecThreshold
	// <
	// 	artist = "1"
	// 	uigroup = "高光"
	// 	init = "7.0"
	// >;
	// ["SpecControl"]
	// uniform mediump float SpecControl
	// <
	// 	artist = "1"
	// 	uigroup = "高光"
	// 	init = "0.05"
	// >;

	["_WaveSize"]
	uniform mediump float _WaveSize
	<
		init = "2"
		artist = "1"
		uigroup = "Wind"
	>;
	["_WindFrequency"]
	uniform mediump float _WindFrequency
	<
		init = "0.25"
		artist = "1"
		uigroup = "Wind"
	>;
	["_WindParam"]
	uniform mediump float4 _WindParam
	<
		init = "(0.2,0.2,0.2,0.35)"
		artist = "1"
		uigroup = "Wind"
	>;
	["BendIntensity"]
	uniform mediump float BendIntensity
	<
		init = "0.4"
		artist = "1"
		uigroup = "Wind"
	>;
/////
	//流光特效
	["发光纹理是否用3U"]
	uniform mediump float emisstex_thirduv
	<
		uigroup = "流光特效"
		uistep = "0.001"
		artist = "1"    
		max = "1.0"
		min = "0.0"
		init = "0.0"
	>;
	["流光间隔"]
	uniform mediump float sineFreq
	<
		uigroup = "流光特效"
		init = "1.0" 
		artist = "1"
	>;
	["流光宽度"]
	uniform mediump float sineBias
	<
		uigroup = "流光特效"
		init = "0.0" 
		artist = "1"
		max = "1.0"
		min = "-1.0"
		uistep = "0.001"
	>;
	["流光速度"]
	uniform mediump float sineSpeed
	<
		uigroup = "流光特效"
		init = "1.0" 
		artist = "1"
	>;
	["流光过渡"]
	uniform mediump float sineSmoothness
	<
		uigroup = "流光特效"
		init = "1.0" 
		max = "2.0"
		min = "0.0"
		uistep = "0.001"
		artist = "1"
	>;
	["流光亮度"]
	uniform mediump float emiss_intensity
	<
		uigroup = "流光特效"
		init = "1"
		artist = "1"
	>;

	["大龙系数"]
	uniform lowp float dawn_factor:DAWN_VALUE;
	["大龙出现"]
	uniform highp float boss_start:BOSS_START;
	["大龙消失"]
	uniform highp float boss_end:BOSS_END;

	// varying
	// 漫反射贴图的uv
	varying mediump float4 v_texture0;
	// emiss uv
	varying mediump float2 v_texture1;
	// lightmap uv
	varying mediump float2 v_lightmapuv;

	//varying lowp float3 TangentWorld;
	//varying lowp float3 BinormalWorld;
	varying lowp float3 v_NormalWorld;

	varying mediump float4 v_light_proj_pos;
	varying mediump float v_fog_distance;
	varying mediump float4 PosWorld;
	varying mediump float4 fow_uv;
	varying mediump float2 hide_uv;
	varying lowp float v_cl_changed_sig;
	varying mediump float2 v_screen_uv;

	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] ShadowLightAttr : SHADOW_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] DirLightAttr : DIR_LIGHT_ATTR;
	uniform mediump float4x4 inverse_view : INV_VIEW;

	["计算线性雾"]
	function get_fog_mix in (
	highp float fog_begin, // 雾的起始位置, view空间
	highp float fog_end, // 雾的结束位置, view空间
	highp float wvp_z // 顶点在投影空间的深度
	) out (mediump float fog_linear_factor) // 计算雾效因子
	{
		out(fog_linear_factor, saturate(smoothstep(fog_begin, fog_end, wvp_z)));
	};

	["计算高度雾"]
	function get_fog_height1 in(
	highp float fog_height_begin, // 雾的起始位置，世界空间
	highp float fog_height_end, // 雾的结束位置，世界空间
	highp float view_y // 顶点在世界空间的高度
	) out (mediump float fog_height_factor) // 计算雾效因子
	{
		highp float fromEnd = fog_height_end - view_y;
		mediump float delta = fog_height_end - fog_height_begin;
		mediump float height_factor = saturate( fromEnd / delta );
		
		out(fog_height_factor, height_factor);
		// out(fog_factor, 1.0f - height_factor);
		// out(fog_factor, max(linear_fog_factor, 1.0f - height_factor));
	};
	["反射向量转UV"]
	function ToRadialCoords in(float3 coords) out (float2 panoramauv)
    {
        mediump float3 normalizedCoords = normalize(coords);
        mediump float latitude = acos(normalizedCoords.y);
        mediump float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
        mediump float2 sphereCoords = float2(longitude, latitude) * float2(0.15915494309189533576888376337251f, 0.31830988618379067153776752674503f);
        out(panoramauv,float2(0.5f,1.0f) - sphereCoords);
    };
    ["计算河道mask"]
	function get_hedao_mask in (
	highp float2 st,
	highp float pct,
	highp float Width
	) out (mediump float hedao_mask) // 计算雾效因子
	{
		out(hedao_mask,smoothstep(pct-Width, pct, st.y) - smoothstep(pct, pct+Width, st.y));
	};

	function SmoothCurve in(float4 x) out(highp float4 x_out){
		highp float4 smooth_curve = x * x * (float4(3.0f) - 2.0f * x);
		out(x_out,smooth_curve);
	};
	function TriangleWave in(float4 x) out(highp float4 x_out){
		highp float4 triangle_wave = abs(fractional(x + float4(0.5f)) * 2.0f - float4(1.0f));
		out(x_out,triangle_wave);
	};
	function SmoothTriangleWave in(float4 x) out(highp float4 x_out){
		function TriangleWave(x) out(float4 x_tri);
		function SmoothCurve(x_tri) out(float4 x_smoothcurve);
		out(x_out,x_smoothcurve);
	};
	["树木顶点动画"]
	function AnimateVertex in(float4 worldpos, float3 normal, float4 animParams, float variation,float wavesize,float windfrequency,float4 windparam,float bendintensity,float time) out(float4 animate_pos)
	{	
		// animParams.r = branch phase
		// animParams.g = edge flutter factor
		// animParams.b = primary factor
		// animParams.a = secondary factor

		//	based on original wind bending
		float fDetailAmp = 0.1f;
		float fBranchAmp = 0.3f;

		//	Phases (object, vertex, branch)
		float fObjPhase = fractional( (worldpos.x + worldpos.z) * wavesize ) + variation;
		float fBranchPhase = fObjPhase + animParams.r; //---> fObjPhase + vertex color red
		float fVtxPhase = dot(worldpos.xyz, float3(animParams.g + fBranchPhase)); // controled by vertex color green

		float timeoffset = dot(worldpos.xyz, windparam.xyz);
		//	Animate Wind
		float sinuswave = (time * 3.0f + timeoffset) * windfrequency + variation;
		float4 triwave = float4(fractional(worldpos.x * wavesize) + sinuswave, fractional(worldpos.z * wavesize) + sinuswave * 0.8f, 0.0f, 0.0f);
		function SmoothTriangleWave(triwave) out(highp float4 TriangleWaves);
		float Oscillation_ = TriangleWaves.x + (TriangleWaves.y * TriangleWaves.y);
		float Oscillation = (Oscillation_ + 3.0f) * 0.33f * windparam.w;

		//	x is used for edges; y is used for branches float2(_Time.y, _Time.z) // 0.193
		float2 vWavesIn = float2(time) + float2(timeoffset) + float2(fVtxPhase, fBranchPhase);
		//float2 vWavesIn = _TimeFrequency.y + float2(fVtxPhase, fBranchPhase);

		highp float4 vWaves = fractional(float4(vWavesIn.x,vWavesIn.x,vWavesIn.y,vWavesIn.y) * float4(1.975f, 0.793f, 0.375f, 0.193f)) * 2.0f - float4(1.0f);
		//float4 vWaves = (frac( vWavesIn.xxyy * float4(1.975, 0.793, lerp(float2(0.375, 0.193), _TimeFrequency.zw, _LeafTurbulence )) ) * 2.0 - 1.0);
		function SmoothTriangleWave(vWaves) out(highp float4 vWaves_tri);
		highp float2 vWavesSum = vWaves_tri.xz + vWaves_tri.yw;

		//	Edge (xz) controlled by vertex green and branch bending (y) controled by vertex alpha
		float3 bend_xyz = animParams.g * fDetailAmp * normal.xyz * sign(normal.xyz); // sign important to match normals of both faces!!! otherwise edge fluttering might be corrupted.
		float bend_y = animParams.a * fBranchAmp;
		float3 bend = float3(bend_xyz.x,bend_y,bend_xyz.z);

		//	Secondary bending
		highp float3 worldpos0 = worldpos.xyz + ((float3(vWavesSum.xy,vWavesSum.x) * bend * bendintensity) + (windparam.xyz * vWavesSum.y * animParams.a)) * Oscillation;

		//	Preserve Length / would need single game objects...
		//	pos.xyz = normalize(pos.xyz) * origLength;

		//	Primary bending / Displace position
		highp float3 worldpos1 = worldpos0 + animParams.b * windparam.xyz * Oscillation;

		out(animate_pos,float4(worldpos1,1.0f));
	};

	vertex
	{
		highp float4 position = a_position;

		// 世界空间坐标
		macro(EDITOR) out(mediump float4 pos_world){
			branch("1")
			{
				out(pos_world, transform(position, world));
			}
			branch("0"){
				macro(INSTANCE_TYPE) out(mediump float4 _pos_world)
				{
				    branch("INSTANCE_TYPE_PRS")
				    {
						float4x4 instWorldMat = float4x4(float4(texcoord5.x, texcoord6.x, texcoord7.x, 0.0f),
												     float4(texcoord5.y, texcoord6.y, texcoord7.y, 0.0f),
												     float4(texcoord5.z, texcoord6.z, texcoord7.z, 0.0f),
												     float4(texcoord5.w, texcoord6.w, texcoord7.w, 1.0f));
						float4 world_pos = transform(position, instWorldMat);

				    	macro(TRANS_ENABLE) out(float4 trans_world_pos){
							branch("1") {
								out(trans_world_pos, float4(world_pos.x, -world_pos.y, world_pos.z, world_pos.w));
							}
							branch("0") {
								out(trans_world_pos, world_pos);
							}
						};
						out(_pos_world, trans_world_pos);
				    }
				    
				    branch("INSTANCE_TYPE_PRS_LM")
				    {
						mediump float4x4 instWorldMat = float4x4(float4(texcoord5.x, texcoord6.x, texcoord7.x, 0.0f),
												     float4(texcoord5.y, texcoord6.y, texcoord7.y, 0.0f),
												     float4(texcoord5.z, texcoord6.z, texcoord7.z, 0.0f),
												     float4(texcoord5.w, texcoord6.w, texcoord7.w, 1.0f));
						mediump float4 world_pos = transform(position, instWorldMat);
						
				    	macro(TRANS_ENABLE) out(mediump float4 trans_world_pos){
							branch("1") {
								out(trans_world_pos, float4(world_pos.x, -world_pos.y, world_pos.z, world_pos.w));
							}
							branch("0") {
								out(trans_world_pos, world_pos);
							}
						};
						out(_pos_world, trans_world_pos);
				    }

				    branch("INSTANCE_TYPE_NONE")
				    {
				    	// 未合批的在引擎中已经转了world了
				    	out(_pos_world, transform(position, world));
				    }
				};
				out(pos_world,  _pos_world);
			}
		};
		// 顶点动画，在世界空间坐标下计算
		macro(ANIME_ENABLE) out(highp float4 anim_pos1) {
			branch ("1") {
				   macro(TRANS_ENABLE) out(lowp float trans_sign){
					branch("1") {
						out(trans_sign, -1.0f);
					}
					branch("0") {
						out(trans_sign, 1.0f);
						}
					};
			
			    highp float dt = sin(2.0f * frame_time);
				// 自然风的方向
				mediump float2 wind_dir = float2(-1.0f, -1.0f);
				// 自然风的力,与角色互动无关
				mediump float2 wind_power = float2(dt) * wind_factor * wind_dir;

				highp float2 react_dir = pos_world.xz - wind_info.xy;
				mediump float dist = length(react_dir); 
				lowp float dist_factor = saturate((max_dist_factor - dist) / max_dist_factor);// 距离角色的距离
				mediump float h = trans_sign * pos_world.y;
				mediump float2 h_offset = h * h * h * (act_factor * dist_factor * wind_info.zw + wind_power);
				mediump float y = sqrt(h * h - h_offset.x * h_offset.x - h_offset.y * h_offset.y) * sign(h);
				out(anim_pos1, float4(pos_world.x + h_offset.x, trans_sign * y, pos_world.z + h_offset.y, pos_world.w));
			}
			branch ("0"){
				out(anim_pos1, pos_world);
			}
		};
		// 草丛是否使用力场扰动
		macro(FORCE_FIELD_ENABLE) out(highp float4 anim_pos) {
			branch ("1") {
				macro(TRANS_ENABLE) out(lowp float trans_sign){
					branch("1") {
						out(trans_sign, -1.0f);
					}
					branch("0") {
						out(trans_sign, 1.0f);
					}
				};
				mediump float4x4 instWorldMat1 = float4x4(float4(texcoord5.x, texcoord6.x, texcoord7.x, 0.0f),
												     float4(texcoord5.y, texcoord6.y, texcoord7.y, 0.0f),
												     float4(texcoord5.z, texcoord6.z, texcoord7.z, 0.0f),
												     float4(texcoord5.w, texcoord6.w, texcoord7.w, 1.0f));
				mediump float4 core_pos = transform(float4(a_tangent.xyz, 1.0f), instWorldMat1);
				// 不能用scene_size,1280.0f是和force_field_radial里面的对应的  
				macro(NEOX_METAL) out(highp float2 force_uv) {
					branch("1") {
						out(force_uv, float2(core_pos.x / 1280.0f + 0.5f, -core_pos.z / 1280.0f + 0.5f));
					}
					branch("0") {
						out(force_uv, float2(core_pos.x / 1280.0f + 0.5f, core_pos.z / 1280.0f + 0.5f));
					}
				};
				highp float4 force_color = sample(ForceFieldMap, force_uv);

				lowp float2 force = float2(force_color.x - force_color.y, force_color.z - force_color.w);
				// lowp float2 force = float2(force_color.x, 0.0f);
	
				mediump float h = anim_pos1.y;
				highp float dt = sin(2.0f * frame_time);
				mediump float2 wind_dir = float2(-1.0f, -1.0f);
				mediump float2 wind_power = float2(dt) * wind_dir;

				// mediump float2 h_offset = h * h * (force * 0.003f + wind_power * 0.003f);
				mediump float2 h_offset = h * h * (force * 0.1f + wind_power * 0.003f);

				mediump float ori_length = length(anim_pos1.xyz - core_pos.xyz);
				mediump float2 pos_xz = anim_pos1.xz + h_offset.xy - core_pos.xz;
				mediump float xz_length = length(pos_xz);

				// 这句计算可理解为 x*x + y*y+z*z = ori_length * ori_length 保证的长度一致
				mediump float y = sqrt(max(ori_length * ori_length - xz_length * xz_length, 0.1f));
				mediump float max_length = min(ori_length, xz_length);
				mediump float xz_length_no_zero = max(xz_length, 0.1f);
				mediump float pos_x = pos_xz.x / xz_length_no_zero * max_length;
				mediump float pos_z = pos_xz.y / xz_length_no_zero * max_length;

				out(anim_pos, float4(pos_x + core_pos.x, trans_sign * y, pos_z + core_pos.z, anim_pos1.w));
			}
			branch ("0"){
				out(anim_pos, anim_pos1);
			}
		};

		highp float4 posworld_ = anim_pos;
		out(PosWorld,posworld_);
		float3x3 worldMat = float3x3(world);
		mediump float3 world_normal = normalize(transform(a_normal.xyz, worldMat));
		out(v_NormalWorld,world_normal);

		macro(LEVEL_HIGH) out(highp float4 mdl_pos_world)
		{
			branch("1")
			{
				macro(FX_ENABLE) out(highp float4 mdl_pos_world0){
					branch("1")
					{
						mediump float sphere_distance = length((CenterPoint.xyz - posworld_.xyz) * 0.1f);
						mediump float2 world_uv = ((float2(posworld_.x, posworld_.z) * 0.002f) + float2(1.0f)) * 0.5f;
						//出现半径
						//mediump float appear_editor = (boss_start + u_fog_info.x) * 0.000002f;
						mediump float appear_editor = boss_start;
						//mediump float appear_factor = ((-0.2f + (appear_editor - 0.0f) * (1.0f - -0.2f) / (1.0f - 0.0f)));
						mediump float appear_factor = appear_editor * 1.2f - 0.2f;
						mediump float appear_radius = Radius * appear_factor;

						lowp float pattern_mask = saturate(fractional(sin(dot(world_uv, float2(12.9898f,78.2333f))) * 43758.5453123f)) * PatternSpread;

						lowp float sphere_mask = 1.0f - ((sphere_distance - appear_radius) / RadiusAtten) - pattern_mask;
						//mediump float edge_factor = smoothstep(1.0f,0.0f,abs(sphere_mask - EdgeDistance) / EdgeWidth);
						lowp float edge_factor = saturate(1.0f - abs(sphere_mask - EdgeDistance) * 4.0f);
						//mediump float edge_mask = saturate(pow(edge_factor , EdgeSmoothness));
						lowp float edge_mask = edge_factor * edge_factor;
						function get_hedao_mask(world_uv , 1.0f - world_uv.x , HedaoWidth) out(float hedaoMask_);
						lowp float HedaoMask = smoothstep(0.0f , HedaoSmooth , saturate(hedaoMask_));
						mediump float EdgeMask = edge_mask * HedaoMask;

						highp float3 mdl_pos_world_ = anim_pos.xyz + world_normal * float3(VertexOffsetIntensity * EdgeMask) * smoothstep(0.5f,1.0f,posworld_.y);
						out(mdl_pos_world0,float4(mdl_pos_world_,1.0f));
					}
					branch("0")
					{
						out(mdl_pos_world0,float4(anim_pos.xyz,1.0f));
					}
				};
				out(mdl_pos_world,mdl_pos_world0);
			}
			branch("0")
			{
				out(mdl_pos_world,float4(anim_pos.xyz,1.0f));
			}
		};

		macro(LEVEL_MIDDLE) out(highp float4 wind_pos_world)
		{
			branch("1")
			{
				macro(WIND_ON) out(highp float4 wind_pos_world0)
				{
					branch("1")
					{
						lowp float4 bendingCoords = float4(a_color.rgb,a_color.b); 
						float variation = 1.0f;
						function AnimateVertex(mdl_pos_world, world_normal, bendingCoords, variation,_WaveSize,_WindFrequency,_WindParam,BendIntensity,frame_time) out(highp float4 wind_pos_world_);
						out(wind_pos_world0,wind_pos_world_);
					}
					branch("0")
					{
						out(wind_pos_world0,mdl_pos_world);
					}
				};
				out(wind_pos_world,wind_pos_world0);
			}
			branch("0")
			{
				out(wind_pos_world,mdl_pos_world);
			}
		};

		highp float4 final_position = transform(wind_pos_world, viewProj);
		
macro(LIGHT_MAP_ENABLE)
		{
			branch("1") {
				macro(EDITOR) out(mediump float4 tmp_texture_1)
				{
					branch("1"){
						out(tmp_texture_1, transform(float4(a_texture1.xy, 1.0f, 0.0f), lightmapTrans));
					}
					branch("0"){
						macro(INSTANCE_TYPE) out(mediump float4 _tmp_texture_1)
						{
						    branch("INSTANCE_TYPE_PRS_LM")
						    {
								float4x4 instLightmapTrans = float4x4(float4(texcoord4.x, 0.0f, 0.0f, 0.0f),
																      float4(0.0f, texcoord4.y, 0.0f, 0.0f),
																      float4(texcoord4.z, texcoord4.w, 1.0f, 0.0f),
																      float4(0.0f, 0.0f, 0.0f, 1.0f));
								out(_tmp_texture_1, transform(float4(a_texture1.xy, 1.0f, 0.0f), instLightmapTrans));
						    }
						   
						    branch("INSTANCE_TYPE_NONE")
						    {
								out(_tmp_texture_1, transform(float4(a_texture1.xy, 1.0f, 0.0f), lightmapTrans));
						    }
						    branch("INSTANCE_TYPE_PRS")
						    {
								out(_tmp_texture_1, transform(float4(a_texture1.xy, 1.0f, 0.0f), lightmapTrans));
						    }
						};
						out(tmp_texture_1, _tmp_texture_1);
					}
				};
				out(v_lightmapuv, tmp_texture_1.xy);
			}
			branch("0") {
			}
		};

		macro(LEVEL_HIGH)
		{
			branch("1")
			{
				macro(USE_FLOWEMISS_VFX) out (mediump float2 emisstex_uv0)
				{
					branch("1")
					{
						mediump float2 emiss_uv = lerp(a_texture0.xy,a_texture2.xy,float2(emisstex_thirduv));
						out(v_texture1,emiss_uv);
					}
					branch("0")
					{
					}
				};
			}
			branch("0")
			{
			}
		};

		macro(TRANS_ENABLE) out(mediump float height) {
			branch ("1") {
				out(height, -pos_world.y);
			}
			branch ("0") {
				out(height, pos_world.y);
			}
		};
		// mediump float height = pos_world.y;
		function get_fog_height1(u_fog_info.z, u_fog_info.w, height) out(mediump float fog_height_factor1);

		macro(SYSTEM_DEPTH_RANGE_NEGATIVE) out(mediump float fog_distance1)
			{
				branch("1")
				{
					["GL渲染系统下"]
					// out(fog_distance1, final_position.z * 2.0f - 1.0f);
					out(fog_distance1, final_position.w * ((final_position.z/final_position.w) *0.5f + 0.5f));
				}
				branch("0")
				{
					["Dx和Metal渲染系统下"]
					out(fog_distance1, final_position.z);
				}
			};

		out(v_texture0, float4(a_texture0.xy, fog_distance1, 1.0f - fog_height_factor1));

		vertex(final_position+float4(0.0f, 0.0f, 0.001f, 0.00f));
		
		// 在vertex中计算高度雾
		// macro(FOW_ENABLE) {
		// 	branch ("1") {
		// 		mediump float2 _fow_uv = float2(anim_pos.x / scene_size.x + 0.5f, anim_pos.z / scene_size.y + 0.5f);
		// 		mediump float height_factor = 1.0f - saturate(anim_pos.y / 135.0f);

		// 		macro(TRANS_ENABLE) out(lowp float trans_factor) {
		// 		    branch ("1") {
		// 				out(trans_factor, -1.0f);
		// 		    }
		// 		    branch ("0") {
		// 				out(trans_factor, 1.0f);
		// 		    }
		// 		};
		// 		lowp float fog_linear_factor = 0.0f;				
		// 		out(fow_uv, float4(_fow_uv, height_factor, fog_linear_factor)); // z存模型世界空间高度

		// 	}
		// 	branch ("0") {
		// 	}
		// };
		mediump float2 _hide_uv = float2(anim_pos.x / scene_size.x + 0.5f, anim_pos.z / scene_size.y + 0.5f);
		out(hide_uv, _hide_uv);	

		out(v_screen_uv, (pos_world.xz + pos_world.yy) * fog_detail_tilling + fog_detail_speed * frame_time);

		macro(TWOGROUP_ENABLE) out(lowp float v_cl_changed_sig1) {
			branch ("1") {
				lowp float signal = saturate((pos_world.x + pos_world.z+90.0f)/180.0f);
				out(v_cl_changed_sig1, signal);
			}
			branch ("0") {
				out(v_cl_changed_sig1, 0.0f);
			}
		};
		out(v_cl_changed_sig, v_cl_changed_sig1);
	}

	pixel
	{	
		mediump float2 UV0 = v_texture0.xy;
		mediump float fog_distance = v_texture0.z;
		mediump float fog_height_factor = v_texture0.w;
		lowp float3 view_dir = normalize(cam_pos.xyz - PosWorld.xyz);
		mediump float3 NormalWorld = normalize(v_NormalWorld);

		macro(LIGHT_MAP_ENABLE) out(mediump float3 lightmap_color, lowp float shadow)
		{
		    branch("1") {
				// lightmap已经是线性的了
				lowp float4 _lightmap_color = sample(TexLightmap, v_lightmapuv.xy);
				// 不再对lightmap染色
				// lowp float3 light_map_color_gamma = _lightmap_color.xyz * lerp(u_fog_color.rgb, ambient_color.rgb, float3(_lightmap_color.w)) * LightMapScale.yzw;
				lowp float3 light_map_color_gamma = _lightmap_color.xyz * LightMapScale.yzw;
				out(lightmap_color, light_map_color_gamma.xyz);
				out(shadow, 0.5f);
				// out(shadow, _lightmap_color.w);

		    }
		    branch("0") {
				out(lightmap_color, float3(1.0f));
				out(shadow, 0.5f);
				// out(shadow, 0.5f);
		    }
		};

		// mediump float3 lightmap_color = float3(1.0f);
		// lowp float shadow = 0.5f;
		lowp float4 diffuse_tex_ = sample(Tex0, UV0);

		macro(DIFFUSE_ALPHA_SEPARATE) out(lowp float4 diffuse_tex)
		{
			branch("1")
			{
				lowp float4 separateColor = sample(sepAlphaTex, UV0);
				out(diffuse_tex, float4(diffuse_tex_.xyz, separateColor.w));
			}
			branch("0") {
				out(diffuse_tex, float4(diffuse_tex_.xyz, diffuse_tex_.w));
			}
		};

		macro(ALPHA_TEST_ENABLE)
		{
		  	branch("1") {
				alphatest("<")(diffuse_tex.a - alphaRef, 0.0f);
		  	}
			branch("0") {
		 	}
		};

		// 区域分色
		lowp float area_factor = v_cl_changed_sig;

		macro(CHANGE_COLOR_ENABLE) out(lowp float3 diffuse_changed_color) {
			branch ("1") {
				macro(CHANGE_RED) out(lowp float3 changed_red) {
					branch ("1") {
						lowp float _mix_result_red = saturate((diffuse_tex.r * 2.0f - diffuse_tex.g - diffuse_tex.b + adjust_area1) * adjust_multi1);
						out(changed_red, lerp(diffuse_tex.rgb ,(diffuse_tex.r + diffuse_tex.g + diffuse_tex.b) * changed_color1.rgb, float3(_mix_result_red)));
					}
					branch("0"){
						out(changed_red, diffuse_tex.rgb);
					}
				};
				macro(CHANGE_GREEN) out(lowp float3 changed_green) {
					branch ("1") {
						lowp float _mix_result_green = saturate((diffuse_tex.g * 2.0f - diffuse_tex.g - diffuse_tex.r + adjust_area2) * adjust_multi2);
						out(changed_green, lerp(changed_red ,(diffuse_tex.r + diffuse_tex.g + diffuse_tex.b) * changed_color2.rgb, float3(_mix_result_green)));
					}
					branch("0"){
						out(changed_green, changed_red);
					}
				};
				macro(CHANGE_BLUE) out(lowp float3 changed_blue) {
					branch ("1") {
						lowp float _mix_result_blue = saturate((diffuse_tex.b * 2.0f - diffuse_tex.r - diffuse_tex.b + adjust_area3)) * adjust_multi3;
						out(changed_blue, lerp(changed_green ,(diffuse_tex.r + diffuse_tex.g + diffuse_tex.b) * changed_color3.rgb, float3(_mix_result_blue)));
					}
					branch("0"){
						out(changed_blue, changed_green);
					}
				};
				out(diffuse_changed_color, lerp(diffuse_tex.rgb, changed_blue, float3(area_factor)));
			}
			branch("0"){
				out(diffuse_changed_color, diffuse_tex.rgb);
			}
		};

		["添加动态高光"]
		macro(HIGHTLIGHT_ON) out(lowp float3 spec_color)
		{
			branch("1")
			{
				macro(LEVEL_MIDDLE) out(lowp float3 spec_color0)
				{
					branch("1")
					{
						// mediump float pos_x = (u_fog_color.x * 2.0f - 1.0f);
						// mediump float pos_y = (u_fog_color.y * 2.0f - 1.0f);
						// mediump float pos_z = (u_fog_color.z * 2.0f - 1.0f);
						mediump float pos_x = 0.019f;
						mediump float pos_y = 0.082f;
						mediump float pos_z = 0.043f;

						mediump float3x3 inverse_view_mat = float3x3(inverse_view);
						// mediump float3 ambient_dir = normalize(float3(l_pos_x, l_pos_y, l_pos_z) * inverse_view_mat);
						mediump float3 ambient_dir = normalize(float3(pos_x, pos_y, pos_z) * inverse_view_mat);

						lowp float _Smoothness = 60.0f;
						lowp float SpecIntensity = 13.0f;
						lowp float SpecThreshold = 7.0f;
						lowp float SpecControl = 0.045f;

						lowp float3 H = normalize(view_dir + ambient_dir.xyz);
						mediump float NdotH = saturate(dot(NormalWorld, H));

						lowp float diff_lumin = dot(diffuse_changed_color.rgb,float3(0.3f, 0.59f, 0.11f)); 
						lowp float spec_mask = min(SpecControl,saturate(pow(diff_lumin,SpecThreshold)));

						lowp float3 spec_color_ = float3(pow(NdotH,_Smoothness) * SpecIntensity) * spec_mask * u_fog_color.a;
						out(spec_color0,spec_color_);
					}
					branch("0")
					{
						out(spec_color0,float3(0.0f));
					}
				};
				out(spec_color,spec_color0);
			}
			branch("0")
			{
				out(spec_color,float3(0.0f));
			}
		};
		

		["线性空间"]
		mediump float3 color_diffuse_lightmap_ = diffuse_changed_color.rgb * lightmap_color.xyz;
		mediump float3 color_diffuse_lightmap = color_diffuse_lightmap_ + color_diffuse_lightmap_ * spec_color;
		
		macro(LEVEL_HIGH) out(lowp float3 lerp_color)
		{
			branch("1")
			{
				macro(FX_ENABLE) out(lowp float3 lerp_color0)
				{
					branch("1")
					{
						mediump float sphere_distance = length((CenterPoint.xyz - PosWorld.xyz) * 0.1f);
						mediump float2 world_uv = ((float2(PosWorld.x, PosWorld.z) * 0.002f) + float2(1.0f)) * 0.5f;
						//出现半径
						//mediump float appear_editor = (boss_start + u_fog_info.x) * 0.000002f;
						mediump float appear_editor = boss_start;
						//mediump float appear_factor = ((-0.2f + (appear_editor - 0.0f) * (1.0f - -0.2f) / (1.0f - 0.0f)));
						mediump float appear_factor = appear_editor * 1.2f - 0.2f;
						mediump float appear_radius = Radius * appear_factor;

						mediump float3 vertex_normal_world = normalize(NormalWorld);
						lowp float4 norm = sample(NormalMap, world_uv * NormalTilling);
						lowp float2 normOff = (norm.xy * 2.0f - float2(1.0f)) * 5.0f;
						
						//lowp float3 noiseNormal_world = normalize(TangentWorld * normOff.x + BinormalWorld * normOff.y + vertex_normal_world);
						lowp float3 Normal_world = normalize(float3(1.0f,0.0f,0.0f) * normOff.x + float3(0.0f,0.0f,1.0f) * normOff.y + vertex_normal_world);

						//mediump float3 reflect_dir = normalize(Normal_world + view_dir + float3(1.0f));
						//mediump float3 reflect_dir = reflect(-view_dir,Normal_world);

						//function ToRadialCoords(reflect_dir) out(mediump float2 reflect_uv);
						mediump float3 reflect_dir = (Normal_world + view_dir + float3(1.0f)) * 0.5f;
						mediump float2 reflect_uv = reflect_dir.rg;
						lowp float4 reflect_color = sample(ReflectMap,reflect_uv * ReflectTilling);
						//lowp float pattern_mask = sample(NormalMap,world_uv * PatternTilling).g * PatternSpread;
						lowp float pattern_mask = norm.g * PatternSpread;
						lowp float sphere_mask = 1.0f - ((sphere_distance - appear_radius) / RadiusAtten) - pattern_mask;
						//mediump float edge_factor = smoothstep(1.0f,0.0f,abs(sphere_mask - EdgeDistance) / EdgeWidth);
						//lowp float edge_factor = smoothstep(1.0f,0.0f,abs(sphere_mask - EdgeDistance) * 4.0f);
						lowp float edge_factor = saturate(1.0f - abs(sphere_mask - EdgeDistance) * 4.0f);
						//mediump float edge_mask = saturate(pow(edge_factor , EdgeSmoothness));
						lowp float edge_mask = edge_factor * edge_factor;
						function get_hedao_mask(world_uv , 1.0f - world_uv.x , HedaoWidth) out(lowp float hedaoMask_);
						lowp float HedaoMask = smoothstep(0.0f , HedaoSmooth , saturate(hedaoMask_));
						lowp float EdgeMask = edge_mask * HedaoMask;
						lowp float sphere_mask_clamp = saturate(sphere_mask);
						lowp float smoothstepResult25_g1 = smoothstep(0.9f , 1.0f , sphere_mask_clamp);
						//lowp float opacity_mask = saturate(pow((sphere_mask_clamp * ( 1.0f - smoothstepResult25_g1)), RadiusPower)) * RadiusIntensity;
						lowp float opacity_mask = sphere_mask_clamp * (1.0f - smoothstepResult25_g1);
						lowp float OpacityMask = opacity_mask * HedaoMask;

						lowp float3 lerp_color_ = lerp(color_diffuse_lightmap,reflect_color.rgb,float3(saturate(EdgeMask + OpacityMask) * HedaoMask));
						lowp float3 lerp_color_1 = lerp_color_ + reflect_color.rgb * EdgeColor.rgb * EdgeMask * EdgeIntensity;
						//lowp float3 lerp_color_debug = lerp(lerp_color_1,float3(saturate(EdgeMask + OpacityMask) * HedaoMask),float3(Debug));
						out(lerp_color0,lerp_color_1);
					}
					branch("0")
					{
						out(lerp_color0,color_diffuse_lightmap);
					}		
				};
				out(lerp_color,lerp_color0);
			}
			branch("0")
			{
				out(lerp_color,color_diffuse_lightmap);
			}
		};

		// macro(FOW_ENABLE) out(mediump float3 final_result) {
		// 	branch ("1") {
		// 		// 计算雾效混合区域
		// 		// 参数
		// 		lowp float fow_sample = sample(view_texture, fow_uv.xy).x;
		// 		lowp float fow = oneminus(fow_sample);
		// 		lowp float fow1 = saturate((fow + 0.5f)*(fow + 0.5f)- 0.5f);
		// 		//lowp float fow = smoothstep(0.231f, 0.769f, fow1);
		// 		lowp float fow_thick = fow1 * fow_color.a;
		// 		lowp float3 combine_height_fog = lerp(lerp_color.rgb, float3(0.0f, 0.168f, 0.298f), float3(lerp(0.65f, 1.0f, shadow))); // 50~100作为参数不错
		// 		// 计算深度雾效混合
		// 		//lowp float3 combine_linear_fog = lerp(combine_height_fog, gradient_color.rgb, float3(fow_uv.w));

		// 		out(final_result, lerp(lerp_color, combine_height_fog * float3(0.8856f,0.9117f, 1.0f),  float3(fow_thick)));
		// 	}
		// 	branch("0")
		// 	{
		// 		out(final_result, lerp_color);
		// 	}
		// };
		mediump float3 final_result = lerp_color;

		["黄昏染色"]
		lowp float emissive_mask = oneminus(saturate(diffuse_tex_.g + 0.8f))/0.2f;
		lowp float emissive_multi = 0.8f + 0.2f * sin(3.0f * frame_time);
		lowp float3 changed_diffuse = lerp(final_result.rgb * lerp(1.0f,0.863f,dawn_factor), float3(1.0f, 0.0f, 0.0f), float3(emissive_mask * emissive_multi * dawn_factor));

		mediump float2 screen_uv = v_screen_uv;

		macro(LEVEL_HIGH) out(lowp float3 dawn_combined)
		{
			branch("1")
			{
				macro(FOG_EFFECT) out(float3 dawn_combined0)
				{
					branch("0")
					{
						out(dawn_combined0,changed_diffuse);
					}
					branch("1")
					{
						mediump float4 cloud = sample(FogDetailTex, screen_uv);
						mediump float fog_start = 200.0f + fog_fix + dawn_factor * 20.0f;
						mediump float fog_end = 310.0f + fog_fix + dawn_factor * 10.0f;
						function get_fog_mix(fog_start, fog_end, fog_distance) out(mediump float fog_linear_factor);

						// 对fol进行模拟
						lowp float4 fol_color_nod = lerp(float4(0.839f, 0.4686f, 0.3193f, 0.0f),float4(0.714f, 0.719f, 0.707f, 1.0f), float4(fog_linear_factor));
						highp float fog_uniform = 0.000002f;
						mediump float3 dawn_combined_nod = lerp(lerp(changed_diffuse.rgb, u_fog_color.rgb, float3(fog_height_factor * u_fog_info.y * fog_uniform)), fol_color_nod.rgb, 0.75f * float3(saturate(fol_color_nod.a + cloud.r * fol_color_nod.a ) * u_fog_color.a));
						lowp float4 fol_color_d = lerp(float4(0.839f, 0.4686f, 0.3193f, 0.0f),float4(0.714f, 0.719f, 0.707f, 1.0f), float4(fog_linear_factor)) * float4(0.8856f, 0.9117f, 1.0f,1.0f);
						// 对foh进行模拟
						mediump float3 dawn_combined_d = lerp(lerp(changed_diffuse.rgb, float3(0.217f,0.4058f, 0.4558f), 0.8f * float3(sqrt(fog_height_factor))), fol_color_d.rgb, 0.75f * float3(saturate(fol_color_d.a + cloud.r * fol_color_d.a ) * u_fog_color.a));

						mediump float3 dawn_combined_ = lerp(dawn_combined_nod, dawn_combined_d, float3(dawn_factor));
						out(dawn_combined0,dawn_combined_);
					}
				};
				out(dawn_combined,dawn_combined0);
			}
			branch("0")
			{
				out(dawn_combined,changed_diffuse);
			}
		};

		mediump float3 changetone1 = lerp(float3(1.0f) ,float3(0.545f, 0.632f, 1.0f),float3(area_factor));
		mediump float3 changetone = lerp(changetone1, float3(0.804f, 0.6039f, 0.6039f), float3(dawn_factor));
		mediump float illum = dot(dawn_combined * changetone1, float3(0.3f, 0.59f, 0.11f));
		mediump float illum_fix1 = 1.0f;
		mediump float illum_fix2 = lerp(1.095f, 0.894f,illum);
		mediump float illum_fix = lerp(lerp(illum_fix1, illum_fix2,area_factor),1.0f,dawn_factor);

		lowp float3 color_export = dawn_combined * changetone * illum_fix;

		macro(LEVEL_HIGH) out(lowp float3 flowemiss_color)
		{
			branch("1")
			{
				macro(USE_FLOWEMISS_VFX) out (lowp float3 flowemiss_color0)
				{
					branch("1")
					{
						lowp float flowmask_ = saturate(sin(frame_time * sineSpeed  + v_texture1.y * 6.28318f * sineFreq) + sineBias);
						lowp float flowmask = smoothstep(0.0f,sineSmoothness,flowmask_);
						// lowp float4 emisstex_color = sample(EmissTex,v_texture1 * emiss_tex_param.xy + float2(frame_time) * emiss_tex_param.zw);
						lowp float4 emisscolormap_color = sample(EmissTex,v_texture1);
						lowp float3 emiss_color_ = color_export + float3( emiss_intensity * flowmask);
						out(flowemiss_color0,emiss_color_);
					}
					branch("0")
					{
						out(flowemiss_color0,color_export);
					}
				};
				out(flowemiss_color,flowemiss_color0);
			}
			branch("0")
			{
				out(flowemiss_color,color_export);
			}
		};
		lowp float4 hide_color = sample(HideMaskMap, hide_uv.xy);
		alphatest("<")(0.5f, hide_color.a);
		pixel(float4(flowemiss_color * scene_illum, diffuse_tex.a));
	}
}
