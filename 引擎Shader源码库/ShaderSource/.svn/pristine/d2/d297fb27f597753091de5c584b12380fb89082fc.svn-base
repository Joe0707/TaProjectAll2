["旧电影效果的后处理"]
pipeline
<
	author = "liuzhibin"
	company = "netease"
	category = "postprocess"
>
{
	attribute float4 a_position: POSITION;
	attribute float4 a_texture0: TEXTURE0;
	
	["原图的uv"]
	varying mediump float2 v_texture0: TEXTURE0;
	["噪声图的uv"]
	varying mediump float2 v_texture1: TEXTURE1;
	
	["深度纹理的宽和高， 光照纹理的宽和高"]
	uniform float4 geometry_map_size : GI_BUFFER_SIZE
	<
		init = "2.0, 2.0, 2.0, 2.0"
	>;
	
	["播放速度"]
	uniform float time_frac:OTHER0
	<
		artist="1"
		min = "0.0"
		max = "15.0"
		init = "4.0"
	>;
	
	["尺度缩放"]
	uniform float noise_scale:OTHER1
	<
		artist="1"
		min= "0.0"
		max= "4.0"
		init = "1.0"
	>;
	
	["刮痕强度"]
	uniform float noise_intensity_r: OTHER2
	<
		artist="1"
		min = "0.0"
		max = "1.0"
		init = "0.5"
	>;

	["折痕强度"]
	uniform float noise_intensity_g: OTHER3
	<
		artist="1"
		min = "0.0"
		max = "1.0"
		init = "0.3"
	>;
	["噪声强度"]
	uniform float noise_intensity_b:OTHER4
	<
		artist="1"
		min = "0.0"
		max = "1.0"
		init = "0.3"
	>;

	["原图过渡"]
	uniform float lerp_val: OTHER5
	<
		artist="1"
		min = "0.0"
		max = "1.0"
		init = "0.0"
	>;

	uniform float u_frame_time: FRAME_TIME;
	
	// 用于过渡的映射图
	["噪声贴图"]
	uniform sampler texture_background: OTHER0
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "common\\textures\\scratch.png"
	>;
	
	["原来图"]
	uniform sampler sam_diffuse: DIFFUSE
	<
		export = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		addressu = "CLAMP"
		addressv = "CLAMP"
		addressw = "CLAMP"
	>;
	
	vertex
	{
		vertex(float4(a_position.xyz, 1.0f));
		["是否存在半像素问题"]
		macro(NEOX_METAL) out (float2 offset)
		{
			branch("1")
			{
				["半像素偏移"]
				out(offset, float2( 0.5f / (geometry_map_size.x), 0.5f / (geometry_map_size.y)));
			}
			branch("0")
			{
				out(offset, float2(0.0f, 0.0f));
			}
		};
		["原图的uv"]
		out(v_texture0, a_texture0.xy + offset);
		float time_intenger = floor(u_frame_time * time_frac);
		float2 noise_bias = transform(float2(1.37f, 1.79f), time_intenger);
		["噪声的uv"]
		out(v_texture1, transform(a_texture0.xy, noise_scale) + noise_bias);
	}
	
	pixel
	{
		lowp float4 org_clr = sample(sam_diffuse, v_texture0);
		["染色"]
		float illum = dot(org_clr, float4(0.299f, 0.587f, 0.114f, 0.0f));
		["噪声颜色"]
		float4 noise_clr = sample(texture_background, v_texture1);
		
		["混合"]
    float blend_value = dot(noise_clr, float4(noise_intensity_r,noise_intensity_g,noise_intensity_b, 0.0f));
		float4 blend_clr = float4(blend_value, blend_value, blend_value, 1.0f) + float4(illum, illum, illum / 2.0f, 1.0f);
		pixel(lerp(blend_clr, org_clr, float4(lerp_val)));
		//pixel(blend_clr);
	}
}
