["VBR shader for DM106"]
pipeline
<
	version = "1.1.2" 
	author = "liuyu/xuzhuoliang" 
	category = "common" 
	company = "netease"
	merge = "1"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\pbr_include_function.spzs)
	["是否启用场景转置"]
	eitheror TRANS_ENABLE;
	macro(TRANS_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["检查AO"]
	eitheror AO_CHECK;
	macro(AO_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查diffuse"]
	eitheror DIFFUSE_CHECK;
	macro(DIFFUSE_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查金属度"]
	eitheror METAL_CHECK;
	macro(METAL_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查粗糙度"]
	eitheror ROUGHNESS_CHECK;
	macro(ROUGHNESS_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["开启环境反射(ENVIR_ENABLE)"]
	eitheror ENVIR_ENABLE;

	["开启法线贴图(XNORMAL_MAP_ENABLE)"]
	eitheror XNORMAL_MAP_ENABLE;
	
	["补光"]
	eitheror DIR_AMBIENT_ENABLE;

	["开启自发光"]
	eitheror SELF_BLING;

	["接受点光"]
	eitheror POINT_LIGHT_ENABLE;

	["是否开启Oren-nayar因子"]
	eitheror ORENNAYAR_ENABLE;
	macro(ORENNAYAR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	["使用溶解效果"]
	eitheror DISSOLVE_ENABLE;
	macro(DISSOLVE_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["使用柔边溶解"]
	eitheror SOFTEDGE_ENABLE;
	macro(SOFTEDGE_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SHADOW_MAP_ENABLE)
	<
		default = "1"
	>;
	
	macro(POINT_SHADOW_MAP_ENABLE)
	<
		default = "0"
	>;
	
	macro(XNORMAL_MAP_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(ENVIR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(DIR_AMBIENT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SELF_BLING)
	<
		default = "0"
		customizable = "1"
	>;

	macro(POINT_LIGHT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["开启网格闪烁消融"]
	eitheror WEB_SHINING_ENABLE;
	macro(WEB_SHINING_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;
	
	// 贴图
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["金属度/sss/光滑度"]
	uniform sampler SamplerRough
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["法线贴图"]
	uniform sampler SamplerNormalMap
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	// ["溶解贴图"]
	// uniform sampler u_tex_dissolve : OTHER_ALPHA_TEXTURE
	// <
	// 	artist = "1"
	// 	min = "linear"
	// 	mag = "linear"
	// 	path = "fx\\texture\\effect\\dissolve.png"
	// >;

	["阴影贴图"]
	uniform highp samplershadow SMAP : SHADOW
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressu = "clamp" 
		addressv = "clamp" 
	>;
	
	// —————————————————— PBR调整 ——————————————————
	["手动金属度"]
	uniform lowp float manul_metal
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	
	["手动光滑度"]
	uniform lowp float manul_rough
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	["金属度缩放"]
	uniform lowp float metal_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	["粗糙度缩放"]
	uniform lowp float rough_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	
	// ["非金属最低灰阶(min_metal_gray)"]
	// uniform mediump float min_metal_gray
	// <
	// 	uigroup = "1 PBR"
	// 	min = "0.0" 
	// 	max = "10.0" 
	// 	init = "0.003"
	// >;

	// // ——————————————————变色—————————————————————————
	// ["第一层颜色A"]
	// uniform lowp float4 changecolor1
	// <
	// 	artist = "1"
	// 	init = "(1.0,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第一层颜色B"]
	// uniform lowp float4 changecolor2
	// <
	// 	artist = "1"
	// 	init = "(0.5,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第二层颜色A"]
	// uniform lowp float4 changecolor3
	// <
	// 	artist = "1"
	// 	init = "(1.0,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第二层颜色B"]
	// uniform lowp float4 changecolor4
	// <
	// 	artist = "1"
	// 	init = "(0.5,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第三层颜色A"]
	// uniform lowp float4 changecolor5
	// <
	// 	artist = "1"
	// 	init = "(1.0,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第三层颜色B"]
	// uniform lowp float4 changecolor6
	// <
	// 	artist = "1"
	// 	init = "(0.5,1.0,1.0,1.0)"
	// 	color = "1"
	// 	uigroup = "变色"
	// >;

	// ["第一层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	// uniform lowp float4 change_adj1
	// <
	// 	artist = "1"
	// 	init = "(0,0,0,0)"
	// 	max = "1.0"
	// 	min = "-1.0"
	// 	uigroup = "变色"
	// >;

	// ["第二层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	// uniform lowp float4 change_adj2
	// <
	// 	artist = "1"
	// 	init = "(0,0,0,0)"
	// 	max = "1.0"
	// 	min = "-1.0"
	// 	uigroup = "变色"
	// >;

	// ["第三层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	// uniform lowp float4 change_adj3
	// <
	// 	artist = "1"
	// 	init = "(0,0,0,0)"
	// 	max = "1.0"
	// 	min = "-1.0"
	// 	uigroup = "变色"
	// >;	


	["曝光度"]
	uniform mediump float expose_bias
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "1.0"
		uigroup = "1 环境光"
	>;

	["天光颜色"]
	uniform lowp float4 sky_light_color
	<
		uigroup = "1 环境光"
		artist = "0" 
		color = "1"
		init = "(0.5569,0.7412,1,1)"
	>;

	["天光强度"]
	uniform float sky_light_intensity
	<
		uigroup = "1 环境光"
		artist = "0" 
		init = "1.0"
	>;
	
	// ——————————————————各向异性——————————————————
	
	// ["抖动偏移值(Anisotropic_offset)"]
	// uniform lowp float noise_offset
	// <
	// 	uigroup = "各向异性"
	// 	artist = "1" 
	// 	uistep = "0.001"
	// 	min = "0.0" 
	// 	max = "1.0" 
	// 	init = "0.2"
	// >;

	// ["整体偏移值(Anisotropic_offset)"]
	// uniform mediump float normal_offset
	// <
	// 	uigroup = "各向异性"
	// 	artist = "1" 
	// 	uistep = "0.001"
	// 	min = "-5" 
	// 	max = "5" 
	// 	init = "-0.2"
	// >;
	
	// ——————————————————自发光——————————————————
	
	["自发光强度"]
	uniform mediump float emissive_intensity
	<
		uigroup = "风格化"
		artist = "1" 
		uistep = "0.001"
		min = "1.0" 
		max = "10.0" 
		init = "1.0"
	>;
	// ——————————————————DIFFUSE——————————————————

	["漫反射强度"]
	uniform mediump float diffuse_intensity
	<
		init = "1.0"
		max = "5.0"
		min = "0.0"
		uistep = "0.001"
		artist = "0"
		uigroup = "0 漫反射"
	>;

	// ["角色高度"]
	// uniform mediump float char_height
	// <
	// 	artist = "1"
	// 	init = "20"
	// 	min = "0"
	// 	uigroup = "风格化"
	// >;

	["暗部颜色"]
	uniform lowp float4 dark_color
	<
		uigroup = "风格化"
		artist = "1" 
		color = "1"
		init = "(0.15,0.15,0.15,0.15)"
	>;	

	// ——————————————————自投影——————————————————
	["阴影bias"]
	uniform mediump float shadowmap_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	["阴影采样bias"]
	uniform mediump float shadowmap_uv_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	//————————————————补光——————————————————

	["补光强度"]
	uniform mediump float dir_ambient_intensity
	<
		init = "0.9"
		max = "10.0"
		min = "0.0"
		uistep = "1"
		artist = "1"
		uigroup = "补光"
	>;	

	["补光颜色"]
	uniform lowp float4 dir_ambient
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "补光"
	>;	
	
	["补光位置x"]
	uniform mediump float l_pos_x
	<
		init = "-65"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置y"]
	uniform mediump float l_pos_y
	<
		init = "14"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置z"]
	uniform mediump float l_pos_z
	<
		init = "100"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;

	["自发光bloom强度"]
	uniform mediump float emissive_bloom
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom强度"]
	uniform mediump float illum_multi
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1"
		max = "10.0"
		min = "0.0"
		artist = "1"
	>;
	["bloom阈值"]
	uniform lowp float bloom_threshold
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1.0"
		max = "5.0"
		min = "-1.0"
		artist = "1"
	>;
	["bloom范围"]
	uniform lowp float bloom_range
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;


	// —————————————————— FRESNEL ——————————————————


	["覆盖范围"]
	uniform lowp float rim_power
	<
		uigroup = "3 rim"
		init = "0"
		uistep = "0.001"
		artist = "1"
		max = "1.0"
		min = "-1.0"
	>;

	["内部透明度"]
	uniform lowp float inner_alpha
	<
		uigroup = "3 rim"
		uistep = "0.001"
		init = "1"
		max = "1.0"
		min = "-0.5"
		artist = "1"
	>;

	["ChangeAmount"]
	uniform lowp float ChangeAmount
	<
		uigroup = "3 rim"
		uistep = "0.001"
		init = "0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;
	// —————————————————— SSS ——————————————————
	["SSS强度"]
	uniform mediump float sss_factor
	<
		init = "1.0"
		artist = "1"
		uistep = "1"
		max = "1"
		min = "0"
		uigroup = "sss"
	>;	

	["SSS中阴影强度"]
	uniform mediump float sss_shadow_factor
	<
		init = "0.5"
		artist = "1"
		uistep = "1"
		max = "1"
		min = "0"
		uigroup = "sss"
	>;

	["特效贴图"]
	uniform sampler sfx_mask_map
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["CloudNoise贴图"]
	uniform sampler _CloudNoiseMap
	<
		uigroup = "CloudNoise"
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;
	["Noise1 相位"]
	uniform mediump float _Noise1_Amp
	<
		uigroup = "CloudNoise"
		uistep = "0.001"
		init = "2.8"
		max = "5.0"
		min = "-5.0"
		artist = "1"
	>;
	["_Noise1_Control"]
	uniform mediump float4 _Noise1_Control
	<
		uigroup = "CloudNoise"
		init = "(5.0,3.0,0.02,-0.15)"
		artist = "1"
	>;
	["Noise2 相位"]
	uniform mediump float _Noise2_Amp
	<
		uigroup = "CloudNoise"
		uistep = "0.001"
		init = "-2.0"
		max = "5.0"
		min = "-5.0"
		artist = "1"
	>;
	["_Noise2_Control"]
	uniform mediump float4 _Noise2_Control
	<
		uigroup = "CloudNoise"
		init = "(3.5,3.0,0.045,-0.05)"
		artist = "1"
	>;
	["_HotDistort"]
	uniform mediump float _HotDistort
	<
		uistep = "0.001"
		init = "1.0"
		max = "1.0"
		min = "0.0"
		artist = "1"
		uistep = "0.001"
	>;
	["火焰变身"]
	uniform mediump float FireOverlap
	<
		uistep = "0.001"
		uigroup = "dissolve"
		init = "1.0"
		max = "1.0"
		min = "0.0"
		artist = "1"
		uistep = "0.001"
	>;

	["Sphere Center"]
	uniform float4 SphereCenter
	<
		uigroup = "dissolve"
		init = "0.0, 15.0, 15.0,0.0"
		artist = "1"
	>;
	["Radius"]
	uniform float Radius
	<
		artist = "1"
		uigroup = "dissolve"
		init = "30.0"
	>;
	["PatternSpread"]
	uniform float PatternSpread
	<
		artist = "1"
		uigroup = "dissolve"
		init = "-5"
		uistep = "0.001"  
		max = "5"
		min = "-5"
	>;

	["_Rim_Control"]
	uniform mediump float3 _Rim_Control
	<
		init = "(0.5,0.8,2.0)"
		artist = "1"
	>;
	["_TransclucentControl"]
	uniform mediump float4 _TransclucentControl
	<
		artist = "1"
		init = "(1.0,0.5,1.0,2.0)"
	>;
	["_Ramp贴图"]
	uniform sampler _Ramp
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
	>;
	["_RangeOffset"]
	uniform mediump float _RangeOffset
	<
		artist = "1"
		init = "0.26"
		max = "1.0"
		min = "-1.0"
		uistep = "0.001"
	>;
	["Add_Rim_Control"]
	uniform mediump float3 _Add_Rim_Control
	<
		init = "(0.1,0.65,1.0)"
		artist = "1"
	>;
	["_EmissTillingSpeed"]
	uniform mediump float4 _EmissTillingSpeed
	<
		init = "(5.0,3.0,0.0,-0.5)"
		artist = "1"
	>;
	// ["_EmissTilling"]
	// uniform mediump float2 _EmissTilling
	// <
	// 	init = "(5.0,3.0)"
	// 	artist = "1"
	// >;
	// ["_Emiss_SpeedY"]
	// uniform mediump float _Emiss_SpeedY
	// <
	// 	uistep = "0.001"
	// 	init = "-0.5"
	// 	max = "1"
	// 	min = "-1"
	// 	artist = "1"
	// >;

	["_Emiss_Fresnel_Control"]
	uniform mediump float4 _Emiss_Fresnel_Control
	<
		init = "(0.5,-0.3,1.0,0.332)"
		artist = "1"
	>;

	["u_tonemapping_factor"]
	uniform lowp float u_tonemapping_factor
	<
		min = "0.0"
		max = "1.0"
		init = "1.0"
		artist = "1"
	>;
	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 texcoord1 : TEXTURE1;
	attribute float4 a_color : DIFFUSE;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_tangent : TANGENT;
	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;

	
	// varying变量
	varying mediump float4 UV0;
	varying mediump float2 UV1; // 贴花的uv
	// varying mediump float v_char_height; 
	varying mediump float4 PosWorld;	
	varying mediump float4 pos_local;
	varying lowp float3 v_TangentWorld;
	varying lowp float3 v_BinormalWorld;
	varying lowp float3 v_NormalWorld;
	varying lowp float3 GiLightColor;
	varying highp float4 PosLightProj;
	//varying highp float4 v_dissolve_uv;
	varying highp float2 v_world_uv;
	varying highp float3 v_localPos;
	
	varying mediump float4 v_light_proj_pos;

	uniform mediump float4 u_shadowmap_info: SHADOW_INFO;
	uniform mediump float2 shadow_bias_factor
	<
		// ios(0.002, 0.0002)
		// 其他(0.004, 0.001)
		init = "(0.004, 0.001)"
	>;

	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform highp float4x4 wv: WORLD_VIEW;
	
	uniform mediump float FrameTime: FRAME_TIME;
	
	uniform mediump float4x4 texTrans0 : TEXTURE_TRANS0;
	uniform mediump float4x4 lightmapTrans : TEXTURE_TRANS1;
	
	uniform mediump float4 LightMapScale : LIGHT_MAP_SCALE;
	uniform highp float4x4 lv : LIGHT_VIEW;
	
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] DirLightAttr : DIR_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] ShadowLightAttr : SHADOW_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] PointLightAttrs : POINT_LIGHT_ATTR;

	uniform mediump float4 camera_pos : CAMERA_POSITION;
	
	uniform mediump float4x4 inverse_view : INV_VIEW;
	
	uniform mediump float4x4 view_mat : VIEW;
	
	uniform highp float4x4 lvp : LIGHT_VIEW_PROJ;
	
	uniform mediump float4 ZBufferParams: ZBUFFER_PARAMS;

	uniform float alphaRef : ALPHA_REF
	<
		init = "0.0"
	>;
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;

	// uniform mediump float4x4 envSHR
	// <
	//     init = "(0.014678, -0.012044, -0.040482, -0.029212, -0.012044, -0.014678, 0.022421, 0.014336, -0.040482, 0.022421, 0.136843, 0.068306, -0.029212, 0.014336, 0.068306, 0.175862)"
	// >;
	// uniform mediump float4x4 envSHG
	// <
	//     init = "(0.008648, -0.017736, -0.028054, -0.027763, -0.017736, -0.008648, 0.025042, 0.036537, -0.028054, 0.025042, 0.103563, 0.055276, -0.027763, 0.036537, 0.055276, 0.206319)"
	// >;
	// uniform mediump float4x4 envSHB
	// <
	//     init = "(-0.002828, -0.022570, -0.018314, -0.026353, -0.022570, 0.002828, 0.025450, 0.066163, -0.018314, 0.025450, 0.069045, 0.040577, -0.026353, 0.066163, 0.040577, 0.261003)"
	// >;

	
	uniform lowp float4 FogColor : FOG_COLOR;
	uniform mediump float4 FogInfo : FOG_INFO;
	uniform highp float4x4 proj : PROJECTION;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				//function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				// out(vec, pos1);
				// out(nor, nor1);
				out(vec, a_position);
				out(nor, a_normal);
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};

		
		highp float4 position = vec;
		highp float4 normal = nor;
		

		//mediump float4 uvxyz = float4(texcoord0.xy, 1.0f, 0.0f) * texTrans0;

		// 计算顶点位置
		highp float4 screen_pos = float4(transform(position, wvp));
		vertex(screen_pos);
		
		highp float4 pos_world = transform(position, world);
		
		float3x3 worldMat = float3x3(world);
		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
		
		out(UV0, float4(texcoord0.xy, 0.0f, 0.0f));

		out(v_localPos,position.xyz);
		
		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		out(v_NormalWorld, world_normal);

		macro (XNORMAL_MAP_ENABLE)
		{
			branch("1") {
				mediump float3 tangentWorld = float3(normalize(a_tangent.xyz * worldMat));
		
				// 通过uv空间来判断是否是镜像模型，如果是镜像模型则反转法线
				//mediump float test_sign = float(sign(step(length(tangent.xyz), 1.0f) - 0.5f));
				//mediump float3 binormal_world = cross(world_normal, tangentWorld);
				//mediump float3 binormal_world = cross(world_normal, tangentWorld);
				highp float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
				mediump float3 binormal_world = cross(tangentWorld, world_normal) * tan_coef;

				out(v_TangentWorld, normalize(tangentWorld));
				out(v_BinormalWorld, normalize(binormal_world));
			}
			branch("0") {
			}
		};

		out(v_world_uv,a_color.xy);
	}



	pixel
	{
		// —————————————————— 法线 ——————————————————	
		lowp float3 vertex_normal_world = v_NormalWorld;
		
		macro(XNORMAL_MAP_ENABLE) out(lowp float3 normalWorld, lowp float occlusion) {
			branch("1") {
				lowp float4 norm = sample(SamplerNormalMap, UV0.xy);
				
				lowp float2 normOff = norm.xy * 2.0f - float2(1.0f);
				// lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				out(normalWorld, normalWorld_inner);
				out(occlusion, norm.z);
			}	
			branch("0") {
				out(normalWorld, vertex_normal_world);
				out(occlusion, 1.0f);
			}
		};

		mediump float2 world_uv = v_world_uv;

		mediump float _Noise1_TillingX = _Noise1_Control.x;
		mediump float _Noise1_TillingY = _Noise1_Control.y;
		mediump float _Noise1_WindX = _Noise1_Control.z;
		mediump float _Noise1_WindY = _Noise1_Control.w;

		mediump float _Noise2_TillingX = _Noise2_Control.x;
		mediump float _Noise2_TillingY = _Noise2_Control.y;
		mediump float _Noise2_WindX = _Noise2_Control.z;
		mediump float _Noise2_WindY = _Noise2_Control.w;

		mediump float2 noise1_tilling = float2(_Noise1_TillingX , _Noise1_TillingY);
		mediump float2 noise1_wind = (float2(_Noise1_WindX , _Noise1_WindY));
		mediump float2 noise2_tilling = float2(_Noise2_TillingX , _Noise2_TillingY);
		mediump float2 noise2_wind = (float2(_Noise2_WindX , _Noise2_WindY));
		lowp float3 noise1_result = sample(_CloudNoiseMap,((world_uv * noise1_tilling) + (FrameTime * noise1_wind))).rgb * _Noise1_Amp * normalWorld;
		lowp float3 noise2_result = sample(_CloudNoiseMap,((world_uv * noise2_tilling) + (FrameTime * noise2_wind))).rgb * _Noise2_Amp * normalWorld;
		lowp float3 CloudNoise = noise1_result + noise2_result;

		lowp float4 diffuse_map_color = sample(Tex0, UV0.xy);

		// 视线方向
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);

		mediump float NoV = dot(view_dir, normalWorld);
		mediump float NdotV = saturate(NoV);

		// ——————————————————★★★ DIFFUSE ★★★—————————————————— 
		mediump float3 result_diff_raw =  diffuse_map_color.xyz;

		macro(WEB_SHINING_ENABLE) out(mediump float3 fresnel_combine) 
		{
			branch ("0") 
			{
				out(fresnel_combine,result_diff_raw);
			}
			branch ("1") 
			{
				["网格闪烁消融效果"]
				function web_shining_low 
				(
					burn_max_height, //角色身高
					burn_color01,   //闪烁颜色(较暗)
					burn_color02,	  //闪烁颜色(较亮)
					burn_style,		 //消融方向控制
					PosWorld.xyz,	   //当前像素位置
					(world[3]).xyz,   //角色位置 
					ChangeAmount,	   //消融量
					result_diff_raw   //当前颜色 
				)
				out(lowp float3 final_shining_color, lowp float alphatest01, lowp float alphatest02);

				alphatest("<")(alphatest01, alphatest02);
				out(fresnel_combine,final_shining_color.rgb);
			}
		};
					
		lowp float4 encode_color_1_0 = float4(fresnel_combine, AlphaMtl);

		mediump float fresnelNode455 = _Add_Rim_Control.x + _Add_Rim_Control.y * pow(1.0f - NoV, _Add_Rim_Control.z);
		mediump float _Emiss_Fresnel_Bias = _Emiss_Fresnel_Control.x;
		mediump float _Emiss_Fresnel_Scale = _Emiss_Fresnel_Control.y;
		mediump float _Emiss_Fresnel_Power = _Emiss_Fresnel_Control.z;
		mediump float _EmissNoiseIntensity = _Emiss_Fresnel_Control.w;
		mediump float fresnelNode452 = _Emiss_Fresnel_Bias + _Emiss_Fresnel_Scale * pow(1.0f - NoV, _Emiss_Fresnel_Power);
		mediump float2 _EmissTilling = _EmissTillingSpeed.xy;
		mediump float2 _Emiss_Speed = _EmissTillingSpeed.zw;
		lowp float emiss_value_ = sample(sfx_mask_map,world_uv * _EmissTilling + FrameTime * _Emiss_Speed + sin(FrameTime) * float2(0.1f,0.0f) + CloudNoise.rg * _EmissNoiseIntensity).r;
		mediump float2 appendResult458 = float2(fresnelNode455 + fresnelNode452 * emiss_value_,0.5f);
		lowp float3 add_fire_color_ = sample(_Ramp, appendResult458).rgb;
		lowp float3 add_fire_color = add_fire_color_;
		lowp float emiss_value = emiss_value_;

		lowp float3 combined_fire_color = add_fire_color;

		mediump float sphere_distance = length(SphereCenter.xyz - v_localPos.xyz);
		mediump float sphere_mask = saturate(1.0f - ((sphere_distance - Radius * FireOverlap)) - emiss_value * PatternSpread);

		lowp float3 emiss_color = lerp(float3(0.0f),combined_fire_color,float3(sphere_mask));

        lowp float4 encode_color_1 = float4(encode_color_1_0.xyz + emiss_color,1.0f);
        pixel(encode_color_1);     
	}
}

