["mmd_pbr"]
pipeline
<
	version = "1.0.0"
	author = "hzsy2016"
	company = "Netease"
	technique = "TShader"
	//alphablend = "false"
	//zwritable = "1"
	//zenable="1"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\pbr_include_function.spzs)

	["检查各向异性方向"]
	eitheror ANISDIR_CHECK;
	macro(ANISDIR_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["毛贴图使用2U"]
	eitheror FUR_SECONDUV;
	macro(FUR_SECONDUV)
	<
		default = "0"
		customizable = "1"
	>;
	
	uniform float SHADER_INDEX0
	<
		init = "0"
		artist = "0"
	>;


	attribute float4 a_position: POSITION;
	attribute float4 a_diffuse: DIFFUSE;
	attribute float2 a_texture0: TEXTURE0;
	attribute float2 a_texture1: TEXTURE1;
	attribute float4 a_normal: NORMAL;
	attribute float4 a_tangent: TANGENT;

	uniform highp float4x4 u_world_view_projection: WORLD_VIEW_PROJECTION;
	uniform highp float4x4 u_world: WORLD;
	uniform highp float4x4 u_view: VIEW;
	uniform highp float4x4 u_projection: PROJECTION;
	uniform highp float4x4 u_world_view: WORLD_VIEW;
	uniform highp float4x4 u_view_projection : VIEW_PROJECTION;
	uniform highp float4 CameraPos: CAMERA_POSITION;
	uniform highp float4x4 u_texture_trans0: TEXTURE_TRANS0;
	uniform highp float4x4 u_texture_trans1: TEXTURE_TRANS1;
	uniform highp float _Time: FRAME_TIME;
	uniform highp float4 zbufferParams: ZBUFFER_PARAMS;
	uniform highp float4x4 u_light_view_projection: LIGHT_VIEW_PROJ;
	["阴影贴图"]
	uniform samplershadow TexShadow:SHADOW;
	// uniform highp float4[LIGHT_ATTR_ITEM_NUM] u_dir_light_attr: DIR_LIGHT_ATTR;
	// uniform highp float4[LIGHT_ATTR_ITEM_NUM] u_point_light_attr: POINT_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] Shadowlight_dir : SHADOW_LIGHT_ATTR;

	["毛贴图"]
	uniform sampler TexFurPatten
	<
		artist = "1"
	>;

	["风场贴图"]
	uniform sampler TexWind
	<
		artist = "1"
	>;

	["基本色BaseColor"]
	uniform sampler TexBaseColor
	<
		artist = "1"
	>;

	["各向异性(RG毛方向,B毛区域)"]
	uniform sampler TexFlowMask
	<
		artist = "1"
	>;

	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;
	["毛贴图使用2U"]
	uniform highp float _FurSample_2U
	<
		artist = "1"
		init = "0.0"
	>;
	["毛长度"]
	uniform float _FurLength
	<
		init = "0.5"
		artist  = "1"
	>;
	["毛密度"]
	uniform float FurUVTilling
	<
		init = "5.0"
		artist  = "1"
	>;
	["毛走向"]
	uniform float2 FurUVoffset
	<
		init = "(1.0,1.0)"
		artist  = "1"
	>;
	["毛发渐隐"]
	uniform highp float _EdgeFade
	<
		artist = "1"
		init = "1.0"
		uistep = "0.001"
		min = "0.0"
		max = "3.0"
	>;
	["毛稀薄程度"]
	uniform highp float _Thickness
	<
		artist = "1"
		init = "0.0"
		uistep = "0.001"
		min = "0.0"
		max = "1.0"
	>;
	["毛边缘调整"]
	uniform highp float ShapeAdjust
	<
		artist = "1"
		init = "1.0"
		uistep = "0.001"
		min = "0.0"
		max = "1.0"
	>;
	
	["风力图Tilling"]
	uniform float _WindTilling
	<
		init = "2.0"
		artist  = "1"
	>;
	["风力图Speed"]
	uniform float2 _WindSpeed
	<
		init = "(0.5,0.5)"
		artist  = "1"
	>;
	["风力强度"]
	uniform float _WindStrength
	<
		init = "0.05"
		artist  = "1"
	>;
	

	["重力强度"]
	uniform float _GravityStrength
	<
		init = "0.1"
		artist  = "1"
	>;
	["_OcclusionA"]
	uniform float _OcclusionA
	<
		artist = "1"
		init = "0.25"
	>;
	["_OcclusionB"]
	uniform float _OcclusionB
	<
		artist = "1"
		init = "0.75"
	>;
	["_SpecColor1"]
	uniform float4 _SpecColor1
	<
		artist  = "1"
		color = "1"
		uigroup = "各向异性高光"
	>;
	["_SpecColor2"]
	uniform float4 _SpecColor2
	<
		artist  = "1"
		color = "1"
		uigroup = "各向异性高光"
	>;
	["_SpecShift1"]
	uniform float _SpecShift1
	<
		artist = "1"
		init = "0.1"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
		uigroup = "各向异性高光"
	>;
	["_SpecShift2"]
	uniform float _SpecShift2
	<
		artist = "1"
		init = "0.2"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
		uigroup = "各向异性高光"
	>;
	["_SpecSmooth1"]
	uniform float _SpecSmooth1
	<
		artist = "1"
		init = "0.5"
		uistep = "0.001"
		min = "0.0"
		max = "1.0"
		uigroup = "各向异性高光"
	>;
	["_SpecSmooth2"]
	uniform float _SpecSmooth2
	<
		artist = "1"
		init = "0.5"
		uistep = "0.001"
		min = "0.0"
		max = "1.0"
		uigroup = "各向异性高光"
	>;
		["_Glossiness1"]
	uniform float _Glossiness1
	<
		artist = "1"
		init = "0.2"
		uigroup = "各向异性高光"
	>;
	["_Glossiness2"]
	uniform float _Glossiness2
	<
		artist = "1"
		init = "0.3"
		uigroup = "各向异性高光"
	>;
	["毛根AO颜色"]
	uniform highp float4 _OcclusionColor
	<
		artist = "1"
		color = "1"
		init = "0.15,0.15,0.15,1.0"
	>;
	["边缘光强度"]
	uniform highp float _FresnelLV
	<
		artist = "1"
		init = "10.0"
	>;
	["漫反射强度"]
	uniform highp float _FurLightExposure
	<
		artist = "1"
		init = "1.0"
	>;
	["漫反射暗部提亮"]
	uniform highp float _LightFilter
	<
		artist = "1"
		init = "0.15"
	>;
	


	varying highp float4 v_texture0: TEXTURE0;
	varying highp float4 v_position_world;
	varying highp float3 v_normal_world;
	varying highp float3 v_tangent_world;
	varying highp float3 v_binormal_world;
	varying mediump float v_fur_offset;

	// function ShiftTangent1 in (mediump float3 T,mediump float3 N,float shift) out (mediump float3 shift_tangent)
	// {
	// 	mediump float3 shiftedT = T + shift * N;
	// 	out(shift_tangent,shiftedT);
	// };

	// function StrandSpecular1 in (mediump float3 T,mediump float3 V,mediump float3 L,float exponent) out (mediump float specfactor)
	// {
	// 	mediump float3 H = normalize(L+V);
	// 	lowp float dotTH = dot(T,H);
	// 	mediump float sinTH = sqrt(1.0 - dotTH * dotTH);
	// 	lowp float dirAtten = smoothstep(-1.0,0.0,dot(T,H));
	// 	mediump float spec_factor = dirAtten * pow(sinTH,exponent);
	// 	out(specfactor,spec_factor);
	// };

	function ACESFilm in(float3 inColor) out(lowp float3 outColor)
	{
	    lowp float3 a = float3(2.51f);
	    lowp float3 b = float3(0.03f);
	    lowp float3 c = float3(2.43f);
	    lowp float3 d = float3(0.59f);
	    lowp float3 e = float3(0.14f);
	    lowp float3 encode_color_ = saturate((inColor*(a*inColor+b))/(inColor*(c*inColor+d)+e));
	    lowp float3 encode_color = sqrt(encode_color_);
	    out(outColor,encode_color);
	};

	vertex
	{
		lowp float FUR_OFFSET = a_diffuse.r;
		out(v_fur_offset,FUR_OFFSET);
		// float3 gravity = float3(0.0f, -1.0f, 0.0f) * _GravityStrength;
		// float3 b= a_position.xyz * _WindInfluence.xyz;
		// float v = _Time * _WindSpeed; 
		// float3 wind_effect =  float3(1.5f, 0.5f, 0.7f) * v + b;
		// float y = cos(wind_effect.y);
		// float2 xz = float2(sin(wind_effect.x), sin(wind_effect.z));
		// float3 compose = _WindInfluence.w * float3(xz.x, y, xz.y) + gravity;
		// float3 real_direction = a_normal.xyz + compose * FUR_OFFSET;
		// float3 offset = real_direction.rgb * _FurLength * FUR_OFFSET;
		highp float4 pos_world_origin = transform(a_position, u_world);
		highp float3 viewdir_WS = normalize( CameraPos.xyz - pos_world_origin.xyz );

		highp float3x3 world_normal_mat = float3x3(u_world);
		highp float3 normal_world = normalize(transform(a_normal.xyz, world_normal_mat));
		out(v_normal_world, normal_world);

		float n_dot_v = saturate(dot(normal_world,viewdir_WS));
		float shape_adjust = saturate(n_dot_v + ShapeAdjust);

		float4 pos_local = float4(a_position.xyz + a_normal.xyz * _FurLength * FUR_OFFSET * shape_adjust,a_position.a);
		highp float4 pos_world_ = transform(pos_local, u_world);
		float3 gravity = float3(0.0f, -1.0f, 0.0f) * _GravityStrength;
		highp float3 pos_world_gravity = pos_world_.xyz + gravity * FUR_OFFSET * FUR_OFFSET * FUR_OFFSET;
		highp float4 pos_world = float4(pos_world_gravity,pos_world_.w);
		out(v_position_world,pos_world);
		highp float4 pos = transform(pos_world, u_view_projection);

		float4 pos_proj = pos;
		vertex(pos_proj);

		//mediump float2 uvoffset = FurUVoffset.xy  * FUR_OFFSET * 0.1f;

		// float2 uv_xy = 1.0f / FurUVTilling * uvoffset + a_texture0.xy; //越细偏移越小，估计是效果
		// float2 uv_zw = a_texture0.xy * FurUVTilling + uvoffset;//subTexUV越大越细

		out(v_texture0, float4(a_texture0, a_texture1));

		mediump float3 tangentWorld = float3(normalize(a_tangent.xyz * world_normal_mat));
		float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
		mediump float3 binormal_world = cross(tangentWorld, normal_world) * tan_coef;
		out(v_tangent_world, normalize(tangentWorld));
		out(v_binormal_world, normalize(binormal_world));


	}
	pixel
	{	
		lowp float FUR_OFFSET = v_fur_offset;

		mediump float2 uv0 = v_texture0.xy;
		mediump float2 uv1 = v_texture0.zw;

		lowp float4 FurFlowMask_var = sample(TexFlowMask ,uv1);
		lowp float2 flowdir = FurFlowMask_var.xy * 2.0f - float2(1.0f);
		mediump float2 uv_flow = FUR_OFFSET * flowdir * FurUVoffset * float2(0.1f,-0.1f);
		macro(FUR_SECONDUV) out(float2 fur_uv_)
		{
			branch("1")
			{
				out(fur_uv_,uv1);
			}
			branch("0")
			{
				out(fur_uv_,uv0);
			}
		};

		lowp float4 TexWind_var = sample(TexWind,uv0 * _WindTilling + _WindSpeed * _Time * 0.1f);
		lowp float2 uv_wind = (TexWind_var.xy * 2.0f - float2(1.0f)) * _WindStrength * FUR_OFFSET;
		mediump float2 fur_uv = fur_uv_ * FurUVTilling + uv_flow + uv_wind;

		lowp float FurMask = 1.0f - FurFlowMask_var.z;

		lowp float Noise = sample(TexFurPatten ,fur_uv).r;

		// lowp float fur_alpha = saturate((Noise * 2.0f - (FUR_OFFSET *FUR_OFFSET + (FUR_OFFSET * FurMask * _FurMaskBlur))) * _Thickness);//衰减曲线调整
		lowp float fur_alpha = saturate((Noise * 2.0f - FUR_OFFSET * FUR_OFFSET * _EdgeFade) * (1.0f - _Thickness));//衰减曲线调整
		lowp float alpha = lerp(fur_alpha,1.0f,step(FUR_OFFSET,0.001f));
		float decode_alpha =  saturate(alpha) * AlphaMtl;
		macro(ALPHA_TEST_ENABLE)
		{
		  	branch("1") {
				alphatest("<")(decode_alpha, 0.0f);
		  	}
			branch("0") {
		 	}
		};

		highp float4 position_ws = v_position_world;
		highp float3 tangent_ws = v_tangent_world;
		highp float3 binormal_ws = v_binormal_world;
		highp float3 normaldir_WS =  normalize( v_normal_world.xyz );

		highp float4 lightcolor = Shadowlight_dir[1];
		highp float4 light_dir = Shadowlight_dir[3];
		highp float3 lightdir_WS = normalize( -light_dir.rgb  );
		highp float3 viewdir_WS = normalize( CameraPos.xyz - position_ws.xyz );

		highp float3 srgb = sample(TexBaseColor,uv0 + uv_wind * 0.03f).rgb;
		lowp float3 baseColor = srgb * srgb;

		float n_dot_v = saturate( dot(normaldir_WS,viewdir_WS ) );
		float n_dot_l = saturate( dot(normaldir_WS,lightdir_WS ) );

		//毛发光照模型与遮蔽性
		float3 normaldir_VS = normalize(transform(float4(normaldir_WS,0.0f),u_view).xyz);
		float3 SH = float3( saturate(normaldir_VS.y * _OcclusionA + _OcclusionB) );//模拟球谐做上下关系
		float3 SHL = lerp (_OcclusionColor.rgb * SH,SH,float3( FUR_OFFSET )) ;

		//毛发的边缘光
		float Fresnel = 1.0f - n_dot_v;
		float RimLightA = pow(Fresnel,5.0f) * _FresnelLV; //fresnel~pow简化版
		float3 RimLight = RimLightA * SHL; //加上环境光因数
  		float3 SHLL = SHL + RimLight;//与环境光结合

		//毛发的次表面散射
		float DirLightA = saturate(n_dot_l * FUR_OFFSET + n_dot_l + (1.0f - n_dot_l) * _LightFilter);//模拟光线穿透
		float3 DirLightB = DirLightA * _FurLightExposure * lightcolor.rgb;

		//kajiya各向异性
		// float3 binormal_calc = normalize( cross( normaldir_WS,tangent_ws )  )	* -1.0f;
		// lowp float3 anisotex_offset1 = normaldir_WS * (_SpecShift1 - 0.5f);
		// lowp float3 T1 = normalize(flowdir.x * tangent_ws + flowdir.y * binormal_calc + anisotex_offset1);

		// lowp float3 anisotex_offset2 = normaldir_WS * (_SpecShift2 + Noise);
		// lowp float3 T2 = normalize(flowdir.x * tangent_ws + flowdir.y * binormal_calc + anisotex_offset2);
		// //高光值
		// function StrandSpecular(T1,viewdir_WS, lightdir_WS, _SpecSmooth1) out(highp float spec1) ;
		// function StrandSpecular(T2,viewdir_WS, lightdir_WS, _SpecSmooth2) out(highp float spec2) ;
		// lowp float3 _SpecColor1_linear = _SpecColor1.rgb * _SpecColor1.rgb;
		// lowp float3 _SpecColor2_linear = _SpecColor2.rgb * _SpecColor2.rgb;

		// mediump float3 specular1 = _SpecColor1_linear.rgb * spec1 * _Glossiness1;
		// mediump float3 specular2 = _SpecColor2_linear.rgb * spec2 * _Glossiness2;
		// mediump float3 specular = specular1*Noise*Noise + specular2*Noise*Noise ;

		// float color_b = color_a * (dot(normaldir_WS,viewdir_WS ) - _Blur);
		lowp float3 H = normalize(viewdir_WS + lightdir_WS);
		lowp float3 tangentWorld1 = normalize(flowdir.x * tangent_ws + flowdir.y * binormal_ws - normaldir_WS);
		lowp float3 tangentWorld_ = normalize(tangentWorld1 - normaldir_WS * dot(tangentWorld1, normaldir_WS));
		lowp float3 binormal_calc = normalize(cross(normaldir_WS, tangentWorld_));

		lowp float3 H1 = normalize(H + (_SpecShift1 + Noise) * tangentWorld_);
		lowp float3 H_1 = normalize(H1 - binormal_calc * dot(H1, binormal_calc));
		lowp float NdotH_1 =	saturate(dot(normaldir_WS, H_1));

		// lowp float3 H2 = normalize(H + (_SpecShift2 + Noise) * tangentWorld_);
		// lowp float3 H_2 = normalize(H2 - binormal_calc * dot(H2, binormal_calc));
		// lowp float NdotH_2 =	saturate(dot(normaldir_WS, H_2));

		mediump float3 F = _SpecColor1.rgb; 
        function D_GGX(_SpecSmooth1, NdotH_1) out(lowp float D);
        function G_Schlick_Disney(_SpecSmooth1, n_dot_v, n_dot_l) out (lowp float G);
        mediump float3 brdf =  D * F * G;

        // mediump float3 F2 = _SpecColor2.rgb; 
        // function D_GGX(_SpecSmooth2, NdotH_2) out(lowp float D2);
        // function G_Schlick_Disney(_SpecSmooth2, n_dot_v, n_dot_l) out (lowp float G2);
        // mediump float3 brdf2 =  D2 * F2 * G2;
        mediump float3 final_specular = brdf * n_dot_l * lightcolor.rgb * Noise * Noise;


		float3 final_rgb = final_specular + baseColor * SHLL + DirLightB * baseColor;

		// float3 decode_color = final_rgb/(final_rgb + float3(0.187f)) * 1.035f;
		function ACESFilm(final_rgb) out(float3 decode_color);

		macro(ANISDIR_CHECK) out(lowp float3 final_color)
		{
			branch ("0") {
				out(final_color, decode_color);
			}
			branch ("1") {
				out(final_color, float3(FurFlowMask_var.rg,0.0f));
			}
		};

		lowp float4 res_color = float4(float3(decode_color),decode_alpha);
		pixel(res_color);
	}
}