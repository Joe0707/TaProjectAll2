["common no light"]

pipeline
<
	version = "1.0.0" 
	author = "zhangliang/xuzhuoliang/fanyu" 
	category = "common" 
	company = "netease"
  merge = "1"
>
{
// 宏


	["是否灵魂状态"]
	eitheror GHOST_EFFECT;
	macro(GHOST_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否冰冻"]
	eitheror FROZENE_EFFECT;
	macro(FROZENE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	
	["是否燃烧"]
	eitheror FIRE_EFFECT;
	macro(FIRE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否金身"]
	eitheror GOLD_EFFECT;
	macro(GOLD_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	
	["是否叠加为ADD模式"]
	eitheror ADD_MODE;
	macro(ADD_MODE)
	<  
		default = "0"
		customizable = "1"
	>;

	["是否石化"]
	eitheror PETRIFY_EFFECT;
	macro(PETRIFY_EFFECT)
	<
		default = "0"
		customizable = "1"
	>;

// 贴图
	
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;
	
	// ["光照贴图"]
	// uniform sampler LightTex
	// <
	// 	artist = "1"
	// 	mag = "LINEAR"
	// 	mip = "LINEAR"
	// 	min = "LINEAR"
	// 	path = "fx\\texture\\effect\\lighttex.png"
	// >;
	
	["冰冻贴图"]
	uniform sampler IceTex
	<
		artist = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\effect\\ice_buff_1.png"
	>;

	["燃烧贴图"]
	uniform sampler FireTex
	<
		artist = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\effect\\fire_buff.png"
	>;

	["金身贴图"]
	uniform sampler GoldTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		addressu = "REPEAT"
		addressv = "REPEAT"
		path = "fx\\texture\\noise\\noise_yd_26.tga"
	>;

	["灵体贴图"]
	uniform sampler GhostTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		addressu = "REPEAT"
		addressv = "REPEAT"
		path = "fx\\texture\\noise\\noise_yd_26.tga"
	>;

	["溶解贴图"]
	uniform sampler DissolveTex
	<
		artist = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\effect\\dissolve.png"
	>;

	["石化贴图"]
	uniform sampler PetrifyTex
	<
		artist = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\effect\\petrify_buff.png"
	>;


	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	
	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 wv: WORLD_VIEW;
	// uniform highp float4x4 view : VIEW;
	uniform highp float4x4 world : WORLD;
	uniform mediump float4 camera_pos : CAMERA_POSITION;
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;
	uniform highp float frame_time : FRAME_TIME;

	
	
	["叠加色"]
	uniform mediump float3 change_color
	<
		color = "1"
		init = "1.0,1.0,1.0"
	>;
	
	["溶解程度"]
	uniform lowp float DissAmount
	<
		init = "0.0"
	>;


	["范围开始"]
	uniform mediump float nov_sm1
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["范围结束"]
	uniform mediump float nov_sm2
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "1.0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["中央厚度"]
	uniform mediump float sm_min
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.4"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["灵魂边缘强度"]
	uniform mediump float ghost_rim_sm_multi
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.65"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["UV动画速度"]
	uniform mediump float sm_vuspeed
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.53"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;	

	["U缩放"]
	uniform float sm_uvtiling_u
	<
		artist = "1"
		uigroup = "BUFF"
		init = "0.1"
		uistep = "0.0001"
		max = "2.0"
		min ="0.0"
	>;
	["U偏移"]
	uniform float sm_uvoffset_u
	<
		artist = "1"
		uigroup = "BUFF"
		init = "1.0"
		uistep = "0.0001"
		max = "1.0"
		min ="-1.0"
	>;
	["V缩放"]
	uniform float sm_uvtiling_v
	<
		artist = "1"
		uigroup = "BUFF"
		init = "0.1"
		uistep = "0.0001"
		max = "2.0"
		min ="0.0"
	>;


	["灵魂颜色"]
	uniform mediump float4 ghost_color_add
	<
		color = "1"
		uigroup = "BUFF"
		init = "0.843, 0.843, 1.0, 1.0"
		artist = "1"
	>;

	["灵魂贴图强度"]
	uniform mediump float ghost_sm_multi
	<
		uigroup = "BUFF"
		uistep = "0.001"
		init = "0.52"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["颜色"]
	uniform mediump float4 sm_color_ad
	<
		color = "1"
		uigroup = "BUFF"
		init = "1.0, 1.0, 1.0, 1.0"
		artist = "1"
	>;

	["抖动高度"]
	uniform float shake_height
	<
		artist = "1"
		uigroup = "BUFF"
		uistep = "1"
		max = "20"
		min = "0"
		init = "0.4"
	>;

	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;

	// varying变量
	varying mediump float2 UV0;
	varying mediump float ghostlerp;
	varying mediump float v_vertical_fac;
	varying mediump float2 v_ghost_uv;
	//varying lowp float v_height_fac;

	vertex
	{	
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				out(vec, pos1);
				out(nor, nor1);
				
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};
		highp float4 position = vec;	
		highp float4 normal = nor;

		// highp float4 position = a_position;	
		highp float4 pos = transform(position, wvp);
		highp float4 pos_world = transform(position, world);
		out(UV0, texcoord0.xy);
		//out(v_height_fac, clamp(position.y/10.0f, 0.0f, 1.0f));

		// 灵体状态（可以跑但是未确认效果，先别用）
		// highp float3 normal_view = normalize(transform(a_normal.rgb,float3x3(wv)));
		highp float3 normal_view = normalize(transform(normal.rgb,float3x3(wv)));
		mediump float ghostlerp_ = smoothstep(nov_sm1,nov_sm2,1.0f + normal_view.b);
		out(ghostlerp,saturate(ghostlerp_ + sm_min));
		// 控制頂點運動
		// 顶点位置越高扰动越弱，根据世界空间坐标做扰动偏移
		mediump float horizon_fac = pos_world.x + pos_world.z; // 水平因子
		//lowp float shake_height = 20.0f; // 标准高度
		mediump float vertical_fac = clamp((position.y - shake_height) * 0.1f, 0.0f, 1.0f); // 垂直因子 // 明天把高度抖动也写下
		out(v_vertical_fac, vertical_fac);
		highp float ghost_uv_y = position.y + frame_time * sm_vuspeed;
		lowp float2 ghost_view = float2(normal_view.x * sm_uvtiling_u + sm_uvoffset_u, ghost_uv_y * sm_uvtiling_v);
		out(v_ghost_uv, ghost_view);


		vertex(pos);
    }

	pixel
	{
		// diffuse
		lowp float4 diffuse_map_color = sample(Tex0,UV0.xy);
		//lowp float height_fac = v_height_fac;
		// alpha
		macro(DIFFUSE_ALPHA_SEPARATE) out (lowp float alpha)
		{
		  branch("1") {
			lowp float4 separateColor = sample(sepAlphaTex, UV0.xy);
			out(alpha, separateColor.w);
		  }
		  branch("0") {
			out(alpha, diffuse_map_color.a);
		  }
		};		


		// 灵魂状态
		lowp float height_alpha = v_vertical_fac;
		lowp float3 ghost_flash = sample(GhostTex,v_ghost_uv.xy).rgb;
		lowp float3 ghost_color = ghost_color_add.rgb * ghost_rim_sm_multi;
		// lowp float3 ghost_color = lerp(1.15f * sm_color_ad.rgb, float3(oneminus(height_alpha)), float3(0.5f)); // hardcode
		//lowp float3 ghost_color = 1.15f * sm_color_ad.rgb; // hardcode
		lowp float3 combine_ghost_ = lerp(diffuse_map_color.rgb, ghost_color + ghost_sm_multi * ghost_flash,float3(ghostlerp));
		lowp float4 combine_ghost = float4(combine_ghost_, height_alpha);

		lowp float4 combine_dissolve = float4(change_color * combine_ghost.xyz, combine_ghost.a);
		lowp float final_alpha = combine_dissolve.a * AlphaMtl;
		pixel(float4(combine_dissolve.rgb , final_alpha));
	}
}
