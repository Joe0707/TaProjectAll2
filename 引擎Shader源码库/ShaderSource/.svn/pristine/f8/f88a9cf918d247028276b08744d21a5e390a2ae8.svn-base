["VBR shader for DM106"]
pipeline
<
	version = "1.1.2" 
	author = "liuyu/xuzhuoliang" 
	category = "common" 
	company = "netease"
	merge = "1"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\pbr_include_function.spzs)
 
	["是否溶解"]
	eitheror DISSOLVE_EFFECT;
	macro(DISSOLVE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["检查AO"]
	eitheror AO_CHECK;
	macro(AO_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查diffuse"]
	eitheror DIFFUSE_CHECK;
	macro(DIFFUSE_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查金属度"]
	eitheror METAL_CHECK;
	macro(METAL_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查粗糙度"]
	eitheror ROUGHNESS_CHECK;
	macro(ROUGHNESS_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["开启环境反射(ENVIR_ENABLE)"]
	eitheror ENVIR_ENABLE;

	["开启法线贴图(XNORMAL_MAP_ENABLE)"]
	eitheror XNORMAL_MAP_ENABLE;
	
	["镜头主光"]
	eitheror MAIN_LIGHT_ENABLE;

	["补光"]
	eitheror DIR_AMBIENT_ENABLE;

	["开启自发光"]
	eitheror SELF_BLING;

	["接受点光"]
	eitheror POINT_LIGHT_ENABLE;

	["启用半球光照"]
	eitheror SPHEREAO_ENABLE;

	//["暗部补光"]
	//eitheror AMBIENT_FIX;

	// ["开启羽毛反射"]
	// eitheror FUR_COLOR_ENABLE;

	["是否开启Oren-nayar因子"]
	eitheror ORENNAYAR_ENABLE;
	macro(ORENNAYAR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	["开启网格闪烁消融"]
	eitheror WEB_SHINING_ENABLE;
	macro(WEB_SHINING_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SHADOW_MAP_ENABLE)
	<
		default = "0"
	>;
	
	macro(POINT_SHADOW_MAP_ENABLE)
	<
		default = "0"
	>;
	
	macro(XNORMAL_MAP_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(ENVIR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(MAIN_LIGHT_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;


	macro(SELF_BLING)
	<
		default = "0"
		customizable = "1"
	>;

	macro(POINT_LIGHT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SPHEREAO_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	//macro(AMBIENT_FIX)
	// <
	// 	default = "1"
	// 	customizable = "1"
	// >;

	// 贴图
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;
	
	["金属度/sss/光滑度"]
	uniform sampler SamplerRough
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["法线贴图"]
	uniform sampler SamplerNormalMap
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;


	["分开的alpha贴图"]
	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;
	
	// —————————————————— PBR调整 ——————————————————

	["天光颜色"]
	uniform lowp float4 sky_light_color
	<
		uigroup = "1 环境光"
		artist = "1" 
		color = "1"
		// init = "(0.5569,0.7412,1,1)"
		init = "(1,1,1,1)"
	>;

	["天光强度"]
	uniform float sky_light_intensity
	<
		uigroup = "1 环境光"
		artist = "1" 
		init = "5.0"
	>;
	["天光平滑度"]
	uniform float skylight_smooth
	<
		uigroup = "1 环境光"
		artist = "1" 
		init = "-0.5"
		uistep = "0.01"
		max = "1.0"
		min = "-1.0"
	>;
	["天光垂直范围"]
	uniform float sky_light_height
	<
		uigroup = "1 环境光"
		artist = "1" 
		init = "20.0"
		uistep = "0.01"
		max = "30.0"
		min = "0.0"
	>;
	["天光饱和调整"]
	uniform float sky_light_saturate
	<
		uigroup = "1 环境光"
		artist = "1" 
		init = "0.3"
		uistep = "0.01"
		max = "1.0"
		min = "0.0"
	>;
	
	

	// ——————————————————DIFFUSE——————————————————

	["漫反射强度"]
	uniform mediump float diffuse_intensity
	<
		init = "1.0"
		max = "5.0"
		min = "0.0"
		uistep = "0.001"
		artist = "0"
		uigroup = "0 漫反射"
	>;


	["暗部颜色"]
	uniform lowp float4 dark_color
	<
		uigroup = "风格化"
		artist = "1" 
		color = "1"
		init = "(0.15,0.15,0.15,0.15)"
	>;	



	//————————————————主光——————————————————
	["环境贴图旋转"]
	uniform mediump float env_rotation
	<
		init = "0.0"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "360.0"
		min = "0.0"
	>;
	["主光强度"]
	uniform mediump float main_light_intensity
	<
		init = "2.5"
		max = "10.0"
		min = "0.0"
		uistep = "1"
		artist = "1"
		uigroup = "主光"
	>;	

	["主光颜色"]
	uniform lowp float4 main_light_color
	<
		artist = "1" 
		color = "1"
		init = "(1.0,1.0,1.0,1)"
		uigroup = "主光"
	>;	
	
	["主光位置x"]
	uniform mediump float main_pos_x
	<
		init = "-6"
		artist = "1"
		uigroup = "主光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["主光位置y"]
	uniform mediump float main_pos_y
	<
		init = "-13"
		artist = "1"
		uigroup = "主光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["主光位置z"]
	uniform mediump float main_pos_z
	<
		init = "13"
		artist = "1"
		uigroup = "主光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;


	["垂直AO范围"]
	uniform mediump float sphere_range
	<
		init = "30.0"
		artist = "1"
		uistep = "1"
		max = "30"
		min = "0"
		uigroup = "ao"
	>;
	["垂直AO高度"]
	uniform mediump float sphere_dist
	<
		init = "5.0"
		artist = "1"
		uistep = "1"
		max = "10"
		min = "-5"
		uigroup = "ao"
	>;
	["垂直AO强度"]
	uniform mediump float sphere_bias
	<
		init = "0.65"
		artist = "1"
		uistep = "1"
		max = "1"
		min = "-1"
		uigroup = "ao"
	>;

	
	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 a_color : DIFFUSE;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_tangent : TANGENT;
	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;

	
	// varying变量
	varying mediump float4 UV0;
	
	varying highp float4 PosWorld;	
	varying mediump float4 PosLocal;
	varying lowp float3 v_TangentWorld;
	varying lowp float3 v_BinormalWorld;
	varying lowp float3 v_NormalWorld;
	varying mediump float2 v_matcap_uv;
	varying mediump float2 effectuv;// 替代petrify_uv v_gold_uv v_ghost_uv;
	varying mediump float effectlerp;// 替代ghostlerp icelerp firelerp goldlerp petrify_shadow ;
	varying mediump float height_sm;

	// varying mediump float4 v_light_proj_pos;
	uniform mediump float4 u_shadowmap_info: SHADOW_INFO;
	uniform mediump float2 shadow_bias_factor
	<
		// ios(0.002, 0.0002)
		// 其他(0.004, 0.001)
		init = "(0.004, 0.001)"
	>;

	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform highp float4x4 wv: WORLD_VIEW;
	
	uniform mediump float FrameTime: FRAME_TIME;
	
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] ShadowLightAttr : SHADOW_LIGHT_ATTR;

	uniform mediump float4 camera_pos : CAMERA_POSITION;
	
	uniform mediump float4x4 inverse_view : INV_VIEW;
	
	uniform mediump float4x4 view_mat : VIEW;
	
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;

	// uniform mediump float4x4 envSHR
	// <
	//	 init = "(0.014678, -0.012044, -0.040482, -0.029212, -0.012044, -0.014678, 0.022421, 0.014336, -0.040482, 0.022421, 0.136843, 0.068306, -0.029212, 0.014336, 0.068306, 0.175862)"
	// >;
	// uniform mediump float4x4 envSHG
	// <
	//	 init = "(0.008648, -0.017736, -0.028054, -0.027763, -0.017736, -0.008648, 0.025042, 0.036537, -0.028054, 0.025042, 0.103563, 0.055276, -0.027763, 0.036537, 0.055276, 0.206319)"
	// >;
	// uniform mediump float4x4 envSHB
	// <
	//	 init = "(-0.002828, -0.022570, -0.018314, -0.026353, -0.022570, 0.002828, 0.025450, 0.066163, -0.018314, 0.025450, 0.069045, 0.040577, -0.026353, 0.066163, 0.040577, 0.261003)"
	// >;

	uniform highp float4x4 proj : PROJECTION;
	
	["溶解程度"]
	uniform lowp float ChangeAmount
	<
		init = "0.0"
		artist = "1"
	>;

	["溶解颜色"]
	uniform lowp float4 DissolveColor
	<
		init = "(1.0, 0.3, 0.3, 0.0)"
		artist = "1"
		color = "1"
	>;

	["溶解贴图"]
	uniform sampler DissolveTex
	<
		artist = "0"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\effect\\dissolve.png"
	>;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				out(vec, pos1);
				out(nor, nor1);
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};

		
		highp float4 position = vec;
		highp float4 normal = nor;
		
		// 计算顶点位置
		highp float4 screen_pos = float4(transform(position, wvp));
		vertex(screen_pos);
		
		highp float4 pos_world = transform(position, world);
		
		float3x3 worldMat = float3x3(world);
		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
			
		mediump float3 normal_view = normalize(transform(normal.xyz,float3x3(wv)));


		out(UV0, float4(texcoord0.xy, 0.0f, 0.0f));
		macro(SPHEREAO_ENABLE) 
		{
			branch("1")
			{
				out(PosLocal,position);
			}
			branch("0") {				
			}
		};
		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		out(v_NormalWorld, world_normal);

		macro (XNORMAL_MAP_ENABLE)
		{
			branch("1") {
				mediump float3 tangentWorld = float3(normalize(a_tangent.xyz * worldMat));
		
				// 通过uv空间来判断是否是镜像模型，如果是镜像模型则反转法线
				//mediump float test_sign = float(sign(step(length(tangent.xyz), 1.0f) - 0.5f));
				//mediump float3 binormal_world = cross(world_normal, tangentWorld);
				//mediump float3 binormal_world = cross(world_normal, tangentWorld);
				highp float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
				mediump float3 binormal_world = cross(tangentWorld, world_normal) * tan_coef;

				out(v_TangentWorld, normalize(tangentWorld));
				out(v_BinormalWorld, normalize(binormal_world));
			}
			branch("0") {
			}
		};
	}


	pixel
	{	
		// —————————————————— 法线 ——————————————————	
		lowp float3 vertex_normal_world = v_NormalWorld;

		macro(XNORMAL_MAP_ENABLE) out(lowp float3 normalWorld, lowp float occlusion) {
			branch("1") {
				lowp float4 norm = sample(SamplerNormalMap, UV0.xy);
				
				lowp float2 normOff = norm.xy * 2.0f - float2(1.0f);
				// lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				out(normalWorld, normalWorld_inner);
				out(occlusion, norm.z);
			}	
			branch("0") {
				out(normalWorld, vertex_normal_world);
				out(occlusion, 1.0f);
			}
		};

		// macro(SHADOW_MAP_ENABLE) out(highp float4 v_light_proj_pos)
		// {
		// 	branch("1")
		// 	{				
		// 		mediump float4 shadow_light_attr_3 = ShadowLightAttr[3];
		// 		function calc_shadow_info(
		// 			PosWorld,
		// 			normalWorld,
		// 			lvp,
		// 			shadow_light_attr_3.xyz)
		// 		out(
		// 			highp float2 uv_out,
		// 			highp float  depth_out,
		// 			highp float  factor_out
		// 		);
		// 		out(v_light_proj_pos, float4(uv_out, depth_out, factor_out));
		// 	}
		// 	branch("0")
		// 	{
		// 		out(v_light_proj_pos, PosWorld);
		// 	}				
		// };
		// // —————————————————— 自投影(shadow_fac计算) ——————————————————	
		// macro(SHADOW_MAP_ENABLE) out (mediump float shadow_fac_)
		// {
		// 	branch("1") {
		// 		// macro(LEVEL_HIGH) out(mediump float fac0) 
		// 		// {
		// 		// 	branch ("1") 
		// 		// 	{
		// 		// 		function calc_shadowmap_factor_sampling9(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
		// 		//         out(lowp float factor);
		// 		//         out(fac0, factor);
		// 		// 	}
		// 		// 	branch ("0") 
		// 		// 	{
		// 		// 		function calc_shadowmap_factor_sampling5(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
		// 		//         out(lowp float factor);
		// 		//         out(fac0, factor);
		// 		// 	}
		// 		// };
		// 		function calc_shadowmap_factor(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias)
		// 		out(lowp float factor);
		// 		out(shadow_fac_, factor);
		// 	}
		// 	branch("0") {
		// 		out(shadow_fac_, 1.0f);
		// 	}
		// };
		mediump float shadow_fac_ = 1.0f;

		// ——————————————————★★★ 基础设置 ★★★——————————————————	
		// 采样贴图
		lowp float4 diffuse_map_color_ = sample(Tex0, UV0.xy);

		macro(LEVEL_MIDDLE) out(lowp float4 diffuse_map_color)
		{
			branch("1")
			{
				macro(DIFFUSE_ALPHA_SEPARATE) out(lowp float4 diffuse_map_color0)
				{
					branch("1")
					{
						lowp float4 separateColor = sample(sepAlphaTex, UV0.xy);
						out(diffuse_map_color0, float4(diffuse_map_color_.xyz, separateColor.w));
					}
					branch("0") {
						out(diffuse_map_color0, diffuse_map_color_);
					}
				};
				out(diffuse_map_color,diffuse_map_color0);
			}
			branch ("0") 
			{
				out(diffuse_map_color,diffuse_map_color_);
			}
		};


		lowp float4 pbr_map = sample(SamplerRough, UV0.xy);
		lowp float metal = saturate(pbr_map.r);
		lowp float rough = saturate(pbr_map.b);

		// // ——————————————————★★★ 光照设置 ★★★——————————————————
		macro(POINT_LIGHT_ENABLE) out(mediump float3 gi_color0, mediump float3 light_dir0) {
			branch ("1") {
				// 点光颜色
				lowp float4 light_color = ShadowLightAttr[1];
				mediump float4 dir_vector = ShadowLightAttr[3];
				lowp float light_range = dir_vector.w;
				mediump float3 light_dir_ = PosWorld.xyz - dir_vector.xyz; 
				out(light_dir0, normalize(light_dir_)); 
				lowp float dist = length(light_dir_);
				lowp float point_light_fac = clamp((light_range - dist) / light_range, 0.0f, 1.0f);
				out(gi_color0, lerp(dark_color.rgb, light_color.rgb, float3(point_light_fac * point_light_fac)));
			}
			branch ("0"){
				//平行光颜色
				lowp float4 light_color = ShadowLightAttr[1]; 
				out(gi_color0, light_color.xyz); 

				// 光源方向
				mediump float4 light_dir_ = ShadowLightAttr[3];
				out(light_dir0, normalize(light_dir_.xyz));
				//mediump float3 light_dir = u_light_scale * normalize(float3(u_light_pos_x, u_light_pos_y, u_light_pos_z));
			}
		};

		macro(MAIN_LIGHT_ENABLE) out(mediump float3 gi_color,mediump float3 light_dir)
		{
			branch("1")
			{
				mediump float3x3 inverse_view_mat0 = float3x3(inverse_view);
				mediump float3 mainlight_dir = normalize(float3(main_pos_x, main_pos_y, main_pos_z) * inverse_view_mat0);
				out(light_dir,mainlight_dir);
				out(gi_color,main_light_color.rgb * main_light_intensity);
			}
			branch("0")
			{
				out(gi_color, gi_color0); 
				out(light_dir, light_dir0);
			}
		};

		lowp float3 light_dir_ndl = normalize(float3(light_dir.x, light_dir.y, light_dir.z));
		// 视线方向
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);
		
		// ——————————————————★★★ 常用参数 ★★★——————————————————

		lowp float roughness = rough;	
				
		lowp float non_metal = 1.0f - metal;

		lowp float3 H = normalize(view_dir - light_dir_ndl);
		mediump float VoH = dot(view_dir, H);
		mediump float VoL = dot(view_dir, -light_dir_ndl);
		mediump float NoV = dot(view_dir, normalWorld);
		mediump float VdotH = saturate(VoH);
		mediump float NoH = dot(normalWorld, H);
		mediump float NdotH = saturate(NoH);
		mediump float NdotV = saturate(NoV);

		// NdotL
		mediump float NoL = dot(normalWorld, -light_dir_ndl);

		// 计算OrenNayarLighting因子
		lowp float ggx_rough = lerp(0.04f, 1.0f, rough);

		macro(LEVEL_MIDDLE) out(lowp float orennayar_factor) 
		{
			branch ("1") 
			{
				macro(ORENNAYAR_ENABLE) out(lowp float orennayar_factor0) {
					branch ("0") {
						out(orennayar_factor0,1.0f);
					}
					branch ("1") {
						float a = ggx_rough * ggx_rough;
				        float s = a;// / ( 1.29 + 0.5 * a );
						float s2 = s * s;
				        float VoL1 = 2.0f * VoH * VoH - 1.0f;		// double angle identity
						float Cosri = VoL1 - NoV * NoL;
						float C1 = 1.0f - 0.5f * s2 / (s2 + 0.33f);
						condition(Cosri) out(float C3) {
							branch ("%0% >= 0.0") {
								out(C3, min(1.0f,NoL/max(0.01f, NoV)));
							}
							default {
								out(C3, 1.0f);
							}
						};
						float C2 = 0.45f * s2 / (s2 + 0.09f) * Cosri * C3;
						out(orennayar_factor0, clamp(( C1 + C2 ) * ( 1.0f + ggx_rough * 0.5f), 0.0f, 5.0f));
					}
				};
				out(orennayar_factor, orennayar_factor0);
			}
			branch ("0") 
			{
				out(orennayar_factor, 1.0f);
			}
		};

		// mediump float NdotL_spec = min(saturate(NoL),shadow_fac_);// 此为specular的nol
		mediump float NdotL_spec = min(saturate(NoL),shadow_fac_);
		lowp float NdotL_diff = NdotL_spec * orennayar_factor;

		// ——————————————————★★★ DIFFUSE ★★★—————————————————— 
		mediump float3 diffuse_color = diffuse_map_color.xyz * diffuse_map_color.xyz * diffuse_intensity; 
				

		// 金属度计算过后的漫反射光强
		mediump float3 non_metal_diffuse = non_metal * diffuse_color; 

		// 半球AO
		macro(SPHEREAO_ENABLE) out(mediump float sky_ao)
		{
			branch("1")
			{
				mediump float sky_ao_ = (1.0f - saturate(saturate((PosLocal.y - sphere_dist) / sphere_range) + sphere_bias));
				out(sky_ao,sky_ao_);
			}
			branch("0")
			{
				out(sky_ao,0.0f);
			}
		};

		// AO
		macro(ENVIR_ENABLE) out(lowp float3 AO_color) {
			branch ("1") {
				lowp float _AO_adjust = lerp(1.0f, occlusion ,NdotV);
				out(AO_color, float3(saturate(lerp(_AO_adjust, occlusion,2.0f * saturate(0.5f - occlusion)) - sky_ao)));
			}
			branch ("0") {
				out(AO_color, float3(saturate(1.0f - sky_ao)));
			}
		};

		["计算暗部补充光线"]
		// mediump float3 fix_normal = normalize(vertex_normal_world + 0.1f * view_dir);
		// mediump float3 fix_normal = normalize(normalWorld + 0.1f * view_dir);
		// mediump float fix_nol = saturate(dot(fix_normal, light_dir_ndl));
		// mediump float light_view_dir = transform(light_dir_ndl, float3x3(view_mat)).b;
		// mediump float ambient_fix = 0.5f * fix_nol * fix_nol * (0.2f + saturate(light_view_dir + 0.5f));
		// macro(AMBIENT_FIX) out(mediump float ambient_fix)
		// {
		// 	branch("1")
		// 	{
		// 		mediump float ndotl_half = saturate((dot(normalWorld, light_dir_ndl) + 1.0f) * 0.5f);
		// 		mediump float ambient_fix_ = (1.0f - ndotl_half) * saturate(-normalWorld.g + ambient_fix_normal) * AO_color.x * ambient_fix_intensity;
		// 		out(ambient_fix,ambient_fix_);
		// 	}
		// 	branch("0")
		// 	{
		// 		out(ambient_fix,0.0f);
		// 	}
		// };


		// 增加半球光照
		macro(SPHEREAO_ENABLE) out(mediump float3 sky_light,mediump float sky_factor)
		{
			branch("1")
			{
				lowp float sky_factor_ = saturate(normalWorld.g + skylight_smooth) * saturate(lerp(1.0f,(PosLocal.y + normalWorld.g) / 20.0f, sky_light_height)) * sky_light_intensity;
				lowp float3 sky_light_ = sky_factor_ * sky_light_color.rgb * diffuse_color;
				out(sky_light,sky_light_);
				out(sky_factor,saturate(sky_factor_));
			}
			branch("0")
			{
				out(sky_light,float3(0.0f));
				out(sky_factor,0.0f);
			}
		};


		// 增加高度渐变以及垂直范围的变化
		// lowp float3 sky_light = saturate(normalWorld.g  + 0.35f) * sky_light_color.rgb * sky_light_intensity * saturate(lerp(1.0f,PosWorld.y / 20.0f, 0.31f));
		// lowp float3 sky_light = float3(0.0f);

		// SH
		// function calc_env_sh( envSHR, envSHG, envSHB, float3(normal_view.x, normal_view.y,-normal_view.z)) out (mediump float3 ibl_diffuse);
		function calc_env_sh( envSHR, envSHG, envSHB, normalWorld) out (mediump float3 ibl_diffuse1);
		mediump float3 ibl_diffuse = ibl_diffuse1 * 3.0f; //环境光的sh与高光比为3:130;

		// 环境光调整色计算
		// lowp float3 env_factor_color = lerp(env_shadow_factor.rgb ,float3(1.0f), float3(NdotL_diff));
		lowp float3 env_factor_color = env_shadow_factor.rgb * (1.0f) + NdotL_diff * gi_color * 0.5f; 
		// lowp float3 env_factor_color = env_shadow_factor.rgb ; 

		// Final Diffuse
		// 固有色 * (主光源 + 环境光 + 天光) + 补光
		mediump float3 final_diffuse = non_metal_diffuse * ((NdotL_diff) * gi_color + ibl_diffuse * (sky_light + env_factor_color * envir_brightness)) ;

		// —————————————————— ★★★ SPECULAR ★★★—————————————————— 
		mediump float3 spec_color = lerp(diffuse_color.xyz, float3(0.04f), float3(non_metal)); 

		// F
		function F_Schlick(spec_color,VdotH) out (lowp float3 F);	
		// D 
		function D_GGX(ggx_rough, NdotH) out(lowp float D);
		
		// G
		function G_Schlick_Disney(ggx_rough, NdotV, NdotL_spec) out (lowp float G);
		// specular BRDF
		//mediump float3 brdf =  D * spec_color * spec_intensity;

		mediump float3 brdf =  D * F * G  ;

		// Final Specular

		mediump float3 final_specular = brdf * NdotL_spec * gi_color;


		// ——————————————————★★★ IBL ★★★—————————————————— 
		macro(ENVIR_ENABLE) out(mediump float3 final_envir0)
		{
			branch("1") {
				mediump float3 R_rotated_ = reflect(-view_dir, normalWorld);
				function RotationGIDirection(R_rotated_,env_rotation) out(float3 R_rotated);
				function GetEnvirmentColor_panorama (SamplerCubeMap, roughness, R_rotated, 130.0f) out (mediump float3 envir); // 环境光最大强度不改了，再改是猪！
				function EnvBRDFApprox(spec_color, ggx_rough, NdotV, oneminus(NdotL_spec * 0.8f) * envir_fresnel_brightness) out (mediump float3 env_brdf);
				out(final_envir0,  env_brdf * envir * (sky_light + env_factor_color * envir_brightness));
			}
			branch("0") {
				out(final_envir0, diffuse_color * ibl_diffuse * metal * lerp(0.6f, 1.0f, NdotH));
			}
		};
		mediump float3 final_envir = final_envir0;

		// ——————————————————★★★ 自发光 & 半透 ★★★—————————————————— 
		lowp float arufa = diffuse_map_color.a; 
		macro(SELF_BLING) out (mediump float3 final_emissive, lowp float emissive_area){
			branch("1"){
				mediump float3 final_emissive_ = arufa * non_metal_diffuse.rgb;

				out(final_emissive, final_emissive_);
				out(emissive_area, arufa);
				// out(diffuse_alpha, _alpha);
			}
			branch("0"){
				out(final_emissive, float3(0.0f));
				out(emissive_area, 0.0f);
				// out(diffuse_alpha, diffuse_map_color.a);
			}
		};

		lowp float diffuse_alpha = 1.0f; //取消半透明功能


		/////////////////////////////////////////////////////////////////
		// ——————————————————★★★ 最终光照计算 ★★★——————————————————
		/////////////////////////////////////////////////////////////////
		// pbr的最终计算结果 = (漫反射 + 动态光反射 + 环境反射）* 主光颜色 * AO  （IBL也要受主光颜色影响，这样不会出现与主光色调不一致的情况）

		mediump float3 combine_spec = final_specular + final_envir ;
		mediump float3 pbr_light_color =  (final_diffuse + combine_spec) * AO_color;
		mediump float3 result_diff_raw =  pbr_light_color + final_emissive;

				
		function unreal_tonemapping(result_diff_raw, ToneFactor, 0.88f, 0.55f, 0.26f, 0.00f, 0.04f) out(float3 ToneColor_aces);
		
		function Luminance(combine_spec) out (mediump float color_illum);
		lowp float alphchannel = saturate((color_illum)) * clamp(metal, 0.0f, 1.0f)  + emissive_area;
		lowp float4 encode_color_1_ = float4(ToneColor_aces, AlphaMtl);

		lowp float color_average = (encode_color_1_.r + encode_color_1_.g + encode_color_1_.b) / 3.0f;
		lowp float3 encode_color_1 = encode_color_1_.rgb + (encode_color_1_.rgb - float3(color_average)) * sky_factor * sky_light_saturate;

		// —————————————————— diffuse check ———————————————————
		macro(DIFFUSE_CHECK) out(mediump float4 diffuse_check){
			branch("1"){
				out(diffuse_check, diffuse_map_color);
			}
			branch("0"){
				out(diffuse_check, float4(encode_color_1,AlphaMtl));
			}
		};
		
		macro(ROUGHNESS_CHECK) out(lowp float4 final_color1)
		{
			branch ("0") {
				out(final_color1, diffuse_check);
			}
			branch ("1") {
				out(final_color1, float4(ggx_rough,ggx_rough,ggx_rough,1.0f));
			}
		};

		macro(METAL_CHECK) out(lowp float4 final_color2)
		{
			branch ("0") {
				out(final_color2, final_color1);
			}
			branch ("1") {
				out(final_color2, float4(metal,metal,metal,1.0f));
			}
		};

		macro(AO_CHECK) out(lowp float4 final_color3)
		{
			branch ("0") {
				out(final_color3, final_color2);
			}
			branch ("1") {
				out(final_color3, float4(AO_color));
			}
		};


		macro(DISSOLVE_EFFECT) out(lowp float4 dissolve_color)
		{
			branch("1") {
				lowp float4 diss_samp = sample(DissolveTex, UV0.xy);
				lowp float ClipAmount = diss_samp.x - ChangeAmount;
				alphatest("<")(ClipAmount, 0.0f);
				lowp float3 dest = DissolveColor.rgb * ClipAmount * 2.0f / 0.1f;
				lowp float num1 = step(0.1f, ClipAmount);
				lowp float3 dissolve_color_ = num1 * final_color3.xyz + (1.0f - num1) * dest;
				out(dissolve_color, float4(dissolve_color_, final_color3.a));
			}
			branch("0") {
				out(dissolve_color, float4(final_color3));
			}
		};


		
		pixel(float4(dissolve_color));
	}
}

