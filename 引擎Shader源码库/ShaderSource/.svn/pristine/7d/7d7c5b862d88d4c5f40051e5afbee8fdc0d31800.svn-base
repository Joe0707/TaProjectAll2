["VBR shader for DM106"]
pipeline
<
	version = "1.1.2" 
	author = "liuyu/xuzhuoliang" 
	category = "common" 
	company = "netease"
	merge = "1"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\pbr_include_function.spzs)

	["是否启用场景转置"]
	eitheror TRANS_ENABLE;
	macro(TRANS_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["检查AO"]
	eitheror AO_CHECK;
	macro(AO_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查diffuse"]
	eitheror DIFFUSE_CHECK;
	macro(DIFFUSE_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查金属度"]
	eitheror METAL_CHECK;
	macro(METAL_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["检查粗糙度"]
	eitheror ROUGHNESS_CHECK;
	macro(ROUGHNESS_CHECK)
	<
		default = "0"
		customizable = "1"
	>;

	["开启透明漆"]
	eitheror CLEARCOAT_ENABLE;
	macro(CLEARCOAT_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启细节法线"]
	eitheror FIBER_ENABLE;
	macro(FIBER_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启环境反射(ENVIR_ENABLE)"]
	eitheror ENVIR_ENABLE;

	["开启法线贴图(XNORMAL_MAP_ENABLE)"]
	eitheror XNORMAL_MAP_ENABLE;
	
	["补光"]
	eitheror DIR_AMBIENT_ENABLE;

	["开启自发光"]
	eitheror SELF_BLING;

	["接受点光"]
	eitheror POINT_LIGHT_ENABLE;

	// ["开启羽毛反射"]
	// eitheror FUR_COLOR_ENABLE;

	["是否开启Oren-nayar因子"]
	eitheror ORENNAYAR_ENABLE;
	macro(ORENNAYAR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(SHADOW_MAP_ENABLE)
	<
		default = "1"
	>;
	
	macro(POINT_SHADOW_MAP_ENABLE)
	<
		default = "0"
	>;
	
	macro(XNORMAL_MAP_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(ENVIR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(DIR_AMBIENT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SELF_BLING)
	<
		default = "0"
		customizable = "1"
	>;

	macro(POINT_LIGHT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["开启网格闪烁消融"]
	eitheror WEB_SHINING_ENABLE;
	macro(WEB_SHINING_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	// 贴图
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["细节法线遮罩贴图"]
	uniform sampler DetailNormalMask
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;	

	["金属度/sss/光滑度"]
	uniform sampler SamplerRough
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["法线贴图"]
	uniform sampler SamplerNormalMap
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["碳纤维贴图"]
	uniform sampler SamplerNormalMap_fiber
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["各向异性贴图（RG方向，B区域）"]
	uniform sampler SamplerAniso
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["SSS Ramp贴图"]
	uniform sampler sss_ramp
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
		path = "hero\\1001_guhuoniao\\ssslut.png"
	>;

	["KelemenLUT贴图"]
	uniform sampler KelemenLUT
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
		path = "hero\\1001_guhuoniao\\kelemenlut.png"
	>;

	["阴影贴图"]
	uniform highp samplershadow SMAP : SHADOW
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressu = "clamp" 
		addressv = "clamp" 
	>;

	["分开的alpha贴图"]
	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	["非主光源阴影贴图"]
	uniform highp samplershadow SMAP_REST : SHADOW_REST
	<
		artist = "1"
		mag = "POINT"
		mip = "POINT"
		min = "POINT"
		addressu = "linear" 
		addressv = "linear" 
	>;
	
	["Color Ramp贴图"]
	uniform sampler color_ramp
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "repeat"
		lodbias = "-1.0"
	>;

	// —————————————————— PBR调整 ——————————————————
	["手动金属度"]
	uniform lowp float manul_metal
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	
	["手动光滑度"]
	uniform lowp float manul_rough
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	["金属度缩放"]
	uniform lowp float metal_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	["粗糙度缩放"]
	uniform lowp float rough_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	
/*
	["非金属最低灰阶(min_metal_gray)"]
	uniform mediump float min_metal_gray
	<
		uigroup = "1 PBR"
		min = "0.0" 
		max = "10.0" 
		init = "0.003"
	>;
*/

	// —————————————————— 透明漆 ——————————————————
	["Sparkle Colors Scale"]
	uniform mediump float SparkleColorsScale
	<
		uigroup = "透明漆"
		artist = "1"
		init = "64"
	>;

	["透明漆程度ClearCoat"]
	uniform mediump float ClearCoat
	<
		uigroup = "透明漆"
		artist = "1"
		init = "1.0"
		uistep = "1"
		min = "0.0"
		max = "1.0"
	>;
	
	["透明漆粗糙度ClearCoatRoughness"]
	uniform mediump float ClearCoatRoughness
	<
		uigroup = "透明漆"
		artist = "1"
		init = "0.0"
		uistep = "1"
		min = "0.0"
		max = "1.0"
	>;

	// —————————————————— 细节法线 ——————————————————
	["细节法线尺寸Fiber Scale"]
	uniform mediump float FiberScale
	<
		uigroup = "细节法线"
		artist = "1"
		init = "30"
	>;

	["细节法线强度Fiber Strength"]
	uniform mediump float FiberStrength
	<
		uigroup = "细节法线"
		artist = "1"
		init = "0.0"
	>;

	["细节法线粗糙度fiber_rough_change"]
	uniform mediump float fiber_rough_change
	<
		uigroup = "细节法线"
		artist = "1"
		init = "0.0"
	>;

	// ——————————————————变色—————————————————————————
	["第一层颜色A"]
	uniform lowp float4 changecolor1
	<
		artist = "1"
		init = "(1.0,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第一层颜色B"]
	uniform lowp float4 changecolor2
	<
		artist = "1"
		init = "(0.5,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第二层颜色A"]
	uniform lowp float4 changecolor3
	<
		artist = "1"
		init = "(1.0,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第二层颜色B"]
	uniform lowp float4 changecolor4
	<
		artist = "1"
		init = "(0.5,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第三层颜色A"]
	uniform lowp float4 changecolor5
	<
		artist = "1"
		init = "(1.0,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第三层颜色B"]
	uniform lowp float4 changecolor6
	<
		artist = "1"
		init = "(0.5,1.0,1.0,1.0)"
		color = "1"
		uigroup = "变色"
	>;

	["第一层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	uniform lowp float4 change_adj1
	<
		artist = "1"
		init = "(0,0,0,0)"
		max = "1.0"
		min = "-1.0"
		uigroup = "变色"
	>;

	["第二层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	uniform lowp float4 change_adj2
	<
		artist = "1"
		init = "(0,0,0,0)"
		max = "1.0"
		min = "-1.0"
		uigroup = "变色"
	>;

	["第三层(A金属度、A粗糙度、B金属度、B粗糙度)"]
	uniform lowp float4 change_adj3
	<
		artist = "1"
		init = "(0,0,0,0)"
		max = "1.0"
		min = "-1.0"
		uigroup = "变色"
	>;	

	["曝光度"]
	uniform mediump float expose_bias
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "1.0"
		uigroup = "1 环境光"
	>;

	["天光颜色"]
	uniform lowp float4 sky_light_color
	<
		uigroup = "1 环境光"
		artist = "0" 
		color = "1"
		init = "(0.5569,0.7412,1,1)"
	>;

	["天光强度"]
	uniform float sky_light_intensity
	<
		uigroup = "1 环境光"
		artist = "0" 
		init = "1.0"
	>;
	
	// ——————————————————各向异性——————————————————
	
	["抖动偏移值(Anisotropic_offset)"]
	uniform lowp float noise_offset
	<
		uigroup = "各向异性"
		artist = "1" 
		uistep = "0.001"
		min = "0.0" 
		max = "1.0" 
		init = "0.2"
	>;

	["整体偏移值(Anisotropic_offset)"]
	uniform mediump float normal_offset
	<
		uigroup = "各向异性"
		artist = "1" 
		uistep = "0.001"
		min = "-5" 
		max = "5" 
		init = "-0.2"
	>;

	
	// ——————————————————自发光——————————————————
	
	["自发光强度"]
	uniform mediump float emissive_intensity
	<
		uigroup = "风格化"
		artist = "1" 
		uistep = "0.001"
		min = "1.0" 
		max = "10.0" 
		init = "1.0"
	>;
	// ——————————————————DIFFUSE——————————————————

	["漫反射强度"]
	uniform mediump float diffuse_intensity
	<
		init = "1.0"
		max = "5.0"
		min = "0.0"
		uistep = "0.001"
		artist = "0"
		uigroup = "0 漫反射"
	>;

	["角色高度"]
	uniform mediump float char_height
	<
		artist = "1"
		init = "20"
		min = "0"
		uigroup = "风格化"
	>;

	["暗部颜色"]
	uniform lowp float4 dark_color
	<
		uigroup = "风格化"
		artist = "1" 
		color = "1"
		init = "(0.15,0.15,0.15,0.15)"
	>;	

	// ——————————————————自投影——————————————————
	["阴影bias"]
	uniform mediump float shadowmap_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	["阴影采样bias"]
	uniform mediump float shadowmap_uv_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	//————————————————补光——————————————————

	["补光强度"]
	uniform mediump float dir_ambient_intensity
	<
		init = "0.9"
		max = "10.0"
		min = "0.0"
		uistep = "1"
		artist = "1"
		uigroup = "补光"
	>;	

	["补光颜色"]
	uniform lowp float4 dir_ambient
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "补光"
	>;	
	
	["补光位置x"]
	uniform mediump float l_pos_x
	<
		init = "-65"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置y"]
	uniform mediump float l_pos_y
	<
		init = "14"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置z"]
	uniform mediump float l_pos_z
	<
		init = "100"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;

	// ["补光开始"]
	// uniform lowp float da_start
	// <
	// 	init = "0.51"
	// 	artist = "1"
	// 	uigroup = "补光"
	// 	uistep = "0.001"
	// 	max = "1.0"
	// 	min = "0.0"
	// >;	

	// ["补光结束"]
	// uniform lowp float da_end
	// <
	// 	init = "0.66"
	// 	artist = "1"
	// 	uigroup = "补光"
	// 	uistep = "0.001"
	// 	max = "1.0"
	// 	min = "0.0"
	// >;

	// ————————————————环境光————————————————
	
	// ["AO深色区域调整参数"]
	// uniform lowp float AO_slider
	// <
	// 	artist = "1" 
	// 	uistep = "1"
	// 	max = "1"
	// 	min = "0.4"
	// 	init = "1"
	// 	uigroup = "环境光"
	// >;

	["自发光bloom强度"]
	uniform mediump float emissive_bloom
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom强度"]
	uniform mediump float illum_multi
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1"
		max = "10.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom范围"]
	uniform lowp float bloom_range
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.4"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;

	["晶格bloom强度"]
	uniform mediump float webBloom
	<
		uigroup = "bloom"
		init = "1.0"
		artist = "1"
	>;

	// ---------尾巴特效
	["ParallaxHeight"]
	uniform lowp float ParallaxHeight
	<
		uigroup = "FX"
		init = "0.25"
		artist = "1"
	>;
	["TubeControl"]
	uniform lowp float TubeControl
	<
		uigroup = "FX"
		uistep = "0.001"
		init = "1.38"
		max = "2.0"
		min = "-1.0"
		artist = "1"
	>;
	["TubeWidth"]
	uniform lowp float TubeWidth
	<
		uigroup = "FX"
		uistep = "0.001"
		init = "1.0"
		artist = "1"
	>;
	["VertexOffset"]
	uniform lowp float VertexOffset
	<
		uigroup = "FX"
		init = "5.0"
		artist = "1"
	>;
	["EmissIntensity"]
	uniform lowp float EmissIntensity
	<
		uigroup = "FX"
		init = "5.0"
		artist = "1"
	>;
	["SineSpeed"]
	uniform lowp float SineSpeed
	<
		uigroup = "FX"
		uistep = "0.001"
		init = "-2.5"
		max = "5.0"
		min = "-5.0"
		artist = "1"
	>;
	["RampSpeed"]
	uniform lowp float RampSpeed
	<
		uigroup = "FX"
		uistep = "0.001"
		init = "0.15"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;
	["Random"]
	uniform lowp float Random
	<
		uigroup = "FX"
		uistep = "0.001"
		init = "0.20"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;
	// —————————————————— SSS ——————————————————
	["SSS强度"]
	uniform mediump float sss_factor
	<
		init = "1.0"
		artist = "1"
		uistep = "1"
		max = "1"
		min = "0"
		uigroup = "sss"
	>;	

	["SSS中阴影强度"]
	uniform mediump float sss_shadow_factor
	<
		init = "0.5"
		artist = "1"
		uistep = "1"
		max = "1"
		min = "0"
		uigroup = "sss"
	>;

	["poisson uniform values"]
	uniform lowp float4[8] poissonDisk
	<
		init = "(0.0, 0.0, -0.94201624, -0.39906216, 0.94558609, -0.76890725, -0.094184101, -0.92938870, 0.34495938, 0.29387760, -0.91588581, 0.45771432, -0.81544232, -0.87912464, -0.38277543, 0.27676845, 0.97484398, 0.75648379, 0.44323325, -0.97511554, 0.53742981, -0.47373420, -0.26496911, -0.41893023, 0.79197514, 0.19090188, -0.24188840, 0.99706507, -0.81409955, 0.91437590, 0.19984126, 0.78641367)"
	>;
	
	uniform lowp float u_tonemapping_factor
	<
		min = "0.0"
		max = "1.0"
		init = "1.0"
		artist = "1"
	>;

	["ChangeAmount"]
	uniform lowp float ChangeAmount
	<
		uigroup = "3 rim"
		uistep = "0.001"
		init = "0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;
	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	// attribute变量
	attribute float2 texcoord0 : TEXTURE0;
	attribute float2 texcoord1 : TEXTURE1;
	attribute float4 a_color : DIFFUSE;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_tangent : TANGENT;
	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;

	
	// varying变量
	varying mediump float4 UV;
	// varying mediump float2 UV1; // 贴花的uv
	// varying mediump float2 UV2; // 拉丝的uv
	// varying mediump float v_char_height; 
	varying mediump float4 PosWorld;	
	varying mediump float4 pos_local;
	varying lowp float3 v_TangentWorld;
	varying lowp float3 v_BinormalWorld;
	varying lowp float3 v_NormalWorld;
	varying lowp float3 GiLightColor;
	varying highp float4 PosLightProj;
	
	varying mediump float4 v_light_proj_pos;
	varying mediump float4 v_light_proj_pos2;
	uniform mediump float4 u_shadowmap_info: SHADOW_INFO;
	uniform mediump float2 shadow_bias_factor
	<
		// ios(0.002, 0.0002)
		// 其他(0.004, 0.001)
		init = "(0.004, 0.001)"
	>;

	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	
	uniform mediump float FrameTime: FRAME_TIME;
	
	uniform mediump float4x4 texTrans0 : TEXTURE_TRANS0;
	uniform mediump float4x4 lightmapTrans : TEXTURE_TRANS1;
	
	uniform mediump float4 LightMapScale : LIGHT_MAP_SCALE;
	uniform highp float4x4 lv : LIGHT_VIEW;
	
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] DirLightAttr : DIR_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] ShadowLightAttr : SHADOW_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] PointLightAttrs : POINT_LIGHT_ATTR;

	uniform mediump float4 camera_pos : CAMERA_POSITION;
	
	uniform mediump float4x4 inverse_view : INV_VIEW;
	
	uniform mediump float4x4 view_mat : VIEW;
	
	uniform highp float4x4 lvp : LIGHT_VIEW_PROJ;
	uniform highp float4x4 lvp2 : LIGHT_VIEW_PROJ2;
	uniform mediump float4 ZBufferParams: ZBUFFER_PARAMS;
	
	uniform highp float3 light_direction:LIGHT_DIRECTION;
	uniform highp float3 light_direction2:LIGHT_DIRECTION2;
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;

	uniform lowp float4 FogColor : FOG_COLOR;
	uniform mediump float4 FogInfo : FOG_INFO;
	uniform highp float4x4 proj : PROJECTION;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				//function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				// out(vec, pos1);
				// out(nor, nor1);
				out(vec, a_position);
				out(nor, a_normal);
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};

		
		highp float4 position = vec;
		highp float4 normal = nor;
		
		mediump float sinwave_factor = sin((texcoord1.x + texcoord1.y * Random) * 6.28318f + SineSpeed * FrameTime);
		mediump float sinewave = smoothstep(TubeControl - TubeWidth, TubeControl + TubeWidth,sinwave_factor);

		highp float4 vertex_offset = float4(normal.xyz * 0.01f * VertexOffset * sinewave,0.0f);
		highp float4 mdlpos = position + vertex_offset;
		//mediump float4 uvxyz = float4(texcoord0.xy, 1.0f, 0.0f) * texTrans0;

		// 计算顶点位置
		highp float4 screen_pos = float4(transform(mdlpos, wvp));
		vertex(screen_pos);
		
		highp float4 pos_world = transform(position, world);
		
		float3x3 worldMat = float3x3(world);
		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
		
		out(UV, float4(texcoord0.xy, texcoord1.xy));
		
		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		out(v_NormalWorld, world_normal);

		// macro(XNORMAL_MAP_ENABLE)
		// {
		// 	branch("1") {
				mediump float3 tangentWorld = float3(normalize(a_tangent.xyz * worldMat));
				highp float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
				mediump float3 binormal_world = cross(tangentWorld, world_normal) * tan_coef;
				out(v_TangentWorld, normalize(tangentWorld));
				out(v_BinormalWorld, normalize(binormal_world));
		// 	}
		// 	branch("0") {
		// 	}
		// };

		macro(SHADOW_MAP_ENABLE)
		{
			branch("1")
			{				
				macro(POINT_SHADOW_MAP_ENABLE)
				{
					branch("1")
					{
						out(v_light_proj_pos, pos_world);
					
					}
					branch("0")
					{
						mediump float4 shadow_light_attr_3 = ShadowLightAttr[3];
						function calc_shadow_info(
                        pos_world,
                        world_normal,
                        lvp,
                        shadow_light_attr_3.xyz)
                    out(
                        highp float2 uv_out,
                        highp float  depth_out,
                        highp float  factor_out
                    );

						// ["边缘光阴影"]
					 //   function calc_shadow_info(
      //                    pos_world,
						//  world_normal,
      //                    lvp2,                
      //                    light_direction2)
      //                out(
      //                    highp float2 uv_out2,
      //                    highp float  depth_out2,
      //                    highp float  factor_out2
      //                );

						out(v_light_proj_pos, float4(uv_out, depth_out, factor_out));
						// out(v_light_proj_pos2, float4(uv_out2, depth_out2, factor_out2));					
					}
				
				};
			}
			branch("0")
			{

			}				
		};
	}
	pixel
	{		
		// —————————————————— 法线 ——————————————————	
		lowp float3 vertex_normal_world = v_NormalWorld;
		mediump float2 uv1 = UV.xy;
		mediump float2 uv2 = UV.zw;

		// 视线方向
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);
		mediump float3x3 tangentTransform = transpose(float3x3(v_TangentWorld,v_BinormalWorld,v_NormalWorld));
		mediump float3 view_dir_tangent = normalize(transform(view_dir,tangentTransform));
		function ParallaxOffsetNetiveY(0.0f,ParallaxHeight * 0.01f,view_dir_tangent) out(float2 parallax_offset);
		mediump float2 uv_main = uv1 + parallax_offset;

		lowp float fiber_mask = 0.0f;
		// normalWorld_org 为原有高模的法线，而normalWorld_fiber 为增加细节的法线
		macro(XNORMAL_MAP_ENABLE) out(lowp float3 normalWorld_org, lowp float emission) {
			branch("1") {
				lowp float3 vertex_TangentWorld = v_TangentWorld;
				lowp float3 vertex_BinormalWorld = v_BinormalWorld;

				lowp float4 norm = sample(SamplerNormalMap, uv_main);
				lowp float2 normOff = norm.xy * 2.0f - float2(1.0f);
				lowp float normOff_z = sqrt(1.0f - dot(normOff,normOff));
				lowp float3 normalWorld_org1 = normalize(vertex_TangentWorld * normOff.x + vertex_BinormalWorld * normOff.y + normOff_z * vertex_normal_world);
				out(normalWorld_org, normalWorld_org1);
				out(emission, norm.z);
			}	
			branch("0") {
				out(normalWorld_org, vertex_normal_world);
				out(emission, 1.0f);
			}
		};

		// —————————————————— 自投影(shadow_fac计算) ——————————————————	

		// —————————————————— 自投影(shadow_fac计算) ——————————————————	
		macro(SHADOW_MAP_ENABLE) out (mediump float shadow_fac_)
		{
			branch("1") {
				macro(POINT_SHADOW_MAP_ENABLE) out(mediump float fac)
				{
					branch("0")
					{
						function calc_shadowmap_factor1(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
							out(lowp float factor);
							// 自投影的浓度为0.8
						// out(shadow_fac_, lerp(1.0f,factor,0.8f));
						// ["边缘光"]
						// function calc_shadowmap_factor1(SMAP_REST, v_light_proj_pos2, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
						// out(lowp float factor2);
						// float final_factor = 1.0f - (1.0f - factor) * (1.0f - factor2);
						// out(fac, final_factor);
						out(fac, factor);
						
					}
					branch("1")
					{	
						mediump float4 shadow_light_attr_3 = ShadowLightAttr[3];
						function calc_point_shadow_info(
							v_light_proj_pos,
							vertex_normal_world,
							lvp,
							lv,
							shadow_light_attr_3.xyz)
						out(
							highp float2 uv_out,
							highp float  depth_out,
							highp float  factor_out
						);
						float4 cal_pos = float4(uv_out, depth_out, factor_out);
						function calc_shadowmap_factor(SMAP, cal_pos, u_shadowmap_info, shadow_bias_factor)
							out(lowp float factor);
							// 自投影的浓度为0.8
						// out(shadow_fac_, lerp(1.0f,factor,0.8f));
						out(fac, factor);							
					}
				};
				out(shadow_fac_, fac);

			}
			branch("0") {
				out(shadow_fac_, 1.0f);
			}
		};
		// ——————————————————★★★ 基础设置 ★★★——————————————————	
		// 采样贴图
		lowp float4 diffuse_map_color = sample(Tex0, uv_main);

		// macro(DIFFUSE_ALPHA_SEPARATE) out(lowp float4 diffuse_map_color)
		// {
		// 	branch("1")
		// 	{
		// 		lowp float4 separateColor = sample(sepAlphaTex, uv_main);
		// 		out(diffuse_map_color, float4(diffuse_map_color_.xyz, separateColor.w));
		// 	}
		// 	branch("0") {
		// 		out(diffuse_map_color, diffuse_map_color_);
		// 	}
		// };

        // lowp float4 pbr_map = sample(SamplerRough, UV0.xy);
		// lowp float metal = saturate(pbr_map.r + metal_multi);
		// lowp float rough = saturate(pbr_map.b + rough_multi);
		lowp float metal = manul_metal;
		lowp float rough = manul_rough;

		// ——————————————————★★★ 光照设置 ★★★——————————————————
		macro(POINT_LIGHT_ENABLE) out(mediump float3 gi_color, mediump float3 light_dir) {
			branch ("1") {
				// 点光颜色
				lowp float4 light_color = ShadowLightAttr[1];
				mediump float4 dir_vector = ShadowLightAttr[3];
				lowp float light_range = dir_vector.w;
				mediump float3 light_dir_ = PosWorld.xyz - dir_vector.xyz; 
				out(light_dir, normalize(light_dir_)); 
				lowp float dist = length(light_dir_);
				lowp float point_light_fac = clamp((light_range - dist) / light_range, 0.0f, 1.0f);
				out(gi_color, lerp(dark_color.rgb, light_color.rgb, float3(point_light_fac * point_light_fac)));
			}
			branch ("0"){
				//平行光颜色
				lowp float4 light_color = ShadowLightAttr[1]; 
				out(gi_color, light_color.xyz); 

				// 光源方向
				mediump float4 light_dir_ = ShadowLightAttr[3];
				out(light_dir, normalize(light_dir_.xyz));
				//mediump float3 light_dir = u_light_scale * normalize(float3(u_light_pos_x, u_light_pos_y, u_light_pos_z));
			}

		};

		lowp float3 light_dir_ndl = normalize(float3(light_dir.x, light_dir.y, light_dir.z));

		// ——————————————————★★★ 常用参数 ★★★——————————————————
				
		lowp float non_metal = 1.0f - metal;

		lowp float3 H = normalize(view_dir - light_dir_ndl);
		mediump float VoH = dot(view_dir, H);
		mediump float VoL = dot(view_dir, -light_dir_ndl);
		mediump float NoV = dot(view_dir, normalWorld_org);
		mediump float VdotH = saturate(VoH);
		mediump float NdotV = saturate(NoV);

		// NdotL
		mediump float NoL = dot(normalWorld_org, -light_dir_ndl);


		// 计算OrenNayarLighting因子
		lowp float ggx_rough = lerp(0.04f, 1.0f,rough);
		lowp float ggx_rough_coat = lerp(0.04f, 1.0f, ClearCoatRoughness);

		macro(ORENNAYAR_ENABLE) out(lowp float orennayar_factor) {
			branch ("0") {
				out(orennayar_factor,1.0f);
			}
			branch ("1") {
				float a = ggx_rough * ggx_rough;
				float s = a;// / ( 1.29 + 0.5 * a );
				float s2 = s * s;
				float VoL1 = 2.0f * VoH * VoH - 1.0f;		// double angle identity
				float Cosri = VoL1 - NoV * NoL;
				float C1 = 1.0f - 0.5f * s2 / (s2 + 0.33f);
				condition(Cosri) out(float C3) {
					branch ("%0% >= 0.0") {
						out(C3, min(1.0f,NoL/max(0.01f, NoV)));
					}
					default {
						out(C3, 1.0f);
					}
				};
				float C2 = 0.45f * s2 / (s2 + 0.09f) * Cosri * C3;
				out(orennayar_factor, clamp(( C1 + C2 ) * ( 1.0f + ggx_rough * 0.5f), 0.0f, 5.0f));
			}
		};

		["计算暗部补充光线"]
		// mediump float3 fix_normal = normalize(vertex_normal_world + 0.1f * view_dir);
		mediump float3 fix_normal = normalize(normalWorld_org + 0.1f * view_dir);
		mediump float fix_nol = saturate(dot(fix_normal, light_dir_ndl));
		mediump float light_view_dir = transform(light_dir_ndl, float3x3(view_mat)).b;
		mediump float ambient_fix = 0.5f * fix_nol *fix_nol * (0.2f + saturate(light_view_dir + 0.5f));
		
		mediump float NdotL_spec = min(saturate(NoL),shadow_fac_);// 此为specular的nol

		lowp float NdotL_diff = NdotL_spec * orennayar_factor;

		// ——————————————————★★★ DIFFUSE ★★★—————————————————— 
		mediump float3 diffuse_color = diffuse_map_color.xyz * diffuse_map_color.xyz * diffuse_intensity; 
				

		// 金属度计算过后的漫反射光强
        mediump float3 non_metal_diffuse = non_metal * diffuse_color; 

		// 方向环境光 		
		macro (DIR_AMBIENT_ENABLE) out (mediump float3 dir_ambient_color)
		{
			branch("1"){
				mediump float3x3 inverse_view_mat = float3x3(inverse_view);
				//mediump float dir_ambient_fac = clamp(-normalWorld.y, 0.0f, 1.0f);
				mediump float3 ambient_dir = normalize(float3(l_pos_x, l_pos_y, l_pos_z) * inverse_view_mat);
				lowp float dir_ambient_fac_ = clamp(dot(normalWorld_org, ambient_dir), 0.0f,1.0f);
				//lowp float dir_ambient_fac__ = smoothstep(da_start, da_end, dir_ambient_fac_);
				// lowp float3 dir_ambient_fac = lerp(diffuse_color, float3(dir_ambient_fac_), float3(0.7f));
				//out(dir_ambient_color, dir_ambient.rgb * dir_ambient_fac * dir_ambient_intensity * (0.5f * non_metal + 0.5f));	
				out(dir_ambient_color, dir_ambient.rgb * dir_ambient_fac_ * dir_ambient_intensity * (0.5f * non_metal + 0.5f));	
			}
			branch("0"){
				out(dir_ambient_color, float3(0.0f));	

			}
		};

		// AO
		// macro(ENVIR_ENABLE) out(lowp float3 AO_color) {
		// 	branch ("1") {
		// 		lowp float _AO_adjust = lerp(1.0f, occlusion ,NdotV);
		// 		out(AO_color, float3(lerp(_AO_adjust, occlusion,2.0f * saturate(0.5f - occlusion))));
		// 	}
		// 	branch ("0") {
		// 		out(AO_color, float3(1.0f));
		// 	}
		// };
		lowp float3 AO_color = float3(1.0f);
		// 增加半球光照
		// lowp float3 sky_light = saturate(normalWorld.g  + skylight_smooth) * sky_light_color.rgb * sky_light_intensity * saturate(lerp(1.0f,PosWorld.y / 20.0f, sky_light_height));
		// 增加高度渐变以及垂直范围的变化
		// lowp float3 sky_light = saturate(normalWorld_org.g  + 0.35f) * sky_light_color.rgb * sky_light_intensity * saturate(lerp(1.0f,PosWorld.y / 20.0f, 0.31f));
		lowp float3 sky_light = float3(0.0f);

		// SH
		// function calc_env_sh( envSHR, envSHG, envSHB, float3(normal_view.x, normal_view.y,-normal_view.z)) out (mediump float3 ibl_diffuse);
		function calc_env_sh( envSHR, envSHG, envSHB, normalWorld_org) out (mediump float3 ibl_diffuse1);
		mediump float3 ibl_diffuse = ibl_diffuse1 * 3.0f; //环境光的sh与高光比为3:130;

		// 环境光调整色计算
		// lowp float3 env_factor_color = lerp(env_shadow_factor.rgb ,float3(1.0f), float3(NdotL_diff));
		lowp float3 env_factor_color = env_shadow_factor.rgb * (1.0f + ambient_fix) + NdotL_diff * gi_color * 0.5f; 

		// Final Diffuse
		// 固有色 * (主光源 + 环境光 + 天光) + 补光
		mediump float3 final_diffuse = non_metal_diffuse * ((NdotL_diff + ambient_fix) * gi_color  + ibl_diffuse * (sky_light + env_factor_color * envir_brightness)) + dir_ambient_color;

		// —————————————————— ★★★ SPECULAR ★★★—————————————————— 
		mediump float3 spec_color = lerp(diffuse_color.xyz, float3(0.04f), float3(non_metal));
		
		mediump float NoH = dot(normalWorld_org, H);
		mediump float NdotH = saturate(NoH);

		mediump float NdotH_fiber = 0.0f;
		mediump float NdotV_fiber = NdotV;


		// specular BRDF
		// F
		function F_Schlick(spec_color,VdotH) out (lowp float3 F);
		// D 
		function D_GGX(ggx_rough, NdotH) out(lowp float D);
		// G
		function G_Schlick_Disney(ggx_rough, NdotV, NdotL_spec) out (lowp float G);
		mediump float3 brdf_fiber =  D * F * G;

		// mediump float3 final_specular_fiber = brdf_fiber * NdotL_spec * gi_color;

		// 增加clear coat计算额外的一层高光
		function F_Schlick(float3(0.04f),VdotH) out (lowp float3 F_coat);	
		function D_GGX(ggx_rough_coat, NdotH) out(lowp float D_coat);
		function G_Schlick_Disney(ggx_rough_coat, NdotV, NdotL_spec) out (lowp float G_coat);
		mediump float3 brdf_coat =  D_coat * F_coat * G_coat;

		// Final Specular
		mediump float3 final_specular = (brdf_fiber * (1.0f - ClearCoat * 0.5f) + brdf_coat * ClearCoat) * NdotL_spec * gi_color;

		// ——————————————————★★★ IBL ★★★—————————————————— 

		macro(ENVIR_ENABLE) out(mediump float3 R_rotated_org) {
			branch ("1") {
				mediump float3 R = reflect(-view_dir, normalWorld_org);
				out(R_rotated_org, R);
			}
			branch("0"){
				out(R_rotated_org, float3(0.0f));
			}
		};

		macro(ENVIR_ENABLE) out(mediump float3 final_envir)
		{
			branch("1") {
				function GetEnvirmentColor_panorama (SamplerCubeMap, ggx_rough, R_rotated_org, 130.0f) out (mediump float3 envir);
				function EnvBRDFApprox(spec_color, ggx_rough, NdotV, oneminus(NdotL_spec * 0.8f) * envir_fresnel_brightness) out (mediump float3 env_brdf);
				mediump float3 envir_fiber = envir;
				mediump float3 env_brdf_fiber = env_brdf;

				// 开启clear coat额外计算一层
				float F0 = 0.04f;
				float Fc = pow( 1.0f - NdotV, 5.0f);
				float F1 = (Fc + (1.0f - Fc) * F0 )* ClearCoat;
				float LayerAttenuation = (1.0f - F1);

				function GetEnvirmentColor_panorama (SamplerCubeMap, ggx_rough_coat, R_rotated_org, 130.0f) out (mediump float3 envir_coat);
				function EnvBRDFApprox(float3(0.04f), ggx_rough_coat, NdotV, oneminus(NdotL_spec * 0.8f) * envir_fresnel_brightness) out (mediump float3 env_brdf_coat);
				mediump float3 final_envir1 = (env_brdf_fiber * envir_fiber * LayerAttenuation + envir_coat * env_brdf_coat * ClearCoat) * env_factor_color * (sky_light + float3(envir_brightness));
				// out(inner_spec1,  inner_spec2);

				out(final_envir,  final_envir1);
			}
			branch("0") {
				out(final_envir, lerp(ibl_diffuse * ibl_diffuse * 0.1f,diffuse_color * ibl_diffuse,float3(metal)));
				// out(inner_spec, 1.0f);
			}
		};

		// ——————————————————★★★ 自发光 & 半透 ★★★—————————————————— 
		// lowp float arufa = diffuse_map_color.a; 
		// macro(SELF_BLING) out (mediump float3 final_emissive, lowp float emissive_area){
		// 	branch("1"){
		// 		mediump float3 final_emissive_ = arufa * emissive_intensity * non_metal_diffuse.rgb;

		// 		out(final_emissive, final_emissive_);
		// 		out(emissive_area, arufa);
		// 		// out(diffuse_alpha, _alpha);
		// 	}
		// 	branch("0"){
		// 		out(final_emissive, float3(0.0f));
		// 		out(emissive_area, 0.0f);
		// 		// out(diffuse_alpha, diffuse_map_color.a);
		// 	}
		// };
		lowp float emissive_area = emission;
		mediump float sinwave_factor = sin((uv2.x + uv2.y * Random) * 6.28318f + SineSpeed * FrameTime);
		lowp float sinewave = smoothstep(TubeControl - TubeWidth, TubeControl + TubeWidth,sinwave_factor);

		mediump float2 rampuv = float2(uv2.x + FrameTime * RampSpeed,0.5f);
		lowp float4 rampcolor = sample(color_ramp,rampuv);

		lowp float4 fx_emiss_color = emission * EmissIntensity * rampcolor * sinewave;
		lowp float3 final_emissive = fx_emiss_color.rgb;

		lowp float diffuse_alpha = 1.0f; //取消半透明功能


		/////////////////////////////////////////////////////////////////
		// ——————————————————★★★ 最终光照计算 ★★★——————————————————
		/////////////////////////////////////////////////////////////////
		// pbr的最终计算结果 = (漫反射 + 动态光反射 + 环境反射）* 主光颜色 * AO  （IBL也要受主光颜色影响，这样不会出现与主光色调不一致的情况）

        mediump float3 combine_spec = final_specular + final_envir;
        mediump float3 pbr_light_color =  (final_diffuse + combine_spec) * AO_color;
		mediump float3 result_diff_raw =  pbr_light_color + final_emissive;
		// mediump float3 final_light_color = AO_color;

		lowp float emissive_bloom1 = emissive_bloom;
		lowp float tmp = bloom_range + illum_multi; // 只是为了美术同学可以调整

		lowp float rim_ = saturate(1.0f - NdotV);

		macro(LEVEL_MIDDLE) out(mediump float3 fresnel_combine)
		{
			branch("1")
			{
				
				macro(WEB_SHINING_ENABLE) out(mediump float3 fresnel_combine0) 
				{
					branch ("0") 
					{
						out(fresnel_combine0,result_diff_raw);
					}
					branch ("1") 
					{
						["网格闪烁消融效果"]
						function web_shining
						(
					burn_max_height, //角色身高
					burn_color01,   //闪烁颜色(较暗)
					burn_color02,	  //闪烁颜色(较亮)
					burn_style,		 //消融方向控制
					PosWorld.xyz,	   //当前像素位置
					(world[3]).xyz,   //角色位置 
					ChangeAmount,	   //消融量
					result_diff_raw   //当前颜色 
						)
						out(lowp float3 final_shining_color, lowp float alphatest01, lowp float alphatest02);

						alphatest("<")(alphatest01, alphatest02);
						out(fresnel_combine0,final_shining_color.rgb);
					}
				};
				
				out(fresnel_combine, fresnel_combine0);
			}
			branch ("0") 
			{
				out(fresnel_combine,result_diff_raw);
			}
		};

		float web_light = dot(abs(fresnel_combine - result_diff_raw), float3(0.3f, 0.59f, 0.11f)); // 网格效果辉光

		function unreal_tonemapping(fresnel_combine, ToneFactor, 0.88f, 0.55f, 0.26f, 0.00f, 0.04f) out(float3 ToneColor_aces);
		lowp float4 encode_color_1_0 = float4(ToneColor_aces, diffuse_alpha * AlphaMtl);

		function LuminanceGamma(combine_spec) out (mediump float color_illum);
		lowp float4 encode_color_1_1 = float4(sqrt(fresnel_combine) / 1.5f, color_illum * clamp(metal+bloom_range, 0.0f, 1.0f) * illum_multi + emissive_area * emissive_bloom1); // 存高光的亮度值
		lowp float4 encode_color_1 = lerp(encode_color_1_1, encode_color_1_0, float4(u_tonemapping_factor)) + float4(0.0f, 0.0f, 0.0f, web_light * webBloom);

		// // —————————————————— diffuse check ———————————————————
		// macro(DIFFUSE_CHECK) out(mediump float4 diffuse_check){
		// 	branch("1"){
		// 		out(diffuse_check, diffuse_map_color);
		// 	}
		// 	branch("0"){
		// 		out(diffuse_check, float4(encode_color_1));
		// 	}
		// };
		
		// macro(ROUGHNESS_CHECK) out(lowp float4 final_color1)
		// {
		// 	branch ("0") {
		// 		out(final_color1, diffuse_check);
		// 	}
		// 	branch ("1") {
		// 		out(final_color1, float4(ggx_rough,ggx_rough,ggx_rough,1.0f));
		// 	}
		// };

		// macro(METAL_CHECK) out(lowp float4 final_color2)
		// {
		// 	branch ("0") {
		// 		out(final_color2, final_color1);
		// 	}
		// 	branch ("1") {
		// 		out(final_color2, float4(metal,metal,metal,1.0f));
		// 	}
		// };

		// macro(AO_CHECK) out(lowp float4 final_color3)
		// {
		// 	branch ("0") {
		// 		out(final_color3, final_color2);
		// 	}
		// 	branch ("1") {
		// 		out(final_color3, float4(occlusion));
		// 	}
		// };

		pixel(float4(encode_color_1));
		 // pixel(float4(NdotL_eye));
		 //pixel(float4(encode_color, alpha_fresnel * diffuse_alpha * AlphaMtl));
		//pixel(float4(float3(normalWorld), 1.0f));
	}
}

