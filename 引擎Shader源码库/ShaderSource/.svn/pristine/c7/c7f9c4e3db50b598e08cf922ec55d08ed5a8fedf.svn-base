["turbulence model"]
pipeline
<
	version = "1.0.0"
	author = "ly"
	company = "Netease"
	techinque = "TShader"
	zenable = "0"
>
{	
	["使用裁剪平面"]
	eitheror CLIPPLANE_ENABLE;
	macro(CLIPPLANE_ENABLE)
	<  
		default = "0"
		export = "1"
	>;

	// attribute
	attribute float4 a_position: POSITION
	<
		instance = "0" // 逐实例还是逐顶点？
	>;
	attribute float4 a_diffuse: DIFFUSE;// 顶点色
	attribute float4 a_texture0: TEXTURE0;
	attribute float4 texcoord4 : TEXTURE4;
    attribute float4 texcoord5 : TEXTURE5;
    attribute float4 texcoord6 : TEXTURE6;
    attribute float4 texcoord7 : TEXTURE7;

	// uniform
	["wvp变换"]
	uniform highp float4x4 wvp: WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform highp float4x4 view : VIEW;
	uniform highp float4x4 u_view_poj:VIEW_PROJECTION;


	uniform mediump float4x4 texTrans0 : TEXTURE_TRANS0;

	uniform lowp float alphaRef : ALPHA_REF;

	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;


	["漫反射贴图"]
	uniform sampler diffuse: DIFFUSE
	<
		artist = "1"
		mip = "linear"
		min = "linear"
		mag = "linear"
		addressu = "wrap"
		addressv = "wrap"

	>;
	["alpha通道 贴图"]
    uniform sampler sepAlphaTex:DIFFUSE_ALPHA
    <
    >;
	["偏移贴图1"]
	uniform sampler turbulence1
	<
		artist = "1"
		mip = "linear"
		min = "linear"
		mag = "linear"
		addressu = "wrap"
		addressv = "wrap"
	>;
	["偏移贴图2"]
	uniform sampler turbulence2
	<
		artist = "1"
		mip = "linear"
		min = "linear"
		mag = "linear"
		addressu = "wrap"
		addressv = "wrap"
	>;
	["vx_vy_scale1"]
	uniform float3 vx_vy_scale1
	<
		artist = "1"
		init = "(0.0, 0.0, 1.0)"
	>;
	["vx_vy_scale2"]
	uniform float3 vx_vy_scale2
	<
		artist = "1"
		init = "(0.0, 0.0, 1.0)"
	>;

	["变色"]
	uniform float4 Alpha
	<
		artist = "1"
		color = "1"
		init = "(1.0, 1.0, 1.0, 1.0)"
	>;

	["振幅1"]
	uniform float amplitude1
	<
		artist = "1"
		min = "0.0"
		max = "10.0"
		init = "0.1"
	>;

	["振幅2"]
	uniform float amplitude2
	<
		artist = "1"
		min = "0.0"
		max = "10.0"
		init = "0.1"
	>;

	uniform mediump float time: FRAME_TIME;
	uniform mediump float frame_rate
	<
		init = "1.0"
	>;

    uniform highp float4 u_clipplane1
    <
        init = "(0.0, 0.0, 0.0, 0.0)"
    >;
    uniform highp float4 u_clipplane2
    <
        init = "(0.0, 0.0, 0.0, 0.0)"
    >;
    uniform highp float soft_edge_width
    <
    	init = "10.0"
    >;
	// varying
	varying mediump float4 v_texture0;
	varying mediump float2 v_texture1;
	varying mediump float2 v_texture2;

	varying lowp float4 Color;
	varying highp float4 v_pos_world;

	vertex
	{
		/*highp float4 position = a_position;

		["wvp变换"]
		highp float4 pos = transform(position, wvp);
		vertex(pos);*/
		["世界空间矩阵计算"]
        function get_inst_world_mat(
            texcoord5, 
            texcoord6, 
            texcoord7, 
            world)out(highp float4x4 real_world);
        highp float4 pos_world = transform(a_position, real_world);
        highp float4 screen_pos = transform(pos_world, u_view_poj);
	    vertex(screen_pos);

		out(v_texture0, float4(a_texture0.xy, 1.0f, 0.0f) * texTrans0);
		out(v_texture1, a_texture0.xy * vx_vy_scale1.z + vx_vy_scale1.xy * time * frame_rate);
		out(v_texture2, a_texture0.xy * vx_vy_scale2.z + vx_vy_scale2.xy * time * frame_rate);
		out(Color, a_diffuse);

		macro(CLIPPLANE_ENABLE)
		{
			branch("1")
			{
				out(v_pos_world, pos_world);
			}
			branch("0")
			{}
		};
	}

	pixel
	{	
		lowp float4 tex1 = sample(turbulence1, v_texture1.xy) - float4(0.5f);
		lowp float4 tex2 = sample(turbulence2, v_texture2.xy) - float4(0.5f);
		mediump float2 newUV = v_texture0.xy + tex1.xy * float2(amplitude1) + tex2.xy * float2(amplitude2);
		lowp float4 texColor0 = sample(diffuse, newUV);

		macro(DIFFUSE_ALPHA_SEPARATE) out (lowp float4 color_out){
            branch("1"){
            	lowp float4 sep_color = sample(sepAlphaTex, newUV.xy);
                out(color_out, float4(texColor0.xyz, sep_color.w));
            }
            branch("0")
            {
                out(color_out, texColor0);
            }
        };

        // 裁剪平面
        macro(CLIPPLANE_ENABLE) out(lowp float clipAlpha)
        {
            branch("1")
            {
                highp float2 p1_1 = u_clipplane1.xy;
                highp float2 p2_1 = u_clipplane1.zw;
                function bcross(p1_1, p2_1, v_pos_world.xz, soft_edge_width) out(highp float t_value1);
                highp float2 p1_2 = u_clipplane2.xy;
                highp float2 p2_2 = u_clipplane2.zw;
                function bcross(p1_2, p2_2, v_pos_world.xz, soft_edge_width) out(highp float t_value2);

				out(clipAlpha, t_value1 * t_value2);
            }
            branch("0")
            {
                out(clipAlpha, 1.0f);
            }
        };

        lowp float4 _result = color_out * Color *  Alpha * 2.0f;
        lowp float4 result = float4(_result.xyz, _result.w * AlphaMtl * clipAlpha);

		pixel(result);
	}
}
