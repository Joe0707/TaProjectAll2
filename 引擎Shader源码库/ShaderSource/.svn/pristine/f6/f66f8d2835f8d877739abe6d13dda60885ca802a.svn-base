["bingyong spl2"]

pipeline
<
	version = "1.0.0" 
	author = "xuzhuoliang" 
	category = "common" 
	company = "netease"
  	merge = "1"
>
{
// 宏
  
	["开启变身贴图"]
	eitheror CHANGE_DIFFUSE_ENABLE;
	macro(CHANGE_DIFFUSE_ENABLE)
	<  
		default = "1"
		customizable = "1"
	>;

  
	["开启溶解变身"]
	eitheror DISSOLVE_CHANGE_DIFFUSE;
	macro(DISSOLVE_CHANGE_DIFFUSE)
	<  
		default = "1"
		customizable = "1"
	>;

	
// 贴图
	
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
	>;
	
	["变身贴图"]
	uniform sampler SamplerChangediffuse
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
		path = "hero\\1002_bingyong\\1002_sp2.tga"
	>;

	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_color : DIFFUSE;
	
	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 wv: WORLD_VIEW;
	uniform highp float4x4 world : WORLD;
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;
	
	["溶解变身程度"]
	uniform float ChangeAmount
	<
		uigroup = "2 溶解"
		artist = "1"
		min = "0.0"
		max = "1.0"
		init = "0.0"
		uistep = "0.1"
	>;

	["溶解变身叠加色"]
	uniform mediump float4 change_line_color
	<
		uigroup = "2 溶解"
		artist = "0"
		color = "1"
		init = "1.0,0.56,0.25,1.0"
	>;

	["溶解叠加色宽度"]
	uniform  float change_line_scale
	<
		uigroup = "2 溶解"
		artist = "0"
		uistep = "1"
		min = "0.0"
		max = "0.1"
		init = "0.02"
	>;	

	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;


	// varying变量
	varying mediump float2 UV0;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				out(vec, pos1);
				out(nor, nor1);
				
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};
		
		highp float4 position = vec;	
		highp float4 pos = transform(position, wvp);
		vertex(pos);
		out(UV0, texcoord0.xy);
    }

	pixel
	{

		lowp float4 texture1 = sample(Tex0,UV0.xy);

		macro(CHANGE_DIFFUSE_ENABLE) out(lowp float4 diffuse_map_color)
		 {
			branch ("1") {
				lowp float4 texture2 = sample(SamplerChangediffuse,UV0.xy);
				lowp float texture2_ = (0.299f * texture1.x + 0.587f * texture1.y + 0.114f * texture1.z) * texture2.g * 2.0f;
				mediump float4 diffuse_changed = float4(texture2_);
				macro(DISSOLVE_CHANGE_DIFFUSE) out(float changevalue,float changeline)
				 {
					branch ("1") {
						lowp float changevalue1 = smoothstep(ChangeAmount,ChangeAmount + change_line_scale,texture2.r);
						lowp float changevalue2 = 1.0f-smoothstep(ChangeAmount - change_line_scale,ChangeAmount,texture2.r);
						out(changevalue, changevalue1);
						out(changeline,saturate(1.0f - changevalue1 - changevalue2));
					}
					branch ("0") {
						lowp float4 diffuse_ori = float4(0.0f,0.0f,0.0f,0.0f);
						out(changevalue, 0.0f);
						out(changeline,0.0f);
					}
				};
				lowp float4 diffuse_change = lerp(diffuse_changed,texture1,float4(changevalue)) + change_line_color * changeline * 2.0f;
				out(diffuse_map_color,diffuse_change);
			}

			branch ("0") {
				out(diffuse_map_color, texture1);
			}
		};
		
		macro(DIFFUSE_ALPHA_SEPARATE) out (lowp float alpha)
		{
		  branch("1") {
			lowp float4 separateColor = sample(sepAlphaTex, UV0.xy);
			out(alpha, separateColor.w);
		  }
		  branch("0") {
			out(alpha, diffuse_map_color.a);
		  }
		};
		
		pixel(float4(diffuse_map_color.xyz, alpha * AlphaMtl));
	}
}
