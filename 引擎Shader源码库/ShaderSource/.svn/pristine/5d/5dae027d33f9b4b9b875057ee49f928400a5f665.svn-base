["VBR shader for DM106"]
pipeline
<
	version = "1.1.2" 
	author = "liuyu/xuzhuoliang" 
	category = "common" 
	company = "netease"
	merge = "1"
	stencilenable = "1"
	stencilmask = "0"
	stencilwritemask = "255"
	stencilref = "0"
	stencilfunc= "1"
	stencilfail = "Replace"
	zfail = "Replace"
	stencilpass = "Replace"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\common_hero_pbr_buff_common.spzs)
	include(shader\\including\\pbr_include_function.spzs)

	["是否启用场景转置"]
	eitheror TRANS_ENABLE;
	macro(TRANS_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;
	

	["开启特效材质"]
	eitheror FX_ENABLE;
	macro(FX_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	["开启星星闪烁"]
	eitheror STAR_ENABLE;
	macro(STAR_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(DIR_AMBIENT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["是否溶解"]
	eitheror DISSOLVE_EFFECT;
	macro(DISSOLVE_EFFECT)
	<  
		default = "0"
		customizable = "1"
	>;

	["遮罩(R发光,G星空,B发光肌理)"]
	uniform sampler ComposeMaskTex
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["流光贴图"]
	uniform sampler EmissTex
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
		path = "common\\textures\\emissnoise.png"
	>;

	["Ramp贴图"]
	uniform sampler _RampMap
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
		path = "common\\textures\\colorramp01.png"
	>;

	["宇宙星空贴图"]
	uniform sampler SpaceTex
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
		path = "common\\textures\\space_tex.png"
	>;

	["星闪贴图"]
	uniform sampler StarTex
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
		path = "common\\textures\\star_tex_nopack.png"
	>;

	["阴影贴图"]
	uniform highp samplershadow SMAP : SHADOW
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressu = "clamp" 
		addressv = "clamp" 
	>;

	["特殊效果贴图"]
	uniform sampler BuffTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		// path = "fx\\texture\\effect\\fire_buff.png"// 燃烧贴图
		// path = "fx\\texture\\noise\\noise_yd_26.tga"// 金身贴图
		// path = "fx\\texture\\noise\\noise_yd_26.tga" //灵体贴图
		// path = "fx\\texture\\effect\\dissolve.png" //溶解贴图
		// path = "fx\\texture\\effect\\petrify_buff.png" //石化贴图
	>;
	
	// —————————————————— PBR调整 ——————————————————
	["手动金属度"]
	uniform lowp float manul_metal
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	
	["手动光滑度"]
	uniform lowp float manul_rough
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	["金属度缩放"]
	uniform lowp float metal_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	["粗糙度缩放"]
	uniform lowp float rough_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;

	["曝光度"]
	uniform mediump float expose_bias
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "1.0"
		uigroup = "1 环境光"
	>;
	
	
	// ——————————————————DIFFUSE——————————————————

	["角色高度"]
	uniform mediump float char_height
	<
		artist = "1"
		init = "20"
		min = "0"
		uigroup = "风格化"
	>;

	// ——————————————————自投影——————————————————
	["阴影bias"]
	uniform mediump float shadowmap_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	["阴影采样bias"]
	uniform mediump float shadowmap_uv_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	//————————————————补光——————————————————

	["补光强度"]
	uniform mediump float dir_ambient_intensity
	<
		init = "0.9"
		max = "10.0"
		min = "0.0"
		uistep = "1"
		artist = "1"
		uigroup = "补光"
	>;	

	["补光颜色"]
	uniform lowp float4 dir_ambient
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "补光"
	>;	
	
	["补光位置x"]
	uniform mediump float l_pos_x
	<
		init = "-65"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置y"]
	uniform mediump float l_pos_y
	<
		init = "14"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置z"]
	uniform mediump float l_pos_z
	<
		init = "100"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	
	["自发光强度"]
	uniform mediump float emissive_intensity
	<
		init = "1.0"
		artist = "1"
	>;
	["自发光bloom强度"]
	uniform mediump float emissive_bloom
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom强度"]
	uniform mediump float illum_multi
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1"
		max = "10.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom阈值"]
	uniform lowp float bloom_threshold
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1.0"
		max = "5.0"
		min = "-1.0"
		artist = "1"
	>;
	["bloom范围"]
	uniform lowp float bloom_range
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;

	// 特效

	["发光肌理控制"]
	uniform mediump float3 _Rim_Control
	<
		uigroup = "特效"
		init = "(0.0,0.5,0.0)"
		artist = "1"
	>;
	["边缘流光控制"]
	uniform mediump float3 _Emiss_Fresnel_Control
	<
		uigroup = "特效"
		init = "(0.0,1.5,2.0)"
		artist = "1"
	>;
	["流光Tilling"]
	uniform mediump float2 _EmissTilling
	<
		uigroup = "特效"
		init = "(2.0,2.0)"
		artist = "1"
	>;
	["流光速度"]
	uniform mediump float2 _EmissSpeed
	<
		uigroup = "特效"
		init = "(-0.1,0.2)"
		artist = "1"
	>;
	["流光扭曲"]
	uniform mediump float _Emiss_ParallaxHeight
	<
		uigroup = "特效"
		artist = "1"
		init = "-50"
	>;
	["_RampOffset"]
	uniform mediump float _RampOffset
	<
		uigroup = "特效"
		artist = "1"
		init = "0.0"
		max = "1.0"
		min = "-1.0"
		uistep = "0.001"
	>;
	["发光亮度"]
	uniform mediump float _CombinedRimIntensity
	<
		uigroup = "特效"
		artist = "1"
		init = "1.5"
	>;
	["星云图Tilling"]
	uniform mediump float2 SpaceTilling
	<
		uigroup = "特效"
		init = "(1.0,1.0)"
		artist = "1"
	>;
	["星云图纵深"]
	uniform mediump float _SpaceHeight
	<
		uigroup = "特效"
		artist = "1"
		init = "1.0"
	>;
	["星云图亮度"]
	uniform mediump float _SpaceIntensity
	<
		uigroup = "特效"
		artist = "1"
		init = "1.2"
	>;
	["闪烁星星Tilling"]
	uniform mediump float2 _StarTilling
	<
		uigroup = "特效"
		init = "(1.0,1.0)"
		artist = "1"
	>;
	["闪烁星星纵深"]
	uniform mediump float _StarHeight
	<
		uigroup = "特效"
		artist = "1"
		init = "0.2"
	>;
	["闪烁星星频率"]
	uniform mediump float _StarrySpeed
	<
		uigroup = "特效"
		artist = "1"
		init = "1.5"
	>;
	["闪烁星星强度"]
	uniform mediump float _StarIntensity
	<
		uigroup = "特效"
		artist = "1"
		init = "5.0"
	>;
	["叠加变亮"]
	uniform mediump float _AddMode
	<
		uigroup = "特效"
		artist = "1"
		init = "1.0"
		max = "1.0"
		min = "0.0"
		uistep = "0.001"
	>;
	["边缘光颜色"]
	uniform lowp float4 rim_color
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "特效"
	>;
	["纹身线颜色"]
	uniform lowp float4 _LineColor
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "特效"
	>;

	["ChangeAmount"]
	uniform lowp float ChangeAmount
	<
		uigroup = "3 rim"
		uistep = "0.001"
		init = "0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["半透"]
	uniform lowp float _SpecAlpha
	<
		artist = "1"
		init = "1"
		uistep = "0.001"
		max = "1.0"
		min = "0.0"
	>;
	["溶解边界颜色"]
	uniform lowp float4 u_dissolve_color
	<
		color = "1"
		artist = "1"
		init = "(1.0, 0.1, 0.1, 1.0)"
		uigroup = "溶解"
	>;

	["poisson uniform values"]
	uniform lowp float4[8] poissonDisk
	<
		init = "(0.0, 0.0, -0.94201624, -0.39906216, 0.94558609, -0.76890725, -0.094184101, -0.92938870, 0.34495938, 0.29387760, -0.91588581, 0.45771432, -0.81544232, -0.87912464, -0.38277543, 0.27676845, 0.97484398, 0.75648379, 0.44323325, -0.97511554, 0.53742981, -0.47373420, -0.26496911, -0.41893023, 0.79197514, 0.19090188, -0.24188840, 0.99706507, -0.81409955, 0.91437590, 0.19984126, 0.78641367)"
	>;
	
	uniform lowp float u_tonemapping_factor
	<
		min = "0.0"
		max = "1.0"
		init = "1.0"
		artist = "1"
	>;

	["环境光颜色"]
	uniform lowp float4 env_shadow_factor1
	<
		uigroup = "1 环境光"
		artist = "1" 
		color = "1"
		// init = "(0.667,0.545,0.761,1.0)"
		init = "(1.0,1.0,1.0,1.0)"
	>;
	// attribute变量
	attribute float4 texcoord1 : TEXTURE1;

	
	// varying变量
	// varying mediump float v_char_height; 	
	varying lowp float3 GiLightColor;
	varying highp float4 PosLightProj;
	varying highp float4 v_dissolve_uv;
	
	// varying mediump float4 v_light_proj_pos;
	uniform mediump float4 u_shadowmap_info: SHADOW_INFO;
	uniform mediump float2 shadow_bias_factor
	<
		// ios(0.002, 0.0002)
		// 其他(0.004, 0.001)
		init = "(0.004, 0.001)"
	>;
	
	
	uniform mediump float4x4 texTrans0 : TEXTURE_TRANS0;
	uniform mediump float4x4 lightmapTrans : TEXTURE_TRANS1;
	
	uniform mediump float4 LightMapScale : LIGHT_MAP_SCALE;
	uniform highp float4x4 lv : LIGHT_VIEW;
	
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] DirLightAttr : DIR_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] PointLightAttrs : POINT_LIGHT_ATTR;
	
	uniform highp float4x4 lvp : LIGHT_VIEW_PROJ;
	
	uniform mediump float4 ZBufferParams: ZBUFFER_PARAMS;

	// uniform mediump float4x4 envSHR
	// <
	//	 init = "(0.014678, -0.012044, -0.040482, -0.029212, -0.012044, -0.014678, 0.022421, 0.014336, -0.040482, 0.022421, 0.136843, 0.068306, -0.029212, 0.014336, 0.068306, 0.175862)"
	// >;
	// uniform mediump float4x4 envSHG
	// <
	//	 init = "(0.008648, -0.017736, -0.028054, -0.027763, -0.017736, -0.008648, 0.025042, 0.036537, -0.028054, 0.025042, 0.103563, 0.055276, -0.027763, 0.036537, 0.055276, 0.206319)"
	// >;
	// uniform mediump float4x4 envSHB
	// <
	//	 init = "(-0.002828, -0.022570, -0.018314, -0.026353, -0.022570, 0.002828, 0.025450, 0.066163, -0.018314, 0.025450, 0.069045, 0.040577, -0.026353, 0.066163, 0.040577, 0.261003)"
	// >;

	
	uniform lowp float4 FogColor : FOG_COLOR;
	uniform mediump float4 FogInfo : FOG_INFO;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				out(vec, pos1);
				out(nor, nor1);
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};

		
		highp float4 position = vec;
		highp float4 normal = nor;
		
		// 计算顶点位置
		highp float4 screen_pos = float4(transform(position, wvp));
		vertex(screen_pos);
		
		highp float4 pos_world = transform(position, world);
		
		float3x3 worldMat = float3x3(world);
		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
		
		out(UV0, float4(texcoord0.xy, texcoord1.xy));
		
		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		out(v_NormalWorld, world_normal);

		mediump float3 tangentWorld = float3(normalize(a_tangent.xyz * worldMat));

		// 通过uv空间来判断是否是镜像模型，如果是镜像模型则反转法线
		//mediump float test_sign = float(sign(step(length(tangent.xyz), 1.0f) - 0.5f));
		//mediump float3 binormal_world = cross(world_normal, tangentWorld);
		//mediump float3 binormal_world = cross(world_normal, tangentWorld);
		highp float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
		mediump float3 binormal_world = cross(tangentWorld, world_normal) * tan_coef;

		out(v_TangentWorld, normalize(tangentWorld));
		out(v_BinormalWorld, normalize(binormal_world));
	}


	pixel
	{	
		// —————————————————— 法线 ——————————————————	
		lowp float3 vertex_normal_world = v_NormalWorld;
		lowp float3 vertex_tangent_world= v_TangentWorld;
		lowp float3 vertex_binormal_world = v_BinormalWorld;
		mediump float2 UV = UV0.xy;
		mediump float2 UV1 = UV0.zw;
		macro(XNORMAL_MAP_ENABLE) out(lowp float3 normalWorld, lowp float occlusion) {
			branch("1") {
				lowp float4 norm = sample(SamplerNormalMap, UV.xy);
				
				lowp float2 normOff = norm.xy * 2.0f - float2(1.0f);
				// lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				lowp float3 normalWorld_inner = normalize(v_TangentWorld * normOff.x + v_BinormalWorld * normOff.y + vertex_normal_world);
				out(normalWorld, normalWorld_inner);
				out(occlusion, norm.z);
			}	
			branch("0") {
				out(normalWorld, vertex_normal_world);
				out(occlusion, 1.0f);
			}
		};

		// macro(SHADOW_MAP_ENABLE) out(highp float4 v_light_proj_pos)
		// {
		// 	branch("1")
		// 	{				
		// 		mediump float4 shadow_light_attr_3 = ShadowLightAttr[3];
		// 		function calc_shadow_info(
		// 			PosWorld,
		// 			normalWorld,
		// 			lvp,
		// 			shadow_light_attr_3.xyz)
		// 		out(
		// 			highp float2 uv_out,
		// 			highp float  depth_out,
		// 			highp float  factor_out
		// 		);
		// 		out(v_light_proj_pos, float4(uv_out, depth_out, factor_out));
		// 	}
		// 	branch("0")
		// 	{
		// 		out(v_light_proj_pos, PosWorld);
		// 	}				
		// };
		// // —————————————————— 自投影(shadow_fac计算) ——————————————————	
		// macro(SHADOW_MAP_ENABLE) out (mediump float shadow_fac_)
		// {
		// 	branch("1") {
		// 		// macro(LEVEL_HIGH) out(mediump float fac0) 
		// 		// {
		// 		// 	branch ("1") 
		// 		// 	{
		// 		// 		function calc_shadowmap_factor_sampling9(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
		// 		//         out(lowp float factor);
		// 		//         out(fac0, factor);
		// 		// 	}
		// 		// 	branch ("0") 
		// 		// 	{
		// 		// 		function calc_shadowmap_factor_sampling5(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias, shadowmap_uv_bias)
		// 		//         out(lowp float factor);
		// 		//         out(fac0, factor);
		// 		// 	}
		// 		// };
		// 		function calc_shadowmap_factor(SMAP, v_light_proj_pos, u_shadowmap_info, shadow_bias_factor * shadowmap_bias)
		// 		out(lowp float factor);
		// 		out(shadow_fac_, factor);
		// 	}
		// 	branch("0") {
		// 		out(shadow_fac_, 1.0f);
		// 	}
		// };
		mediump float shadow_fac_ = 1.0f;

		// ——————————————————★★★ 基础设置 ★★★——————————————————	
		// 采样贴图
		lowp float4 diffuse_map_color_ = sample(Tex0, UV.xy);

		macro(LEVEL_MIDDLE) out(lowp float4 diffuse_map_color)
		{
			branch("1")
			{
				macro(DIFFUSE_ALPHA_SEPARATE) out(lowp float4 diffuse_map_color0)
				{
					branch("1")
					{
						lowp float4 separateColor = sample(sepAlphaTex, UV.xy);
						out(diffuse_map_color0, float4(diffuse_map_color_.xyz, separateColor.w));
					}
					branch("0") {
						out(diffuse_map_color0, diffuse_map_color_);
					}
				};
				out(diffuse_map_color,diffuse_map_color0);
			}
			branch ("0") 
			{
				out(diffuse_map_color,diffuse_map_color_);
			}
		};

		lowp float4 pbr_map = sample(SamplerRough, UV.xy);
		lowp float metal = saturate(pbr_map.r + metal_multi);
		lowp float rough = saturate(pbr_map.b + rough_multi);
		lowp float energy_mask = pbr_map.g;

		// ——————————————————★★★ 光照设置 ★★★——————————————————
		macro(POINT_LIGHT_ENABLE) out(mediump float3 gi_color0, mediump float3 light_dir0) {
			branch ("1") {
				// 点光颜色
				lowp float4 light_color = ShadowLightAttr[1];
				mediump float4 dir_vector = ShadowLightAttr[3];
				lowp float light_range = dir_vector.w;
				mediump float3 light_dir_ = PosWorld.xyz - dir_vector.xyz; 
				out(light_dir0, normalize(light_dir_)); 
				lowp float dist = length(light_dir_);
				lowp float point_light_fac = clamp((light_range - dist) / light_range, 0.0f, 1.0f);
				out(gi_color0, lerp(dark_color.rgb, light_color.rgb, float3(point_light_fac * point_light_fac)));
			}
			branch ("0"){
				//平行光颜色
				lowp float4 light_color = ShadowLightAttr[1]; 
				out(gi_color0, light_color.xyz); 

				// 光源方向
				mediump float4 light_dir_ = ShadowLightAttr[3];
				out(light_dir0, normalize(light_dir_.xyz));
				//mediump float3 light_dir = u_light_scale * normalize(float3(u_light_pos_x, u_light_pos_y, u_light_pos_z));
			}
		};

		macro(MAIN_LIGHT_ENABLE) out(mediump float3 gi_color,mediump float3 light_dir)
		{
			branch("1")
			{
				mediump float3x3 inverse_view_mat0 = float3x3(inverse_view);
				mediump float3 mainlight_dir = normalize(float3(main_pos_x, main_pos_y, main_pos_z) * inverse_view_mat0);
				out(light_dir,mainlight_dir);
				out(gi_color,main_light_color.rgb * main_light_intensity);
			}
			branch("0")
			{
				out(gi_color, gi_color0); 
				out(light_dir, light_dir0);
			}
		};

		lowp float3 light_dir_ndl = normalize(float3(light_dir.x, light_dir.y, light_dir.z));

		// 视线方向
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);

		// ——————————————————★★★ 常用参数 ★★★——————————————————

		lowp float roughness = rough;	
				
		lowp float non_metal = 1.0f - metal;

		lowp float3 H = normalize(view_dir - light_dir_ndl);
		mediump float VoH = dot(view_dir, H);
		mediump float VoL = dot(view_dir, -light_dir_ndl);
		mediump float NoV = dot(view_dir, normalWorld);
		mediump float VdotH = saturate(VoH);
		mediump float NoH = dot(normalWorld, H);
		mediump float NdotH = saturate(NoH);
		mediump float NdotV = saturate(NoV);

		// NdotL
		mediump float NoL = dot(normalWorld, -light_dir_ndl);

		// 计算OrenNayarLighting因子
		lowp float ggx_rough = lerp(0.04f, 1.0f, rough);

		macro(LEVEL_MIDDLE) out(lowp float orennayar_factor) 
		{
			branch ("1") 
			{
				macro(ORENNAYAR_ENABLE) out(lowp float orennayar_factor0) {
					branch ("0") {
						out(orennayar_factor0,1.0f);
					}
					branch ("1") {
						float a = ggx_rough * ggx_rough;
				        float s = a;// / ( 1.29 + 0.5 * a );
						float s2 = s * s;
				        float VoL1 = 2.0f * VoH * VoH - 1.0f;		// double angle identity
						float Cosri = VoL1 - NoV * NoL;
						float C1 = 1.0f - 0.5f * s2 / (s2 + 0.33f);
						condition(Cosri) out(float C3) {
							branch ("%0% >= 0.0") {
								out(C3, min(1.0f,NoL/max(0.01f, NoV)));
							}
							default {
								out(C3, 1.0f);
							}
						};
						float C2 = 0.45f * s2 / (s2 + 0.09f) * Cosri * C3;
						out(orennayar_factor0, clamp(( C1 + C2 ) * ( 1.0f + ggx_rough * 0.5f), 0.0f, 5.0f));
					}
				};
				out(orennayar_factor, orennayar_factor0);
			}
			branch ("0") 
			{
				out(orennayar_factor, 1.0f);
			}
		};
		

		["计算暗部补充光线"]
		// mediump float3 fix_normal = normalize(vertex_normal_world + 0.1f * view_dir);
		mediump float3 fix_normal = normalize(normalWorld + 0.1f * view_dir);
		mediump float fix_nol = saturate(dot(fix_normal, light_dir_ndl));
		mediump float light_view_dir = transform(light_dir_ndl, float3x3(view_mat)).b;
		mediump float ambient_fix = 0.5f * fix_nol *fix_nol * (0.2f + saturate(light_view_dir + 0.5f));
		// mediump float ambient_fix = 0.0f;//关闭暗部补光

		// mediump float NdotL_spec = min(saturate(NoL),shadow_fac_);// 此为specular的nol
		mediump float NdotL_spec = min(saturate(NoL),shadow_fac_);
		lowp float NdotL_diff = NdotL_spec * orennayar_factor;

		// ——————————————————★★★ DIFFUSE ★★★—————————————————— 
		mediump float3 diffuse_color_ = diffuse_map_color.xyz * diffuse_map_color.xyz * diffuse_intensity; 
		macro(FX_ENABLE) out(mediump float3 diffuse_color,lowp float flowemiss_mask,lowp float space_mask,lowp float rim_mask)
		{
			branch("1")
			{	
				lowp float4 compose_mask = sample(ComposeMaskTex,UV.xy);
				lowp float flowemiss_mask_ = compose_mask.r;
				lowp float space_mask_ = compose_mask.g;
				lowp float rim_mask_ = compose_mask.b + saturate(1.0f - NdotL_diff);
				mediump float3 diffuse_color_output = lerp(diffuse_color_,float3(0.0f),float3(space_mask_) * (1.0f - _AddMode));
				out(flowemiss_mask,flowemiss_mask_);
				out(space_mask,space_mask_);
				out(rim_mask,rim_mask_);
				out(diffuse_color,diffuse_color_output);
			}
			branch("0")
			{
				out(flowemiss_mask,0.0f);
				out(space_mask,0.0f);
				out(rim_mask,0.0f);
				out(diffuse_color,diffuse_color_);
			}
		};

		// 金属度计算过后的漫反射光强
		mediump float3 non_metal_diffuse = non_metal * diffuse_color; 

		// 方向环境光 		
		macro (DIR_AMBIENT_ENABLE) out (mediump float3 dir_ambient_color)
		{
			branch("1"){
				mediump float3x3 inverse_view_mat = float3x3(inverse_view);
				//mediump float dir_ambient_fac = clamp(-normalWorld.y, 0.0f, 1.0f);
				mediump float3 ambient_dir = normalize(float3(l_pos_x, l_pos_y, l_pos_z) * inverse_view_mat);
				lowp float dir_ambient_fac_ = clamp(dot(normalWorld, ambient_dir), 0.0f, 1.0f);
				out(dir_ambient_color, dir_ambient.rgb * dir_ambient_fac_ * dir_ambient_intensity * (0.5f * non_metal + 0.5f));	
			}
			branch("0"){
				out(dir_ambient_color, float3(0.0f));	

			}
		};

		// AO
		macro(ENVIR_ENABLE) out(lowp float3 AO_color) {
			branch ("1") {
				lowp float _AO_adjust = lerp(1.0f, occlusion ,NdotV);
				out(AO_color, float3(lerp(_AO_adjust, occlusion,2.0f * saturate(0.5f - occlusion))));
			}
			branch ("0") {
				out(AO_color, float3(1.0f));
			}
		};


		// 增加半球光照
		// lowp float3 sky_light = saturate(normalWorld.g  + skylight_smooth) * sky_light_color.rgb * sky_light_intensity * saturate(lerp(1.0f,PosWorld.y / 20.0f, sky_light_height));
		// 增加高度渐变以及垂直范围的变化
		// lowp float3 sky_light = saturate(normalWorld.g  + 0.35f) * sky_light_color.rgb * sky_light_intensity * saturate(lerp(1.0f,PosWorld.y / 20.0f, 0.31f));
		lowp float3 sky_light = float3(0.0f);

		// SH
		// function calc_env_sh( envSHR, envSHG, envSHB, float3(normal_view.x, normal_view.y,-normal_view.z)) out (mediump float3 ibl_diffuse);
		function calc_env_sh( envSHR, envSHG, envSHB, normalWorld) out (mediump float3 ibl_diffuse1);
		mediump float3 ibl_diffuse = ibl_diffuse1 * 3.0f; //环境光的sh与高光比为3:130;

		// 环境光调整色计算
		// lowp float3 env_factor_color = lerp(env_shadow_factor.rgb ,float3(1.0f), float3(NdotL_diff));
		lowp float3 env_factor_color = env_shadow_factor1.rgb * (1.0f + ambient_fix) + NdotL_diff * gi_color * 0.5f; 
		// lowp float3 env_factor_color = env_shadow_factor.rgb ; 

		// Final Diffuse
		// 固有色 * (主光源 + 环境光 + 天光) + 补光
		mediump float3 final_diffuse = non_metal_diffuse * ((NdotL_diff + ambient_fix) * gi_color  + ibl_diffuse * (sky_light + env_factor_color * envir_brightness)) + dir_ambient_color;

		// —————————————————— ★★★ SPECULAR ★★★—————————————————— 
		mediump float3 spec_color = lerp(diffuse_color.xyz, float3(0.04f), float3(non_metal)); 

		// F
		function F_Schlick(spec_color,VdotH) out (lowp float3 F);	
		// D 
		function D_GGX(ggx_rough, NdotH) out(lowp float D);
		
		// G
		function G_Schlick_Disney(ggx_rough, NdotV, NdotL_spec) out (lowp float G);
		// specular BRDF
		//mediump float3 brdf =  D * spec_color * spec_intensity;

		mediump float3 brdf =  D * F * G  ;

		// Final Specular

		mediump float3 final_specular = brdf * NdotL_spec * gi_color;


		// ——————————————————★★★ IBL ★★★—————————————————— 
		macro(ENVIR_ENABLE) out(mediump float3 final_envir0)
		{
			branch("1") {
				mediump float3 R_rotated_ = reflect(-view_dir, normalWorld);
				function RotationGIDirection(R_rotated_,env_rotation) out(float3 R_rotated);
				function GetEnvirmentColor_panorama (SamplerCubeMap, roughness, R_rotated, 130.0f) out (mediump float3 envir); // 环境光最大强度不改了，再改是猪！
				function EnvBRDFApprox(spec_color, ggx_rough, NdotV, oneminus(NdotL_spec * 0.8f) * envir_fresnel_brightness) out (mediump float3 env_brdf);
				out(final_envir0,  env_brdf * envir * (sky_light + env_factor_color * envir_brightness));
			}
			branch("0") {
				out(final_envir0, diffuse_color * ibl_diffuse * metal * lerp(0.6f, 1.0f, NdotH));
			}
		};
		mediump float3 final_envir = final_envir0;

		macro(FX_ENABLE) out(float3 final_emiss_color)
		{
			branch("1")
			{
				mediump float _Rim_Bias = _Rim_Control.x;
				mediump float _Rim_Scale = _Rim_Control.y;
				mediump float _Rim_Power = _Rim_Control.z;
				mediump float fresnel_factor_ = _Rim_Bias + _Rim_Scale * pow(1.0f - NoV, _Rim_Power);
				mediump float fresnel_factor = fresnel_factor_ * rim_mask;

				mediump float _Emiss_Fresnel_Bias = _Emiss_Fresnel_Control.x;
				mediump float _Emiss_Fresnel_Scale = _Emiss_Fresnel_Control.y;
				mediump float _Emiss_Fresnel_Power = _Emiss_Fresnel_Control.z;
				mediump float emiss_fresnel_factor = _Emiss_Fresnel_Bias + _Emiss_Fresnel_Scale * pow(1.0f - NoV, _Emiss_Fresnel_Power);

				mediump float3x3 tangentTransform = transpose(float3x3(v_TangentWorld,v_BinormalWorld,v_NormalWorld));
				mediump float3 view_dir_tangent = normalize(transform(view_dir,tangentTransform));
				function ParallaxOffsetNetiveY(0.0f,_Emiss_ParallaxHeight * 0.01f,view_dir_tangent) out(float2 parallax_offset0);
				lowp float flowemiss_value = sample(EmissTex,UV1 * _EmissTilling + FrameTime * _EmissSpeed + parallax_offset0).r;
				mediump float combined_emiss_factor_ = emiss_fresnel_factor * flowemiss_value;
				lowp float combined_emiss_factor = saturate(combined_emiss_factor_ / (1.0f + combined_emiss_factor_)) + _RampOffset;
				mediump float2 ramp_uv = float2(combined_emiss_factor,0.5f);
				mediump float3 combined_emiss_color = sample(_RampMap, ramp_uv).rgb * _CombinedRimIntensity * flowemiss_mask;

				function ParallaxOffsetNetiveY(0.0f,_SpaceHeight,view_dir_tangent) out(float2 space_parallax_offset);
				mediump float2 space_uv = UV.xy * SpaceTilling + space_parallax_offset;
				lowp float4 space_tex_value = sample(SpaceTex,space_uv);
				lowp float3 space_color = space_tex_value.rgb * _SpaceIntensity * (space_mask + flowemiss_value * (1.0f - energy_mask) * 2.0f * space_mask) * lerp(_LineColor.rgb * 2.0f,float3(1.0f),float3(energy_mask));

				macro(STAR_ENABLE) out(float3 starry_color)
				{
					branch("1")
					{
						function ParallaxOffsetNetiveY(0.0f,_StarHeight,view_dir_tangent) out(float2 star_parallax_offset);
						mediump float2 star_uv = UV.xy * _StarTilling + star_parallax_offset;
						lowp float4 star_tex_value = sample(StarTex,star_uv);
						mediump float PI_two = 3.1415926f * 2.0f;
						mediump float starry_factor = saturate(sin(star_tex_value.r * PI_two + FrameTime * _StarrySpeed) * star_tex_value.g * star_tex_value.b) * _StarIntensity;
						mediump float3 starry_color_ = starry_factor * space_color;
						out(starry_color,starry_color_);
					}
					branch("0")
					{
						out(starry_color,float3(0.0f));
					}
				};

				mediump float3 final_emiss_color_ = (combined_emiss_color + space_color + starry_color) * (energy_mask + flowemiss_value * (1.0f - energy_mask) * space_mask) + fresnel_factor * rim_color.rgb;
				out(final_emiss_color,final_emiss_color_);
			}
			branch("0")
			{
				out(final_emiss_color,float3(0.0f));
			}
		};

		// ——————————————————★★★ 自发光 & 半透 ★★★—————————————————— 
		lowp float arufa = diffuse_map_color.a; 
		macro(SELF_BLING) out (mediump float3 final_emissive, lowp float emissive_area){
			branch("1"){
				mediump float3 final_emissive_ = final_emiss_color + arufa * emissive_intensity * non_metal_diffuse.rgb;

				out(final_emissive, final_emissive_);
				out(emissive_area, arufa);
			}
			branch("0"){
				out(final_emissive, final_emiss_color);
				out(emissive_area, 0.0f);
			}
		};

		lowp float diffuse_alpha = 1.0f; //取消半透明功能


		/////////////////////////////////////////////////////////////////
		// ——————————————————★★★ 最终光照计算 ★★★——————————————————
		/////////////////////////////////////////////////////////////////
		// pbr的最终计算结果 = (漫反射 + 动态光反射 + 环境反射）* 主光颜色 * AO  （IBL也要受主光颜色影响，这样不会出现与主光色调不一致的情况）

		mediump float3 combine_spec = final_specular + final_envir ;
		mediump float3 pbr_light_color =  (final_diffuse + combine_spec) * AO_color;
		mediump float3 result_diff_raw =  pbr_light_color;

		lowp float emissive_bloom1 = emissive_bloom;
		lowp float tmp = bloom_range + illum_multi; // 只是为了美术同学可以调整
				
		function unreal_tonemapping(result_diff_raw, ToneFactor, 0.88f, 0.55f, 0.26f, 0.00f, 0.04f) out(float3 ToneColor_aces);
		
		function Luminance(combine_spec) out (mediump float color_illum);
		lowp float alphchannel = saturate((color_illum - bloom_threshold)) * clamp(metal+bloom_range, 0.0f, 1.0f) * illum_multi + emissive_area * emissive_bloom1;
		
		lowp float3 combined_color_ = ToneColor_aces + final_emissive;
		lowp float3 combined_color = lerp(combined_color_,combined_color_ + (1.0f - NdotV) * rim_color.rgb,float3(rim_mask));
		lowp float4 encode_color_1 = float4(combined_color, diffuse_map_color.a * AlphaMtl);


		// —————————————————— diffuse check ———————————————————
		// macro(DIFFUSE_CHECK) out(mediump float4 diffuse_check){
		// 	branch("1"){
		// 		out(diffuse_check, diffuse_map_color);
		// 	}
		// 	branch("0"){
		// 		out(diffuse_check, float4(encode_color_1));
		// 	}
		// };
		
		// macro(ROUGHNESS_CHECK) out(lowp float4 final_color1)
		// {
		// 	branch ("0") {
		// 		out(final_color1, diffuse_check);
		// 	}
		// 	branch ("1") {
		// 		out(final_color1, float4(ggx_rough,ggx_rough,ggx_rough,1.0f));
		// 	}
		// };

		// macro(METAL_CHECK) out(lowp float4 final_color2)
		// {
		// 	branch ("0") {
		// 		out(final_color2, final_color1);
		// 	}
		// 	branch ("1") {
		// 		out(final_color2, float4(metal,metal,metal,1.0f));
		// 	}
		// };

		// macro(AO_CHECK) out(lowp float4 final_color3)
		// {
		// 	branch ("0") {
		// 		out(final_color3, final_color2);
		// 	}
		// 	branch ("1") {
		// 		out(final_color3, float4(occlusion));
		// 	}
		// };
		macro(DISSOLVE_EFFECT) out(lowp float3 combine_dissolve)
		{
			branch("1") {
				lowp float4 diss_samp = sample(BuffTex, UV0.xy);
				lowp float ClipAmount = diss_samp.x - ChangeAmount;
				alphatest("<")(ClipAmount, 0.0f);
				lowp float3 dest = u_dissolve_color.rgb * ClipAmount * 2.0f / 0.1f;
				lowp float num1 = step(0.1f, ClipAmount);
				lowp float3 combine_dissolve_ = (num1 * 0.5f + 0.5f) * encode_color_1.rgb + (1.0f - num1) * dest;
				out(combine_dissolve, combine_dissolve_);
			}
			branch("0") {
				out(combine_dissolve,encode_color_1.rgb);
			}
		};

		pixel(float4(combine_dissolve,AlphaMtl));
	}
}

