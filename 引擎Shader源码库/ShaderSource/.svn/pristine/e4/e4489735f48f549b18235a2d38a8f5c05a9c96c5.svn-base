["VBR shader for DM106"]
pipeline
<
	version = "1.1.2" 
	author = "liuyu/xuzhuoliang" 
	category = "common" 
	company = "netease"
	merge = "1"
>
{
	include(shader\\including\\envir_uniform.spzs)
	include(shader\\including\\pbr_include_function.spzs)
	["是否启用场景转置"]
	eitheror TRANS_ENABLE;
	macro(TRANS_ENABLE)
	<
		customizable = "1"
		default = "0"
	>;

	["开启法线贴图(XNORMAL_MAP_ENABLE)"]
	eitheror XNORMAL_MAP_ENABLE;
	
	["补光"]
	eitheror DIR_AMBIENT_ENABLE;

	["开启自发光"]
	eitheror SELF_BLING;

	["接受点光"]
	eitheror POINT_LIGHT_ENABLE;
	
	macro(XNORMAL_MAP_ENABLE)
	<
		default = "1"
		customizable = "1"
	>;

	macro(DIR_AMBIENT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	macro(SELF_BLING)
	<
		default = "0"
		customizable = "1"
	>;

	macro(POINT_LIGHT_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	["开启网格闪烁消融"]
	eitheror WEB_SHINING_ENABLE;
	macro(WEB_SHINING_ENABLE)
	<
		default = "0"
		customizable = "1"
	>;

	// 贴图
	["漫反射贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["变色贴图"]
	uniform sampler changecolor_mask
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;	

	["SSS贴图"]
	uniform sampler sssLUT
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;
	
	["金属度/sss/光滑度"]
	uniform sampler SamplerRough
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["法线贴图"]
	uniform sampler SamplerNormalMap
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["各向异性贴图（RG方向，B区域）"]
	uniform sampler SamplerAniso
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		lodbias = "-1.0"
	>;

	["SSS Ramp贴图"]
	uniform sampler sss_ramp
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
		path = "hero\\1001_guhuoniao\\ssslut.png"
	>;

	["KelemenLUT贴图"]
	uniform sampler KelemenLUT
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressv = "clamp"
		addressu = "clamp"
		lodbias = "-1.0"
		path = "hero\\1001_guhuoniao\\kelemenlut.png"
	>;

	["阴影贴图"]
	uniform highp samplershadow SMAP : SHADOW
	<
		artist = "1"
		mag = "linear"
		mip = "linear"
		min = "linear"
		addressu = "clamp" 
		addressv = "clamp" 
	>;

	["扰动贴图"]
	uniform sampler _DistortMap
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\noise\\sf_noise_clouds_01.png"
	>;
	["流光纹理(R流光G扰动B变色)"]
	uniform sampler _EmissTex
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		// path = "fx\\model\\1009_jingqiduizhang\\noise_semaelectro4.png"
	>;
	["Ramp"]
	uniform sampler _Ramp
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		addressu = "clamp"
		addressv = "clamp"
		path = "common\\textures\\ramp\\ramp01.png"
	>;
	["RampMask"]
	uniform sampler _RampMask
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		path = "fx\\texture\\noise\\noiseclouds01.png"
	>;
	// —————————————————— PBR调整 ——————————————————
	["手动金属度"]
	uniform lowp float manul_metal
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	
	["手动光滑度"]
	uniform lowp float manul_rough
	<
		uigroup = "1 PBR"
		uistep = "1"
		artist = "1" 
		color = "1"
		min = "0.0"
		max = "1.0"
	>;
	["金属度缩放"]
	uniform lowp float metal_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	["粗糙度缩放"]
	uniform lowp float rough_multi
	<
		uigroup = "1 PBR"
		artist = "1" 
		init = "0.0"
		uistep = "0.001"
		min = "-1.0"
		max = "1.0"
	>;
	


	["发光ColorA"]
	uniform lowp float4 EmissColorA
	<
		uigroup = "1 环境光"
		artist = "1" 
		color = "1"
		init = "(0.5569,0.7412,1,1)"
	>;
	["发光ColorB"]
	uniform lowp float4 EmissColorB
	<
		uigroup = "1 环境光"
		artist = "1" 
		color = "1"
		init = "(0.5569,0.7412,1,1)"
	>;

	["天光强度"]
	uniform float sky_light_intensity
	<
		uigroup = "1 环境光"
		artist = "0" 
		init = "1.0"
	>;
	
	// ——————————————————各向异性——————————————————
	
	["抖动偏移值(Anisotropic_offset)"]
	uniform lowp float noise_offset
	<
		uigroup = "各向异性"
		artist = "1" 
		uistep = "0.001"
		min = "0.0" 
		max = "1.0" 
		init = "0.2"
	>;

	["整体偏移值(Anisotropic_offset)"]
	uniform mediump float normal_offset
	<
		uigroup = "各向异性"
		artist = "1" 
		uistep = "0.001"
		min = "-5" 
		max = "5" 
		init = "-0.2"
	>;
	
	// ——————————————————自发光——————————————————
	
	["自发光强度"]
	uniform mediump float emissive_intensity
	<
		uigroup = "风格化"
		artist = "1" 
		uistep = "0.001"
		min = "1.0" 
		max = "10.0" 
		init = "1.0"
	>;
	// ——————————————————DIFFUSE——————————————————

	["漫反射强度"]
	uniform mediump float diffuse_intensity
	<
		init = "1.0"
		max = "5.0"
		min = "0.0"
		uistep = "0.001"
		artist = "0"
		uigroup = "0 漫反射"
	>;

	["角色高度"]
	uniform mediump float char_height
	<
		artist = "1"
		init = "20"
		min = "0"
		uigroup = "风格化"
	>;

	["暗部颜色"]
	uniform lowp float4 dark_color
	<
		uigroup = "风格化"
		artist = "1" 
		color = "1"
		init = "(0.15,0.15,0.15,0.15)"
	>;	

	// ——————————————————自投影——————————————————
	["阴影bias"]
	uniform mediump float shadowmap_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	["阴影采样bias"]
	uniform mediump float shadowmap_uv_bias
	<
		uigroup = "自投影"
		init = "0.5"
		artist = "1"
	>;

	//————————————————补光——————————————————

	["补光强度"]
	uniform mediump float dir_ambient_intensity
	<
		init = "0.9"
		max = "10.0"
		min = "0.0"
		uistep = "1"
		artist = "1"
		uigroup = "补光"
	>;	

	["补光颜色"]
	uniform lowp float4 dir_ambient
	<
		artist = "1" 
		color = "1"
		init = "(0.2,0.3804,0.7765,1)"
		uigroup = "补光"
	>;	
	
	["补光位置x"]
	uniform mediump float l_pos_x
	<
		init = "-65"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置y"]
	uniform mediump float l_pos_y
	<
		init = "14"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;
	["补光位置z"]
	uniform mediump float l_pos_z
	<
		init = "100"
		artist = "1"
		uigroup = "补光"
		uistep = "0.001"
		max = "100"
		min = "-100"
	>;

	["自发光bloom强度"]
	uniform mediump float emissive_bloom
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.0"
		max = "5.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom强度"]
	uniform mediump float illum_multi
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "1"
		max = "10.0"
		min = "0.0"
		artist = "1"
	>;

	["bloom范围"]
	uniform lowp float bloom_range
	<
		uigroup = "bloom"
		uistep = "0.001"
		init = "0.4"
		max = "1.0"
		min = "-1.0"
		artist = "1"
	>;

//特效
	["边缘光Bias"]
	uniform lowp float _Rim_Bias
	<
		artist = "1"
		uigroup = "0.边缘光"
		init = "0.0"
	>;
	["边缘光强度"]
	uniform lowp float _Rim_Scale
	<
		artist = "1"
		uigroup = "0.边缘光"
		init = "0.58"
		uistep = "0.01"
		max = "2.0"
		min = "-2.0"
	>;
	["边缘光对比度"]
	uniform lowp float _Rim_Power
	<
		artist = "1"
		uigroup = "0.边缘光"
		init = "1.0"
	>;

	["扰动Tilling"]
	uniform mediump float2 _Distort_Tilling
	<
		artist = "1"
		uigroup = "1.扰动"
		init = "2.0,1.5"
	>;
	["扰动Speed"]
	uniform mediump float2 _Distort_Speed
	<
		artist = "1"
		uigroup = "1.扰动"
		init = "0.0,-0.1"
	>;
	
	["流光纹理扰动程度"]
	uniform mediump float _Emiss_ParallaxHeight
	<
		artist = "1"
		uigroup = "2.流光"
		init = "300.0"
	>;
	["流光Tilling"]
	uniform mediump float2 _Emiss_Tilling
	<
		artist = "1"
		uigroup = "2.流光"
		init = "5.0,5.0"
	>;
	["流光Speed"]
	uniform mediump float2 _Emiss_Speed
	<
		artist = "1"
		uigroup = "2.流光"
		init = "0.3,0.3"
	>;
	["流光Fresnel Bias"]
	uniform lowp float _Emiss_Fresnel_Bias
	<
		artist = "1"
		uigroup = "2.流光"
		init = "0.0"
	>;
	["流光Fresnel强度"]
	uniform lowp float _Emiss_Fresnel_Scale
	<
		artist = "1"
		uigroup = "2.流光"
		init = "1.0"
	>;
	["流光Fresnel对比度"]
	uniform lowp float _Emiss_Fresnel_Power
	<
		artist = "1"
		uigroup = "2.流光"
		init = "1.5"
	>;

	["Ramp遮罩Tilling"]
	uniform mediump float2 _Mask_Tilling
	<
		artist = "1"
		uigroup = "3.遮罩"
		init = "9.0,12.5"
	>;
	["Ramp遮罩Speed"]
	uniform mediump float2 _Mask_Speed
	<
		artist = "1"
		uigroup = "3.遮罩"
		init = "0.0,-0.3"
	>;
	["Ramp遮罩扰动程度"]
	uniform mediump float _Mask_ParallaxHeight
	<
		artist = "1"
		uigroup = "3.遮罩"
		init = "-50.0"
	>;
	["Ramp遮罩强度"]
	uniform mediump float _MaskIntensity
	<
		artist = "1"
		uigroup = "3.遮罩"
		init = "1.0"
	>;

	["_FinalIntensity"]
	uniform lowp float _FinalIntensity
	<
		artist = "1"
		init = "1.35"
	>;

	["ChangeAmount"]
	uniform lowp float ChangeAmount
	<
		uigroup = "3 rim"
		uistep = "0.001"
		init = "0"
		max = "1.0"
		min = "0.0"
		artist = "1"
	>;

	["poisson uniform values"]
	uniform lowp float4[8] poissonDisk
	<
		init = "(0.0, 0.0, -0.94201624, -0.39906216, 0.94558609, -0.76890725, -0.094184101, -0.92938870, 0.34495938, 0.29387760, -0.91588581, 0.45771432, -0.81544232, -0.87912464, -0.38277543, 0.27676845, 0.97484398, 0.75648379, 0.44323325, -0.97511554, 0.53742981, -0.47373420, -0.26496911, -0.41893023, 0.79197514, 0.19090188, -0.24188840, 0.99706507, -0.81409955, 0.91437590, 0.19984126, 0.78641367)"
	>;
	
	uniform lowp float u_tonemapping_factor
	<
		min = "0.0"
		max = "1.0"
		init = "1.0"
		artist = "1"
	>;
	["蒙皮数据"]
	uniform highp float4[BONE_VEC_COUNT] u_bone_vec: BONE_VEC;

	// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 texcoord1 : TEXTURE1;
	attribute float4 a_color : DIFFUSE;
	attribute float4 a_position : POSITION;
	attribute float4 a_normal : NORMAL;
	attribute float4 a_tangent : TANGENT;
	["gpu蒙皮的索引"]
	attribute float4 a_blendindices: BLENDINDICES;
	["gpu蒙皮的权重"]
	attribute float4 a_blendweight: BLENDWEIGHT;

	
	// varying变量
	varying mediump float4 UV0;
	varying mediump float4 PosWorld;
	varying lowp float3 v_TangentWorld;
	varying lowp float3 v_BinormalWorld;
	varying lowp float3 v_NormalWorld;
	
	uniform mediump float4 u_shadowmap_info: SHADOW_INFO;
	uniform mediump float2 shadow_bias_factor
	<
		// ios(0.002, 0.0002)
		// 其他(0.004, 0.001)
		init = "(0.004, 0.001)"
	>;

	// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	
	uniform mediump float FrameTime: FRAME_TIME;
	
	uniform mediump float4x4 texTrans0 : TEXTURE_TRANS0;
	uniform mediump float4x4 lightmapTrans : TEXTURE_TRANS1;
	
	uniform mediump float4 LightMapScale : LIGHT_MAP_SCALE;
	uniform highp float4x4 lv : LIGHT_VIEW;
	
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] DirLightAttr : DIR_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] ShadowLightAttr : SHADOW_LIGHT_ATTR;
	uniform mediump float4[LIGHT_ATTR_ITEM_NUM] PointLightAttrs : POINT_LIGHT_ATTR;

	uniform mediump float4 camera_pos : CAMERA_POSITION;
	
	uniform mediump float4x4 inverse_view : INV_VIEW;
	
	uniform mediump float4x4 view_mat : VIEW;
	
	uniform highp float4x4 lvp : LIGHT_VIEW_PROJ;
	
	uniform mediump float4 ZBufferParams: ZBUFFER_PARAMS;
	
	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;

    // uniform mediump float4x4 envSHR
    // <
    //     init = "(0.014678, -0.012044, -0.040482, -0.029212, -0.012044, -0.014678, 0.022421, 0.014336, -0.040482, 0.022421, 0.136843, 0.068306, -0.029212, 0.014336, 0.068306, 0.175862)"
    // >;
    // uniform mediump float4x4 envSHG
    // <
    //     init = "(0.008648, -0.017736, -0.028054, -0.027763, -0.017736, -0.008648, 0.025042, 0.036537, -0.028054, 0.025042, 0.103563, 0.055276, -0.027763, 0.036537, 0.055276, 0.206319)"
    // >;
    // uniform mediump float4x4 envSHB
    // <
    //     init = "(-0.002828, -0.022570, -0.018314, -0.026353, -0.022570, 0.002828, 0.025450, 0.066163, -0.018314, 0.025450, 0.069045, 0.040577, -0.026353, 0.066163, 0.040577, 0.261003)"
    // >;

    
	uniform lowp float4 FogColor : FOG_COLOR;
	uniform mediump float4 FogInfo : FOG_INFO;
	uniform highp float4x4 proj : PROJECTION;

	vertex
	{
		["是否开启GPU蒙皮"]
		macro(GPU_SKIN_ENABLE) out (highp float4 vec, highp float4 nor)
		{
			branch("1")
			{
				//function get_skin_pos_normal(a_blendweight, uint4(a_blendindices), a_position, a_normal, u_bone_vec) out (highp float4 pos1, highp float4 nor1);
				// out(vec, pos1);
				// out(nor, nor1);
				out(vec, a_position);
				out(nor, a_normal);
			}
			branch("0") 
			{
				out(vec, a_position);
				out(nor, a_normal);
			}
		};

		
		highp float4 position = vec;
		highp float4 normal = nor;
		

		//mediump float4 uvxyz = float4(texcoord0.xy, 1.0f, 0.0f) * texTrans0;

		// 计算顶点位置
		highp float4 screen_pos = float4(transform(position, wvp));
		vertex(screen_pos);
		
		highp float4 pos_world = transform(position, world);
		
		float3x3 worldMat = float3x3(world);
		
		highp float3 world_normal = float3(normalize(transform(normal.xyz, worldMat)));
		
		out(UV0, float4(texcoord0.xy, 0.0f, 0.0f));
		out(PosWorld, float4(pos_world.xyz, 1.0f));
		
		out(v_NormalWorld, world_normal);

		mediump float3 tangentWorld = normalize(float3(normalize(a_tangent.xyz * worldMat)));
		out(v_TangentWorld, tangentWorld);
		highp float tan_coef = 1.0f - 2.0f * step(1.5f, length(a_tangent.xyz));
		mediump float3 binormal_world = normalize(cross(tangentWorld, world_normal) * tan_coef);
		out(v_BinormalWorld,binormal_world);
	}



	pixel
	{
		
		// ——————————————————★★★ 基础设置 ★★★——————————————————	
		// 采样贴图
		lowp float4 diffuse_map_color = sample(Tex0, UV0.xy);

		lowp float4 encode_color_1_0 = diffuse_map_color;

		lowp float3 normalWorld = normalize(v_NormalWorld);
		lowp float3 view_dir = normalize(camera_pos.xyz - PosWorld.xyz);
		mediump float NdotV = saturate(dot(view_dir, normalWorld));

		macro(WEB_SHINING_ENABLE) out(mediump float3 fresnel_combine) 
		{
			branch ("0") 
			{
				out(fresnel_combine,encode_color_1_0.rgb);
			}
			branch ("1") 
			{
				["网格闪烁消融效果"]
				function web_shining
				(
					burn_max_height, //角色身高
					burn_color01,   //闪烁颜色(较暗)
					burn_color02,	  //闪烁颜色(较亮)
					burn_style,		 //消融方向控制
					PosWorld.xyz,	   //当前像素位置
					(world[3]).xyz,   //角色位置 
					ChangeAmount,	   //消融量
					encode_color_1_0.rgb   //当前颜色 
				)
				out(lowp float3 final_shining_color, lowp float alphatest01, lowp float alphatest02);

				alphatest("<")(alphatest01, alphatest02);
				out(fresnel_combine,final_shining_color.rgb);
			}
		};

		mediump float2 worlduv = PosWorld.xy * float2(0.025f);
		mediump float rim_factor = _Rim_Bias + _Rim_Scale * pow(1.0f - NdotV,_Rim_Power);
		mediump float emiss_fresnel = _Emiss_Fresnel_Bias + _Emiss_Fresnel_Scale * pow(1.0f - NdotV, _Emiss_Fresnel_Power);
		lowp float noise = sample(_EmissTex,_Distort_Tilling * worlduv + float2(FrameTime) * _Distort_Speed).g;
		
		float3x3 tangentTransform = transpose(float3x3(v_TangentWorld,v_BinormalWorld,v_NormalWorld));
		float3 view_dir_tangent = normalize(transform(view_dir,tangentTransform));
		function ParallaxOffset(noise,_Emiss_ParallaxHeight * 0.01f,view_dir_tangent) out(float2 uvoffset);
		lowp float emiss_value = sample(_EmissTex, _Emiss_Tilling * worlduv + float2(FrameTime) * _Emiss_Speed + float2(sin(FrameTime)) * float2(0.1f,0.0f) + uvoffset).r;
		mediump float ramp_u = rim_factor + emiss_fresnel * emiss_value;
		lowp float rampmask_value = sample(_EmissTex, uvoffset + _Mask_Tilling * worlduv + float2(FrameTime) * _Mask_Speed).b;
		lowp float ramp_mask =  noise - rampmask_value * _MaskIntensity;

		lowp float4 ramp_color = lerp(sample(_Ramp, float2(ramp_u,0.25f)), sample(_Ramp, float2(ramp_u,0.75f)),float4(ramp_mask));

		lowp float3 vfx_color = ramp_color.xyz * float3(_FinalIntensity);
		lowp float3 res_color = fresnel_combine.rgb + vfx_color;

		pixel(float4(res_color,1.0f));
	}
}

