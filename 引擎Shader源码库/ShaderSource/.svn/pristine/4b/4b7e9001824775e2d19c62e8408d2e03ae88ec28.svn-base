["common no light"]

pipeline
<
	version = "1.0.0" 
	author = "konglingjie" 
	category = "common" 
	company = "netease"
  	merge = "1"
  	techinque = "TShader"
>
{
	// 宏
	["雾效"]
	eitheror SCENE_FOG;
	macro(SCENE_FOG)
	<
		customizable = "1"
		default = "1"
	>;
	
	["diffuse贴图"]
	uniform sampler Tex0 : DIFFUSE
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		lodbias = "-0.5"
	>;
	
	uniform sampler sepAlphaTex: DIFFUSE_ALPHA
	<
	>;

	["fxmask贴图"]
	uniform sampler _FXMask
	<
		artist = "1"
		mag = "LINEAR"
		mip = "LINEAR"
		min = "LINEAR"
		addressu = "clamp"
		addressv = "clamp"
		lodbias = "-0.5"
	>;
	["_ChangeAmount"]
	uniform mediump float _ChangeAmount
	<
		uistep = "0.001"
		artist = "1"    
		max = "2.0"
		min = "-0.5"
		init = "0.0"
	>;
	["_ChangeAmount2"]
	uniform mediump float _ChangeAmount2
	<
		uistep = "0.001"
		artist = "1"    
		max = "2.0"
		min = "-0.5"
		init = "0.0"
	>;
	["_ChangeOffset"]
	uniform mediump float _ChangeOffset
	<
		uistep = "0.001"
		artist = "1"    
		max = "0.5"
		min = "-0.5"
		init = "0.04"
	>;
	["_ChangeSmooth"]
	uniform mediump float _ChangeSmooth
	<
		uistep = "0.001"
		artist = "1"    
		max = "0.3"
		min = "0.001"
		init = "0.1"
	>;
	["_ChangeSmooth2"]
	uniform mediump float _ChangeSmooth2
	<
		uistep = "0.001"
		artist = "1"    
		max = "1.0"
		min = "0.001"
		init = "0.1"
	>;
	["_Width"]
	uniform mediump float _Width
	<
		artist = "1"    
		init = "0.1"
		uistep = "0.001"
		max = "1.0"
		min = "0.001"
	>;
	["_EdgeDistance"]
	uniform mediump float _EdgeDistance
	<
		artist = "1"    
		init = "0.5"
	>;
	["_EdgeHardness"]
	uniform mediump float _EdgeHardness
	<
		artist = "1"    
		init = "0.0"
		uistep = "0.001"  
		max = "0.99"
		min = "0.0"
	>;
	["_EdgeIntensity"]
	uniform mediump float _EdgeIntensity
	<
		artist = "1"    
		init = "5.0"
	>;
	["_EmissColor"]
	uniform mediump float4 _EmissColor
	<
		init = "(0.1372549,0.3686275,0.6901961,0.0)"
		artist = "1"
		color = "1"
	>;

	["_HeightFactor"]
	uniform mediump float _HeightFactor
	<
		artist = "1"    
		init = "0.2"
		uistep = "0.001"  
		max = "0.5"
		min = "0.0"
	>;
	["_EmissAdjust"]
	uniform mediump float _EmissAdjust
	<
		artist = "1"    
		init = "0.6"
	>;
	["_Luminance"]
	uniform mediump float _Luminance
	<
		artist = "1"    
		init = "0.3"
	>;
	["_DeSaturate"]
	uniform mediump float _DeSaturate
	<
		artist = "1"    
		init = "0.0"
	>;
	// ["_MaskUOffset"]
	// uniform mediump float _MaskUOffset
	// <
	// 	artist = "1"    
	// 	init = "0.0"
	// 	min = "-1.0"
	// 	max = "1.0"
	// 	uistep = "0.001"
	// >;

	// ["_MaskVOffset"]
	// uniform mediump float _MaskVOffset
	// <
	// 	artist = "1"    
	// 	init = "0.0"
	// 	min = "-1.0"
	// 	max = "1.0"
	// 	uistep = "0.001"
	// >;
	["_UScale"]
	uniform mediump float _UScale
	<
		artist = "1"    
		init = "1.0"
	>;
	["_VScale"]
	uniform mediump float _VScale
	<
		artist = "1"    
		init = "1.0"
	>;

	["_MaskUOffset"]
	uniform mediump float _MaskUOffset
	<
		artist = "1"    
		init = "0.0"
		min = "-1.0"
		max = "1.0"
		uistep = "0.001"
	>;

	["_MaskVOffset"]
	uniform mediump float _MaskVOffset
	<
		artist = "1"    
		init = "0.0"
		min = "-1.0"
		max = "1.0"
		uistep = "0.001"
	>;
	["_MaskUScale"]
	uniform mediump float _MaskUScale
	<
		artist = "1"    
		init = "1.0"
		min = "-2.0"
		max = "2.0"
		uistep = "0.001"
	>;
	["_MaskVScale"]
	uniform mediump float _MaskVScale
	<
		artist = "1"    
		init = "1.0"
		min = "0.0"
		max = "2.0"
		uistep = "0.001"
	>;

	["_FogDepthStart"]
	uniform highp float _FogDepthStart
	<
		artist = "1"    
		init = "0.0"
		min = "0.0"
		max = "6.0"
		uistep = "0.0001"
	>;
	["_FogDepthEnd"]
	uniform highp float _FogDepthEnd
	<
		artist = "1"    
		init = "1.0"
		min = "0.0"
		max = "6.0"
		uistep = "0.0001"
	>;
	["_FogColor"]
	uniform highp float4 _FogColor
	<
		artist = "1"    
		color = "1"
		init = "(1.0,1.0,1.0,1.0)"
	>;

	["_PatternTilling"]
	uniform highp float2 _PatternTilling
	<
		artist = "1"    
		init = "(3.0,1.2)"
	>;
	["_DepthPatternTilling"]
	uniform highp float _DepthPatternTilling
	<
		artist = "1"    
		init = "5000.0"
	>;
// attribute变量
	attribute float4 texcoord0 : TEXTURE0;
	attribute float4 diffuse : DIFFUSE;
	attribute float4 a_position : POSITION;
	
// uniform变量
	uniform highp float4x4 wvp : WORLD_VIEW_PROJECTION;
	uniform highp float4x4 world : WORLD;
	uniform lowp float alphaRef : ALPHA_REF;
	uniform lowp float4 u_fog_color : FOG_COLOR;
	uniform mediump float4 u_fog_info : FOG_INFO;
	uniform lowp float HeightFogDensity: HEIGHT_FOG_DENSITY; 
	uniform highp float frame_time : FRAME_TIME;

	uniform float AlphaMtl : ALPHA_MTL
	<
		init = "1.0"
	>;	
	// varying变量
	varying mediump float4 UV0;
	varying lowp float fog_distance;
	varying lowp float fog_height_factor;

	["计算线性雾"]
	function get_fog_mix in (
	highp float fog_begin, // 雾的起始位置, view空间
	highp float fog_end, // 雾的结束位置, view空间
	highp float wvp_z // 顶点在投影空间的深度
	) out (mediump float fog_linear_factor) // 计算雾效因子
	{
		out(fog_linear_factor, saturate(smoothstep(fog_begin, fog_end, wvp_z)));
	};

	["计算高度雾"]
	function get_fog_height1 in(
	highp float fog_height_begin, // 雾的起始位置，世界空间
	highp float fog_height_end, // 雾的结束位置，世界空间
	highp float view_y // 顶点在世界空间的高度
	) out (mediump float fog_height_factor) // 计算雾效因子
	{
		highp float fromEnd = fog_height_end - view_y;
		mediump float delta = fog_height_end - fog_height_begin;
		mediump float height_factor = saturate( fromEnd / delta );
		
		out(fog_height_factor, height_factor);
		// out(fog_factor, 1.0f - height_factor);
		// out(fog_factor, max(linear_fog_factor, 1.0f - height_factor));
	};
	
	vertex
	{
		highp float4 pos = transform(a_position, wvp);
	    vertex(pos);

    	// diffuse
		mediump float4 uv0 = float4(1.0f - texcoord0.x,texcoord0.y, 1.0f, 0.0f);
		out(UV0, uv0);


		// // 在vertex中计算高度雾
		// macro(SCENE_FOG) {
		// 	branch ("1") {
		// 		mediump float4 pos_world = transform(a_position, world);
		// 		mediump float height = pos_world.y;

		// 		function get_fog_height1(u_fog_info.z, u_fog_info.w, height) out(mediump float fog_height_factor1);

		// 		mediump float distance = pos.z;
		// 		out(fog_distance , distance);
		// 		out(fog_height_factor, 1.0f - fog_height_factor1);
		// 	}
		// 	branch ("0") {
		// 	}
		// };
	}

	pixel
	{
		lowp float4 fxmask_value = sample(_FXMask, UV0.xy * float2(_MaskUScale,_MaskVScale) + float2(_MaskUOffset,_MaskVOffset));
		mediump float height_factor =  1.0f - UV0.y;
		lowp float link_mask = (1.0f - fxmask_value.b) * _HeightFactor;
		lowp float clampResult81 = saturate((height_factor + link_mask - _ChangeAmount) / (_ChangeAmount * 0.1f + _ChangeSmooth));
		mediump float3 emiss_color_ = fxmask_value.g * fxmask_value.b  * ( 1.0f - clampResult81 ) * _EdgeIntensity * _EmissColor.xyz;
				

		lowp float clampResult82 = saturate(fxmask_value.r - _ChangeAmount2 + _ChangeOffset/ _ChangeSmooth2);
		mediump float edge_factor_ = abs(_EdgeDistance - clampResult82) / _Width;
		float edge_factor = smoothstep(1.0f,_EdgeHardness,edge_factor_);
		mediump float3 emiss_color = edge_factor * _EdgeIntensity * _EmissColor.xyz * 0.2f + emiss_color_;

		mediump float emiss_desaturate = dot(emiss_color, float3(0.299f, 0.587f, 0.114f));
		mediump float3 emiss_desaturate_color = lerp( emiss_color, float3(emiss_desaturate), float3(_EmissAdjust));
		mediump float3 combined_color = sample(Tex0, UV0.xy * float2(_UScale,_VScale)).xyz * _Luminance + emiss_desaturate_color;
		mediump float combined_desaturate = dot(combined_color, float3(0.299f, 0.587f, 0.114f));
		mediump float3 output_color = lerp(combined_color, float3(combined_desaturate),float3(_DeSaturate));


	 //    macro(ALPHA_TEST_ENABLE)
		// {
		//   	branch("1") {
		// 		alphatest("<")(output_aplha - alphaRef, 0.0f);
		//   	}
		// 	branch("0") {
		//  	}
		// };

		// macro(SCENE_FOG) out(float3 fog_combined_color)
		// {
		// 	branch("1")
		// 	{
		// 		lowp float fog_factor = saturate((fxmask_value.r - _FogDepthEnd) / (_FogDepthStart - _FogDepthEnd));
		// 		lowp float3 fog_fixed_color = lerp(_FogColor.rgb,output_color,float3(fog_factor));
		// 		lowp float3 fog_combined = lerp(fog_fixed_color,output_color,float3(clampResult82));
		// 		out(fog_combined_color,fog_combined);
		// 	}
		// 	branch("0")
		// 	{
		// 		out(fog_combined_color,output_color.rgb);
		// 	}
		// };

		// pixel(float4(float3(pattern_tex_value.xyz),1.0f));
		pixel(float4(output_color, AlphaMtl));
	}
}
